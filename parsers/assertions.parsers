abstractAssertionParser
 description Test above particle's output.
 extends abstractScrollParser
 string bindTo previous
 catchAllAtomType codeAtom
 cueFromId
 javascript
  buildHtml() {
   return ``
  }
  get particleToTest() {
    // If the previous particle is also an assertion particle, use the one before that.
    return this.previous.particleToTest ? this.previous.particleToTest : this.previous
  }
  get format() { return "html"}
  get actual() {
    let {format} = this
    format = format.substr(0, 1).toUpperCase() + format.substr(1)
    const methodName = `build${format}`
    return this.particleToTest[methodName]()
   }
  getErrors() {
    const {actual, expected} = this
    const errors = super.getErrors()
    if (this.areEqual(actual, expected))
      return errors
    return errors.concat(this.makeError(`'${actual}' did not ${this.kind} '${expected}'`))
  }
  get expected() {
    return this.length ? this.subparticlesToString() : (this.content ? this.content : "")
  }
 catchAllParser htmlLineParser

assertSilenceBelowErrorsParser
 description Silence errors in the below particle in automated tests.
 extends abstractScrollParser
 string bindTo next
 cueFromId
 javascript
  getErrors() {
    if (!this.next) return []
    this.next.silenceErrors = true
    this.next.topDownArray.forEach(part => part.silenceErrors = true)
    return []
  }

assertionKindAtom
 enum includes excludes equals
 paint constant

assertParser
 extends abstractAssertionParser
 atoms cueAtom outputFileExtensionAtom assertionKindAtom
 catchAllAtomType stringAtom
 example
  Hello
  assert txt includes Hello
 javascript
  get format() {
    return this.atoms[1]
  }
  get expected() {
    return this.length ? this.subparticlesToString() : this.getAtomsFrom(3).join(" ")
  }
  get kind() {
    return this.atoms[2]
  }
  areEqual(actual, expected) {
    const operator = this.kind
    if (operator === "includes") return actual.includes(expected)
    if (operator === "excludes") return !actual.includes(expected)
    if (operator === "equals") return actual === expected
  }

assertHtmlEqualsParser
 extends abstractAssertionParser
 string kind equal
 example
  <b></b>
  assertHtmlEquals <b></b>
 javascript
  areEqual(actual, expected) {
    return actual === expected
  }

assertBuildIncludesParser
 extends abstractAssertionParser
 string kind include
 example
  buildCsv
  assertBuildIncludes virginica
 javascript
  areEqual(actual, expected) {
    return actual.includes(expected)
  }
  get actual() { return this.particleToTest.buildOutput()}

assertHtmlIncludesParser
 extends abstractAssertionParser
 string kind include
 javascript
  areEqual(actual, expected) {
    return actual.includes(expected)
  }

assertHtmlExcludesParser
 extends abstractAssertionParser
 string kind exclude
 javascript
  areEqual(actual, expected) {
    return !actual.includes(expected)
  }
