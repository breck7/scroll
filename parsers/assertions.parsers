abstractAssertionParser
 description Test above particle's output.
 extends abstractScrollParser
 string bindTo previous
 catchAllAtomType codeAtom
 cueFromId
 javascript
  buildHtml() {
   return ``
  }
  get particleToTest() {
    // If the previous particle is also an assertion particle, use the one before that.
    return this.previous.particleToTest ? this.previous.particleToTest : this.previous
  }
  get actual() {return this.particleToTest.buildHtml()}
  getErrors() {
    const {actual, expected} = this
    const errors = super.getErrors()
    if (this.areEqual(actual, expected))
      return errors
    return errors.concat(this.makeError(`'${actual}' did not ${this.kind} '${expected}'`))
  }
  get expected() {
    return this.length ? this.subparticlesToString() : (this.content ? this.content : "")
  }
 catchAllParser htmlLineParser

assertIgnoreBelowErrorsParser
 description If you want to ignore any errors in the below particle in automated tests.
 extends abstractScrollParser
 string bindTo next
 cueFromId

assertHtmlEqualsParser
 extends abstractAssertionParser
 string kind equal
 javascript
  areEqual(actual, expected) {
    return actual === expected
  }
  // todo: why are we having to super here?
  getErrors() { return super.getErrors()}

assertBuildIncludesParser
 extends abstractAssertionParser
 string kind include
 javascript
  areEqual(actual, expected) {
    return actual.includes(expected)
  }
  get actual() { return this.particleToTest.buildOutput()}
  getErrors() { return super.getErrors()}

assertHtmlIncludesParser
 extends abstractAssertionParser
 string kind include
 javascript
  areEqual(actual, expected) {
    return actual.includes(expected)
  }
  getErrors() { return super.getErrors()}

assertHtmlExcludesParser
 extends abstractAssertionParser
 string kind exclude
 javascript
  areEqual(actual, expected) {
    return !actual.includes(expected)
  }
  getErrors() { return super.getErrors()}
