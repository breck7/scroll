importParser
 description Import a file.
 popularity 0.007524
 cueFromId
 atoms parseTimeCommandAtom
 extends abstractScrollParser
 catchAllAtomType filePathAtom
 int filenameAt 1
 example
  import header.scroll
 javascript
  get filename() {
    return this.getAtom(this.filenameAt)
  }
  get fullpath() {
    const {fileSystem, filePath} = this.root
    return fileSystem.makeRelativePath(filePath, this.filename)
  }
  async wake() {
    const {fullpath} = this
    const {file} = this.root
    if (!file.importsFiles)
     file.importsFiles = new Set()
    file.importsFiles.add(fullpath)
    return await this._handleImport()
  }
  async _handleImport() {
    const hasCircular = await this._hasCircularImports(this.root.filePath, this.fullpath)
    if (hasCircular)
      return await this._handleCircularImport(hasCircular)
    const file = await this._getFile()
    const particleCount = file.scrollProgram.length
    if (!file.exists)
      return await this._handleFileDoesNotExist()
    const newParticle = new Particle(`imported ${this.fullpath}\n exists true\n original ${this.getLine()}\n particles ${particleCount}`)
    if (this.has("moveToFooter"))
      newParticle.particleAt(0).set("moveToFooter", "true")
    await this.root.appendFromStream(newParticle.toString())
    // Don't import importOnly lines
    // todo: look at perf
    const block = new Particle(file.scrollProgram.toString())
    block.delete("importOnly")
    await this.root.appendFromStream(block.toString())
    this.destroy()
  }
  async _handleFileDoesNotExist() {
    const newParticle = new Particle(`imported ${this.fullpath}\n exists false\n original ${this.getLine()}\n particles 0`)
    await this.root.appendFromStream(newParticle.toString())
    this.destroy()
  }
  async _handleCircularImport(hasCircular) {
    const newParticle = new Particle(`imported ${this.fullpath}\n exists true\n original ${this.getLine()}\n particles 0\n circularImportError Circular import error: ${hasCircular}`)
    await this.root.appendFromStream(newParticle.toString())
    this.destroy()
  }
  async _hasCircularImports(importer, importee) {
    // if a.scroll requires a.scroll
    if (importer === importee)
      return `${importee} imports itself`
    const {fileSystem} = this.root
    // Now check the files that the importee is importing
    const importeeFile = await fileSystem.getFile(importee)
    if (!importeeFile.importsFiles)
      return false
    if (importeeFile.importsFiles.has(importer))
      return `${importee} imports ${importer}`
    for (let importPath of importeeFile.importsFiles) {
      // console.log(`Checking if ${importPath} imports ${importer}`)
      if (await this._hasCircularImports(importPath, importer))
        return `${importPath} and ${importer}`
    }
    return false
  }
  async _getFile() {
    const {fileSystem, file} = this.root
    const fileToImport = await fileSystem.getFile(this.fullpath)
    await fileToImport.singlePassFuse()
    return fileToImport
  }

scrollImportedParser
 description Inserted at import pass.
 boolean suggestInAutocomplete false
 cue imported
 atoms parseTimeCommandAtom
 extends abstractScrollParser
 baseParser blobParser
 catchAllAtomType filePathAtom
 javascript
  async wake() {
    this.checkForFooterMoves()
  }
  get dependencies() { return [this.atoms[1]]}
  checkForFooterMoves() {
    // If a particle was imported with the "moveToFooter" subparticle set, then that means we want
    // to move those imported particles to the end of the document.
    if (!this.has("moveToFooter"))
      return
    this.root.notifyOnReady(this)
  }
  onReady() {
    // We move the imported particle along with the number of lines originally imported
    // to the bottom of the document. Note: I have not looked into perf yet.
    const particleCount = parseInt(this.get("particles"))
    const index = this.index
    const particles = this.root.slice(index, index + particleCount + 1)
    const str = particles.map(part => part.toString()).join("\n")
    this.root.appendBlocks(str)
    particles.forEach(particle => particle.destroy())
  }
  getErrors() {
    if (this.has("circularImportError"))
      return [this.makeError(this.get("circularImportError"))]
    if (this.get("exists") === "false" && this.previous.getLine() !== "// optional")
      return [this.makeError(`File '${this.atoms[1]}' does not exist.`)]
    return []
  }

importToFooterParser
 description Import to bottom of file.
 atoms parseTimeCommandAtom
 cue moveToFooter

quickImportParser
 popularity 0.007524
 description Import a Scroll file.
 extends importParser
 boolean isPopular true
 int filenameAt 0
 inScope importToFooterParser abstractCommentParser
 atoms urlAtom
 pattern ^[^\s]+\.scroll$
 example
  header.scroll

useParserPoolParser
 cueFromId
 description Load a cached parser pool.
 extends abstractScrollParser
 atoms cueAtom urlAtom
 javascript
  async wake() {
    this.switchParserPool(this.filename)
  }
  get filename() { return this.atoms[1]}
  get dependencies() { return [this.filename]}

parsersImportParser
 description Import a Parsers file.
 extends quickImportParser
 inScope abstractCommentParser
 pattern ^[^\s]+\.parsers$
 example
  measures.parsers
 javascript
  async _handleImport() {
    const file = await this._getFile()
    if (!file.exists)
      return await this._handleFileDoesNotExist()
    // todo: cleanup
    const newp = this.replaceWith(`useParserPool ${this.fullpath}`)
    await newp[0].wake()
  }

importOnlyParser
 popularity 0.033569
 // This line will be not be imported into the importing file.
 description Don't build this file.
 cueFromId
 atoms parseTimeCommandAtom
 extends abstractTopLevelSingleMetaParser

abstractQuickIncludeParser
 popularity 0.007524
 extends abstractScrollParser
 atoms urlAtom
 javascript
  get dependencies() { return [this.filename]}
  get filename() {
    return this.getAtom(0)
  }