importParser
 description Import a file.
 popularity 0.007524
 cueFromId
 atoms preBuildCommandAtom
 extends abstractScrollParser
 catchAllAtomType filePathAtom
 int filenameAt 1
 example
  import header.scroll
 javascript
  get filename() {
    return this.getAtom(this.filenameAt)
  }
  get fullpath() {
    const {fileSystem, filePath} = this.root
    return fileSystem.makeRelativePath(filePath, this.filename)
  }
  async wake() {
    const absoluteImportFilePath = this.fullpath
    const originalLine = this.getLine()
    const file = await this.getFile()
    const particleCount = file.scrollProgram.length
    const circularImportError = false
    const newParticle = new Particle(`imported ${absoluteImportFilePath}\n exists ${file.exists}\n original ${originalLine}\n particles ${particleCount}`)
    if (circularImportError) {
      hasCircularImportError = true
      newParticle.particleAt(0).set("circularImportError", circularImportError)
    }
    if (this.has("footer"))
      newParticle.particleAt(0).set("moveToFooter", "true")
    await this.root.appendFromStream(newParticle.toString())
    // Don't import importOnly lines
    // todo: look at perf
    const block = new Particle(file.scrollProgram.toString())
    block.delete("importOnly")
    await this.root.appendFromStream(block.toString())
    this.destroy()
  }
  async getFile() {
    const {Disk, fileSystem} = this.root
    const file = await fileSystem.getFile(this.fullpath)
    await file.singlePassFuse()
    return file
  }

scrollImportedParser
 description Inserted at import pass.
 boolean suggestInAutocomplete false
 cue imported
 atoms preBuildCommandAtom
 extends abstractScrollParser
 baseParser blobParser
 catchAllAtomType filePathAtom
 javascript
  async wake() {
    this.checkForFooterMoves()
  }
  checkForFooterMoves() {
    // If a particle was imported with the "footer" subparticle set, then that means we want
    // to move those imported particles to the end of the document. We added a handleFooterMoves
    // method to the root particle that gets called and will check if there are any footer moves
    // to be made.
    if (!this.has("moveToFooter"))
      return
    if (!this.root.footerMoves)
      this.root.footerMoves = []
    this.root.footerMoves.push(this)
  }
  moveToFooter() {
    // We move the imported particle along with the number of lines originally imported
    // to the bottom of the document. Note: I have not looked into perf yet.
    const particleCount = parseInt(this.get("particles"))
    const index = this.index
    const particles = this.root.slice(index, index + particleCount + 1)
    const str = particles.map(part => part.toString()).join("\n")
    this.root.appendBlocks(str)
    particles.forEach(particle => particle.destroy())
  }
  getErrors() {
    if (this.has("circularImportError"))
      return [this.makeError(this.get("circularImportError"))]
    if (this.get("exists") === "false" && this.previous.getLine() !== "// optional")
      return [this.makeError(`File '${this.atoms[1]}' does not exist.`)]
    return []
  }

importToFooterParser
 description Import to bottom of file.
 atoms preBuildCommandAtom
 cue footer

quickImportParser
 popularity 0.007524
 description Import a Scroll or Parsers file.
 extends importParser
 boolean isPopular true
 int filenameAt 0
 inScope importToFooterParser abstractCommentParser
 atoms urlAtom
 pattern ^[^\s]+\.(scroll|parsers)$
 example
  header.scroll

importOnlyParser
 popularity 0.033569
 // This line will be not be imported into the importing file.
 description Don't build this file.
 cueFromId
 atoms preBuildCommandAtom
 extends abstractTopLevelSingleMetaParser

abstractQuickIncludeParser
 popularity 0.007524
 extends abstractScrollParser
 atoms urlAtom
 javascript
  get dependencies() { return [this.filename]}
  get filename() {
    return this.getAtom(0)
  }