buildCommandAtom
 extends cueAtom
 description Give build command atoms their own color.
 paint constant

abstractBuildCommandParser
 extends abstractScrollParser
 cueFromId
 atoms buildCommandAtom
 catchAllAtomType filePathAtom
 inScope slashCommentParser
 javascript
  isTopMatter = true
  buildHtml() {
   return ""
  }
  get extension() {
    return this.cue.replace("build", "")
  }
  buildOutput() {
    return this.root.compileTo(this.extension)
  }
  get outputFileNames() {
    return this.content?.split(" ") || [this.root.permalink.replace(".html", "." + this.extension.toLowerCase())]
  }
  async _buildFileType(extension, options) {
    const {root} = this
    const { fileSystem, folderPath, filename, filePath, path, lodash } = root
    const capitalized = lodash.capitalize(extension)
    const buildKeyword = "build" + capitalized
    const {outputFileNames} = this
    for (let name of outputFileNames) {
      try {
        await fileSystem.writeProduct(path.join(folderPath, name), root.compileTo(capitalized))
        root.log(`ðŸ’¾ Built ${name} from ${filename}`)
      } catch (err) {
        console.error(`Error while building '${filePath}' with extension '${extension}'`)
        throw err
      }
    }
  }

abstractBuildOneCommandParser
 // buildOne and buildTwo are just a dumb/temporary way to have CSVs/JSONs/TSVs build first. Will be merged at some point.
 extends abstractBuildCommandParser
 javascript
  async buildOne(options) { await this._buildFileType(this.extension, options) }

abstractBuildTwoCommandParser
 extends abstractBuildCommandParser
 javascript
  async buildTwo(options) {
    await this._buildFileType(this.extension, options)
  }

scrollFileAddressParser
 catchAllAtomType filePathAtom
 catchAllParser scrollFileAddressParser

abstractInlineFileParser
 extends abstractScrollParser
 catchAllAtomType filePathAtom
 catchAllParser scrollFileAddressParser
 string joinChar ;\n\n
 string htmlTag script
 javascript
  get files() {
    const inline = this.atoms.slice(1)
    const children = this.map(particle => particle.cue)
    return inline.concat(children)
  }
  get contents() {
    return this.files.map(filename => this.root.readFile(filename)).join(this.joinChar)
  }
  buildHtml() {
   return `<${this.htmlTag}>/* ${this.files.join(" ")} */\n${this.contents}</${this.htmlTag}>`
  }
