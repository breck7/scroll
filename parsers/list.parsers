listAftertextParser
 popularity 0.014325
 extends abstractIndentableParagraphParser
 example
  - I had a _new_ thought.
 description A list item.
 cue -
 string tag li
 string listType ul
 string defaultClassName 
 string attributes 
 javascript
  buildHtml() {
   const {index, parent} = this
   const particleClass = this.constructor
   const isStartOfList = index === 0 || !(parent.particleAt(index - 1) instanceof particleClass)
   const isEndOfList = parent.length === index + 1 || !(parent.particleAt(index + 1) instanceof particleClass)
   const { listType } = this
   return (isStartOfList ? `<${listType} ${this.attributes}>` : "") + `${super.buildHtml()}` + (isEndOfList ? `</${listType}>` : "")
  }

abstractCustomListItemParser
 extends listAftertextParser
 javascript
  get requireOnce() {
    return `<style>\n.${this.constructor.name} li::marker {content: "${this.cue} ";}\n</style>`
  }
  get attributes() {
    return `class="${this.constructor.name}"`
  }

orderedListAftertextParser
 popularity 0.004485
 extends listAftertextParser
 description A list item.
 example
  1. Hello world
 pattern ^\d+\. 
 string listType ol
 javascript
  get attributes() { return ` start="${this.getAtom(0)}"`}