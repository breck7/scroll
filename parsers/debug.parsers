debugSourceStackParser
 // useful for debugging
 description Print compilation steps.
 extends abstractAftertextParser
 cueFromId
 example
  printOriginalSource
 javascript
  get sources() {
    const {file} = this.root
    const passNames = ["codeAtStart", "fusedCode", "codeAfterMacros"]
    let lastCode = ""
    return passNames.map(name => {
      let code = name === "codeAfterMacros" ? this.root.toString() : file[name]
      if (lastCode === code)
        code = "[Unchanged]"
      lastCode = file[name]
      return {
      name,
      code
    }})
  }
  buildHtml() {
   return `<code class="scrollCodeBlock">${this.buildTxt().replace(/\</g, "&lt;")}</code>`
  }
  buildTxt() {
   return this.sources.map((pass, index) => `Pass ${index + 1} - ${pass.name}\n========\n${pass.code}`).join("\n\n\n")
  }

debugParsersParser
 description Print source code of all parsers used.
 extends codeParser
 cueFromId
 javascript
  buildParsers() { return this.code}
  get code() {
    return this.root.definition.toString()
  }

debugBelowParser
 description Inspect particle below.
 extends belowAsCodeParser
 string copyFromExternal .debug.css
 javascript
  get code() {
    const mapFn = particle => {
    const atomTypes = particle.lineAtomTypes.split(" ")
    return `<div class="debugParticle"><span class="debugParticleId">${particle.constructor.name}</span>${particle.atoms.map((atom, index) => `<span class="debugAtom">${atom}<span class="debugAtomType">${atomTypes[index]}</span></span>`).join(" ")}${(particle.length ? `<br><div class="debugSubparticles">` + particle.map(mapFn).join("<br>") + `</div>` : "")}</div>`}
   return this.selectedParticles.map(mapFn).join("<br>")
  }
  buildHtml() {
   return `<link rel="stylesheet" href=".debug.css">` + this.code
  }
  buildTxt() {
    return this.root.inspect(this.selectedParticles)
  }
  buildParsers() {return this.buildTxt()}

debugAboveParser
 description Inspect particle above.
 extends debugBelowParser
 string bindTo previous
 string method previous
 boolean reverse true

debugAllParser
 description Inspect entire document.
 extends debugBelowParser
 javascript
  get selectedParticles() { return this.root.getSubparticles()}

debugTestParser
 description Inspect entire document during test.
 extends debugAllParser
 example
  // Test with "scroll test"
  # Hello world
  debugTest
 javascript
  getErrors() {
    console.log(this.buildTxt())
    return super.getErrors()
  }