abstractTableTransformParser
 atoms cueAtom
 inScope abstractTableVisualizationParser abstractTableTransformParser h1Parser h2Parser scrollQuestionParser htmlInlineParser scrollBrParser slashCommentParser
 javascript
  get coreTable() {
    return this.parent.coreTable
  }
  get columnNames() {
    return this.parent.columnNames
  }
  connectColumnNames(userColumnNames, availableColumnNames = this.parent.columnNames) {
    const result = {}
    const normalize = str => str.toLowerCase().trim()
    userColumnNames.forEach(userColumn => {
      // Strategy 1: Exact match
      const exactMatch = availableColumnNames.find(col => col === userColumn)
      if (exactMatch) {
        result[userColumn] = exactMatch
        return
      }
      // Strategy 2: Case-insensitive match
      const normalizedUserColumn = normalize(userColumn)
      const caseInsensitiveMatch = availableColumnNames.find(col => normalize(col) === normalizedUserColumn)
      if (caseInsensitiveMatch) {
        result[userColumn] = caseInsensitiveMatch
        return
      }
      // Strategy 3: Levenshtein distance match
      const THRESHOLD = 2 // Consider matches with distance <= 2 as "very close"
      let bestMatch = null
      let bestDistance = Infinity
      availableColumnNames.forEach(col => {
        const distance = this.root.levenshteinDistance(userColumn, col)
        if (distance < bestDistance) {
          bestDistance = distance
          bestMatch = col
        }
      })
      // Only use Levenshtein match if it's very close
      if (bestDistance <= THRESHOLD) {
        result[userColumn] = bestMatch
        return
      }
      // Strategy 4: Fallback - use original unmatched name
      result[userColumn] = userColumn
    })
    return result
  }
  connectColumnName(name) {
    return this.connectColumnNames([name])[name]
  }
  getErrors() {
    if (this.silenceErrors) return [] // todo: generalize this?
    return super.getErrors()
  }
  getRunTimeEnumOptions(atom) {
   if (atom.atomTypeId === "columnNameAtom")
      return this.parent.columnNames
   return super.getRunTimeEnumOptions(atom)
  }
  getRunTimeEnumOptionsForValidation(atom) {
    // Note: this will fail if the CSV file hasnt been built yet.
    if (atom.atomTypeId === "columnNameAtom")
      return this.parent.columnNames.concat(this.parent.columnNames.map(c => "-" + c)) // Add reverse names
   return super.getRunTimeEnumOptions(atom)
  }

abstractColumnNameParser
 atoms cueAtom columnNameAtom
 javascript
  getRunTimeEnumOptions(atom) {
   if (atom.atomTypeId === "columnNameAtom")
      return this.parent.columnNames
   return super.getRunTimeEnumOptions(atom)
  }

scrollXParser
 cue x
 extends abstractColumnNameParser

scrollYParser
 cue y
 extends abstractColumnNameParser

abstractTableVisualizationParser
 extends abstractScrollWithRequirementsParser
 boolean isTableVisualization true
 javascript
  get columnNames() {
    return this.parent.columnNames
  }

printColumnParser
 popularity 0.000024
 description Print one column
 extends abstractTableVisualizationParser
 example
  printColumn tags
 catchAllAtomType columnNameAtom
 joinParser
  boolean allowTrailingWhitespace true
  cueFromId
  atoms cueAtom
  catchAllAtomType stringAtom
 javascript
  buildHtml() {
   return this.columnValues.join(this.join)
  }
  buildTxt() {
    return this.columnValues.join(this.join)
  }
  get join() {
    return this.get("join") || "\n"
  }
  get columnName() {
    return this.atoms[1]
  }
  get columnValues() {
    return this.parent.coreTable.map(row => row[this.columnName])
  }


printTableParser
 popularity 0.001085
 cueFromId
 description Print datatable.
 extends abstractTableVisualizationParser
 javascript
  get tableHeader() {
   return this.columns.filter(col => !col.isLink).map(column => `<th>${column.name}</th>\n`)
  }
  get columnNames() {
   return this.parent.columnNames
  }
  buildJson() {
    return JSON.stringify(this.coreTable, undefined, 2)
  }
  buildCsv() {
     return new Particle(this.coreTable).asCsv
  }
  buildTsv() {
     return new Particle(this.coreTable).asTsv
  }
  get columns() {
   const {columnNames} = this
   return columnNames.map((name, index) => {
    const isLink = name.endsWith("Link")
    const linkIndex = columnNames.indexOf(name + "Link")
    return {
     name,
     isLink,
     linkIndex
    }
   })
  }
  toRow(row) {
    const {columns} = this
    const atoms = columns.map(col => row[col.name])
   let str = ""
   let column = 0
   const columnCount = columns.length
   while (column < columnCount) {
    const col = columns[column]
    column++
    const content = ((columnCount === column ? atoms.slice(columnCount - 1).join(" ") : atoms[column - 1]) ?? "").toString()
    if (col.isLink) continue
    const isTimestamp = col.name.toLowerCase().includes("time") && /^\d{10}(\d{3})?$/.test(content)
    const text =  isTimestamp ? new Date(parseInt(content.length === 10 ? content * 1000 : content)).toLocaleString() : content
    let tagged = text
    const link = atoms[col.linkIndex]
    const isUrl = content.match(/^https?\:[^ ]+$/)
    if (col.linkIndex > -1 && link) tagged = `<a href="${link}">${text}</a>`
    else if (col.name.endsWith("Url")) tagged = `<a href="${content}">${col.name.replace("Url", "")}</a>`
    else if (isUrl) tagged = `<a href="${content}">${text}</a>`
    str += `<td>${tagged}</td>\n`
   }
   return str
  }
  get coreTable() {
    return this.parent.coreTable
  }
  get tableBody() {
   return this.coreTable
    .map(row => `<tr>${this.toRow(row)}</tr>`)
    .join("\n")
  }
  buildHtml() {
   return `<table id="table${this._getUid()}" class="scrollTable">
   <thead><tr>${this.tableHeader.join("\n")}</tr></thead>
   <tbody>${this.tableBody}</tbody>
   </table>`
  }
  buildTxt() {
    return this.parent.delimitedData || new Particle(this.coreTable).asCsv
  }

scrollTableDataParser
 popularity 0.001061
 cue data
 atoms cueAtom
 description Table from inline delimited data.
 baseParser blobParser

scrollTableDelimiterParser
 popularity 0.001037
 description Set the delimiter.
 cue delimiter
 atoms cueAtom stringAtom
 javascript
  buildHtml() {
    return ""
  }

abstractDatatableProviderParser
 description A datatable.
 extends abstractScrollParser
 inScope scrollTableDataParser scrollTableDelimiterParser abstractTableVisualizationParser abstractTableTransformParser h1Parser h2Parser scrollQuestionParser htmlInlineParser scrollBrParser slashCommentParser
 javascript
  get visualizations() {
    return this.topDownArray.filter(particle => particle.isTableVisualization || particle.isHeader || particle.isHtml)
  }
  buildHtml(buildSettings) {
   return this.visualizations.map(particle => particle.buildHtml(buildSettings))
     .join("\n")
     .trim()
  }
  buildTxt() {
    return this.visualizations.map(particle => particle.buildTxt())
     .join("\n")
     .trim()
  }
  _coreTable
  get coreTable() {
    if (this._coreTable) return this._coreTable
    const {delimiter, delimitedData} = this
    return []
  }
  get columnNames() {
    return []
  }

scrollTableParser
 extends abstractDatatableProviderParser
 popularity 0.002133
 cue datatable
 example
  datatable
   printTable
   data
    year,count
    1900,10
    2000,122
    2020,23
 catchAllAtomType filePathAtom
 int atomIndex 1
 javascript
  get delimiter() {
     const {filename} = this
     let delimiter = ""
     if (filename) {
       const extension = filename.split('?')[0].split(".").pop()
       if (extension === "json") delimiter = "json"
       if (extension === "particles") delimiter = "particles"
       if (extension === "csv") delimiter = ","
       if (extension === "tsv") delimiter = "\t"
       if (extension === "ssv") delimiter = " "
       if (extension === "psv") delimiter = "|"
     }
     if (this.get("delimiter"))
       delimiter = this.get("delimiter")
     else if (!delimiter) {
       const header = this.delimitedData.split("\n")[0]
       if (header.includes("\t"))
         delimiter = "\t"
       else if (header.includes(","))
        delimiter = ","
       else
        delimiter = " "
     }
     return delimiter
   }
   get filename() {
     return this.getAtom(this.atomIndex)
   }
   get coreTable() {
    if (this._coreTable) return this._coreTable
    const {delimiter, delimitedData} = this
    if (delimiter === "json") {
       const obj = JSON.parse(delimitedData)
       let rows = []
       // Optimal case: Array of objects
       if (Array.isArray(obj)) { rows = obj}
       else if (!Array.isArray(obj) && typeof obj === "object") {
          // Case 2: Nested array under a key
         const arrayKey = Object.keys(obj).find(key => Array.isArray(obj[key]))
         if (arrayKey) rows = obj[arrayKey]
       }
       // Case 3: Array of primitive values
       else if (Array.isArray(obj) && obj.length && typeof obj[0] !== "object") {
           rows = obj.map(value => ({ value }))
       }
       this._columnNames = rows.length ? Object.keys(rows[0]) : []
       this._coreTable = rows
       return rows
    }
    else if (delimiter === "particles") {
       const d3lib = this.root.d3
       this._coreTable = d3lib.dsvFormat(",").parse(new Particle(delimitedData).asCsv, d3lib.autoType)
    } else {
      const d3lib = this.root.d3
      this._coreTable = d3lib.dsvFormat(delimiter).parse(delimitedData, d3lib.autoType)
    }
    this._columnNames = this._coreTable.columns
    delete this._coreTable.columns
    return this._coreTable
  }
  get columnNames() {
    // init coreTable to set columns
    const coreTable = this.coreTable
    return this._columnNames
  }
  async load() {
    if (this.filename)
      await this.root.fetch(this.filename)
  }
  get fileContent() {
    return this.root.readSyncFromFileOrUrl(this.filename)
  }
   get delimitedData() {
     // json csv tsv
     if (this.filename)
       return this.fileContent
     const dataParticle = this.getParticle("data")
     if (dataParticle)
       return dataParticle.subparticlesToString()
     // if not dataparticle and no filename, check [permalink].csv
     if (this.isNodeJs())
       return this.root.readFile(this.root.permalink.replace(".html", "") + ".csv")
     return  ""
   }

quickTableParser
 popularity 0.000024
 extends scrollTableParser
 atoms urlAtom
 pattern ^[^\s]+\.(tsv|csv|ssv|psv|json)(?:\?[^\s]*)?$
 int atomIndex 0
 javascript
  get dependencies() { return [this.cue]}

scrollWhereParser
 extends abstractTableTransformParser
 description Filter rows by condition.
 cue where
 atoms cueAtom columnNameAtom comparisonAtom
 catchAllAtomType constantAtom
 example
  datatable iris.csv
   where Species = setosa
 javascript
  get coreTable() {
   // todo: use atoms here.
   const columnName = this.connectColumnName(this.getAtom(1))
   const operator = this.getAtom(2)
   let untypedComparisonValue = this.getAtom(3)
   const typedComparisonValue = isNaN(parseFloat(untypedComparisonValue)) ? untypedComparisonValue : parseFloat(untypedComparisonValue)
   const coreTable = this.parent.coreTable
   if (!columnName || !operator || (untypedComparisonValue === undefined && !operator.includes("mpty"))) return coreTable
    const filterFn = row => {
      const atom = row[columnName]
      const typedAtom = atom === null ? undefined : atom // convert nulls to undefined
      if (operator === "=") return typedComparisonValue === typedAtom
      else if (operator === "!=") return typedComparisonValue !== typedAtom
      else if (operator === "includes") return typedAtom !== undefined && typedAtom.includes(typedComparisonValue)
      else if (operator === "startsWith") return typedAtom !== undefined && typedAtom.toString().startsWith(typedComparisonValue)
      else if (operator === "endsWith") return typedAtom !== undefined && typedAtom.toString().endsWith(typedComparisonValue)
      else if (operator === "doesNotInclude") return typedAtom === undefined || !typedAtom.includes(typedComparisonValue)
      else if (operator === ">") return typedAtom > typedComparisonValue
      else if (operator === "<") return typedAtom < typedComparisonValue
      else if (operator === ">=") return typedAtom >= typedComparisonValue
      else if (operator === "<=") return typedAtom <= typedComparisonValue
      else if (operator === "empty") return typedAtom === "" || typedAtom === undefined
      else if (operator === "notEmpty") return typedAtom !== "" && typedAtom !== undefined
    }
   return coreTable.filter(filterFn)
  }

scrollSelectParser
 catchAllAtomType columnNameAtom
 extends abstractTableTransformParser
 description Drop all columns except these.
 example
  tables
   data
    name,year,count
    index,2022,2
    about,2023,4
   select name year
    printTable
 cue select
 javascript
  get coreTable() {
   const {coreTable} = this.parent
   const {columnNames} = this
   if (!columnNames.length) return coreTable
   return coreTable.map(row => Object.fromEntries(columnNames.map(colName => [colName, row[colName]])))
  }
  get columnNames() {
    if (!this._columnNames) {
      const names = this.getAtomsFrom(1)
     this._columnNamesMap = this.connectColumnNames(names)
     this._columnNames = names.map(name => this._columnNamesMap[name])
    }
    return this._columnNames
  }


scrollReverseParser
 extends abstractTableTransformParser
 description Reverse rows.
 cue reverse
 javascript
  get coreTable() {
   return this.parent.coreTable.slice().reverse()
  }

scrollComposeParser
 extends abstractTableTransformParser
 description Add column using format string.
 catchAllAtomType codeAtom
 cue compose
 atoms cueAtom newColumnNameAtom
 example
  datatable
   compose sentence My name is {name}
    printTable
 javascript
  get coreTable() {
   const {newColumnName} = this
   const formatString = this.getAtomsFrom(2).join(" ")
   return this.parent.coreTable.map((row, index) => {
     const newRow = Object.assign({}, row)
     newRow[newColumnName] = this.evaluate(new Particle(row).evalTemplateString(formatString), index)
     return newRow
   })
  }
  evaluate(str) {
    return str
  }
  get newColumnName() {
    return this.atoms[1]
  }
  get columnNames() {
    return this.parent.columnNames.concat(this.newColumnName)
  }
scrollComputeParser
 extends scrollComposeParser
 description Add column by evaling format string.
 cue compute
 javascript
  evaluate(str) {
    return parseFloat(eval(str))
  }
scrollEvalParser
 extends scrollComputeParser
 description Add column by evaling format string.
 cue eval
 javascript
  evaluate(str) {
    return eval(str)
  }
scrollRankParser
 extends scrollComposeParser
 description Add rank column.
 atoms cueAtom
 string newColumnName rank
 cue rank
 javascript
  evaluate(str, index) { return index + 1 }

scrollLinksParser
 extends abstractTableTransformParser
 description Add column with links.
 cue links
 catchAllAtomType columnNameAtom
 javascript
  get coreTable() {
   const {newColumnName, linkColumns} = this
   return this.parent.coreTable.map(row => {
     const newRow = Object.assign({}, row)
     let newValue = []
     linkColumns.forEach(name => {
       const value = newRow[name]
       delete newRow[name]
       if (value) newValue.push(`<a href="${value.includes("@") ? "mailto:" : ""}${value}">${name}</a>`)
     })
     newRow[newColumnName] = newValue.join(" ")
     return newRow
   })
  }
  get newColumnName() {
    return "links"
  }
  get linkColumns() {
    return this.getAtomsFrom(1)
  }
  get columnNames() {
    const {linkColumns} = this
    return this.parent.columnNames.filter(name => !linkColumns.includes(name)).concat(this.newColumnName)
  }

scrollLimitParser
 extends abstractTableTransformParser
 description Select a subset.
 cue limit
 atoms cueAtom integerAtom integerAtom
 javascript
  get coreTable() {
   let start = this.getAtom(1)
   let end = this.getAtom(2)
   if (end === undefined) {
     end = start
     start = 0
   }
   return this.parent.coreTable.slice(parseInt(start), parseInt(end))
  }

scrollShuffleParser
 extends abstractTableTransformParser
 description Randomly reorder rows.
 cue shuffle
 example
  datatable data.csv
   shuffle
    printTable
 javascript
  get coreTable() {
   // Create a copy of the datatable to avoid modifying original
   const rows = this.parent.coreTable.slice()
   // Fisher-Yates shuffle algorithm
   for (let i = rows.length - 1; i > 0; i--) {
     const j = Math.floor(Math.random() * (i + 1))
     ;[rows[i], rows[j]] = [rows[j], rows[i]]
   }
   return rows
  }

scrollTransposeParser
 extends abstractTableTransformParser
 description Tranpose datatable.
 cue transpose
 javascript
  get coreTable() {
   // todo: we need to switch to column based coreTable, instead of row based
   const transpose = arr => Object.keys(arr[0]).map(key => [key, ...arr.map(row => row[key])]);
   return transpose(this.parent.coreTable)
  }

scrollImputeParser
 extends abstractTableTransformParser
 description Impute missing values of a columm.
 atoms cueAtom columnNameAtom
 cue impute
 javascript
  get coreTable() {
   const {columnName} = this
   const sorted = this.root.lodash.orderBy(this.parent.coreTable.slice(), columnName)
   // ascending
   const imputed = []
   let lastInserted = sorted[0][columnName]
   sorted.forEach(row => {
    const measuredTime = row[columnName]
    while (measuredTime > lastInserted + 1) {
      lastInserted++
      // synthesize rows
      const imputedRow = {}
      imputedRow[columnName] = lastInserted
      imputedRow.count = 0
      imputed.push(imputedRow)
    }
    lastInserted = measuredTime
    imputed.push(row)
   })
   return imputed
  }
  get columnName() {
    return this.connectColumnName(this.getAtom(1))
  }

scrollOrderByParser
 extends abstractTableTransformParser
 description Sort rows by column(s).
 catchAllAtomType columnNameAtom
 cue orderBy
 javascript
  get coreTable() {
    const makeLodashOrderByParams = str => {
    const part1 = str.split(" ")
    const part2 = part1.map(col => (col.startsWith("-") ? "desc" : "asc"))
    return [part1.map(col => this.connectColumnName(col.replace(/^\-/, ""))), part2]
   }
   const orderBy = makeLodashOrderByParams(this.content)
   return this.root.lodash.orderBy(this.parent.coreTable.slice(), orderBy[0], orderBy[1])
  }

assertRowCountParser
 extends abstractTableTransformParser
 description Test row count is expected value.
 atoms cueAtom integerAtom
 cueFromId
 javascript
  getErrors() {
    const errors = super.getErrors()
    const actualRows = this.coreTable.length
    const expectedRows = parseInt(this.content)
    if (actualRows !== expectedRows)
      return errors.concat(this.makeError(`Expected '${expectedRows}' rows but got '${actualRows}'.`))
    return errors
  }

scrollRenameParser
 // todo: add support in Parsers for tuple catch alls
  catchAllAtomType columnNameAtom newColumnNameAtom
 catchAllAtomType newColumnNameAtom
 extends abstractTableTransformParser
 description Rename columns.
 example
  tables
   data
    name,year,count
    index,2022,2
   rename name Name year Year
    printTable
 cue rename
 javascript
  get coreTable() {
   const {coreTable} = this.parent
   const {renameMap} = this
   if (!Object.keys(renameMap).length) return coreTable
   return coreTable.map(row => {
      const newRow = {}
      Object.keys(row).forEach(key => {
        const name = renameMap[key] || key
        newRow[name] = row[key]
      })
      return newRow
   })
  }
  get renameMap() {
    const map = {}
    const pairs = this.getAtomsFrom(1)
    let oldName
    while (oldName = pairs.shift()) {
      map[oldName] = pairs.shift()
    }
    return map
  }
  _renamed
  get columnNames() {
   if (this._renamed)
     return this._renamed
    const {renameMap} = this
    this._renamed = this.parent.columnNames.map(name => renameMap[name] || name )
    return this._renamed
  }

tableSearchParser
 popularity 0.000072
 extends abstractScrollWithRequirementsParser
 string copyFromExternal .jquery-3.7.1.min.js .datatables.css .dayjs.min.js .datatables.js .tableSearch.js
 string requireOnce
  <script defer src=".jquery-3.7.1.min.js"></script>
  <style>.dt-search{font-family: "SF Pro", "Helvetica Neue", "Segoe UI", "Arial";}</style>
  <link rel="stylesheet" href=".datatables.css">
  <script defer src=".datatables.js"></script>
  <script defer src=".dayjs.min.js"></script>
  <script defer src=".tableSearch.js"></script>
 // adds to all tables on page
 description Table search and sort widget.
 javascript
  buildInstance() {
   return ""
  }

scrollSummarizeParser
 extends abstractTableTransformParser
 description Generate summary statistics for each column.
 cue summarize
 example
  datatable data.csv
   summarize
    printTable
 javascript
  get coreTable() {
   const {lodash} = this.root
   const sourceData = this.parent.coreTable
   if (!sourceData.length) return []
   return this.parent.columnNames.map(colName => {
     const values = sourceData.map(row => row[colName]).filter(val => val !== undefined && val !== null)
     const numericValues = values.filter(val => typeof val === "number" && !isNaN(val))
     const sorted = [...numericValues].sort((a, b) => a - b)
     // Calculate mode
     const frequency = {}
     values.forEach(val => {
       frequency[val] = (frequency[val] || 0) + 1
     })
     const mode = Object.entries(frequency)
       .sort((a, b) => b[1] - a[1])
       .map(entry => entry[0])[0]
     // Calculate median for numeric values
     const median = sorted.length ? 
       sorted.length % 2 === 0 
         ? (sorted[sorted.length/2 - 1] + sorted[sorted.length/2]) / 2
         : sorted[Math.floor(sorted.length/2)]
       : null
     const sum = numericValues.length ? numericValues.reduce((a, b) => a + b, 0) : null
     const theType = typeof values[0]
     const count = values.length
     const mean = theType === "number" ? sum/count : ""
     return {
       name: colName,
       type: theType,
       incompleteCount: sourceData.length - values.length,
       uniqueCount: new Set(values).size,
       count,
       sum,
       median,
       mean,
       min: sorted.length ? sorted[0] : null,
       max: sorted.length ? sorted[sorted.length - 1] : null,
       mode
     }
   })
  }
  get columnNames() {
   return ["name", "type", "incompleteCount", "uniqueCount", "count", "sum", "median", "mean", "min", "max", "mode"]
  }