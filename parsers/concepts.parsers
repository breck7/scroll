scrollConceptsParser
 description Load concepts as datatable.
 extends abstractDatatableProviderParser
 cue concepts
 atoms cueAtom
 example
  concepts
   printTable
 javascript
  get coreTable() {
    return this.root.concepts
  }
  get columnNames() {
    return this.root.measures.map(col => col.Name)
  }

loadConceptsParser
 // todo: clean this up. just add smarter imports with globs?
 // this currently removes any "import" statements.
 description Import all concepts in a folder.
 extends abstractBuildCommandParser
 cueFromId
 atoms parseTimeCommandAtom filePathAtom
 javascript
  async load() {
   const { Disk, path, importRegex } = this.root
   const folder = path.join(this.root.folderPath, this.getAtom(1))
   const ONE_BIG_FILE = Disk.getFiles(folder).filter(file => file.endsWith(".scroll")).map(Disk.read).join("\n\n").replace(importRegex, "")
    this.parent.concat(ONE_BIG_FILE)
  }

buildConceptsParser
 popularity 0.000024
 cueFromId
 description Compile concepts to delimited files.
 extends abstractBuildCommandParser
 sortByParser
  cueFromId
  atoms cueAtom columnNameAtom
 javascript
  buildOutput() {
    // For testing
    return this.root.compileConcepts(this.outputFiles[0], this.sortBy)
  }
  get sortBy() {
    return this.get("sortBy")
  }
  get outputFiles() {
    const {permalink} = this.root
    const files = this.getAtomsFrom(1)
    if (!files.length) files.push(permalink.replace(".html", ".csv"))
    return files
  }
  async buildOne() {
    const {root, sortBy, outputFiles} = this
    const { fileSystem, folderPath, filename, path, concepts } = root
    const conceptCount = concepts.length
    for (let link of outputFiles) {
      await fileSystem.writeProduct(path.join(folderPath, link), root.compileConcepts(link, sortBy))
      root.log(`ðŸ’¾ Built ${conceptCount} concepts in ${filename} to ${link}`)
    }
  }