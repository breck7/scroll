scrollConceptsParser
 description Load concepts as table.
 extends abstractDatatableProviderParser
 cue concepts
 atoms cueAtom
 example
  concepts
   printTable
 javascript
  get coreTable() {
    return this.root.concepts
  }
  get columnNames() {
    return this.root.measures.map(col => col.Name)
  }

loadConceptsParser
 // todo: clean this up. just add smarter imports with globs?
 // this currently removes any "import" statements.
 description Import all concepts in a folder.
 extends abstractBuildCommandParser
 cueFromId
 atoms preBuildCommandAtom filePathAtom
 javascript
  build() {
   const { Disk } = require("scrollsdk/products/Disk.node.js")
   const path = require("path")
   const folder = path.join(this.root.folderPath, this.getAtom(1))
   const importParticleRegex = /^(import .+|[a-zA-Z\_\-\.0-9\/]+\.(scroll|parsers)$)/gm
   const ONE_BIG_FILE = Disk.getFiles(folder).filter(file => file.endsWith(".scroll")).map(Disk.read).join("\n\n").replace(importParticleRegex, "")
    this.parent.concat(ONE_BIG_FILE)
   //console.log(ONE_BIG_FILE)
  }
  buildHtml() {
    return ""
  }

buildConceptsParser
 popularity 0.000024
 cueFromId
 description Write concepts to csv+ files.
 extends abstractBuildCommandParser
 sortByParser
  cueFromId
  atoms cueAtom anyAtom
 javascript
  buildOne() {
    const {root} = this
    const { fileSystem, folderPath, filename, path, permalink } = root
    const files = this.getAtomsFrom(1)
    if (!files.length) files.push(permalink.replace(".html", ".csv"))
    const sortBy = this.get("sortBy")
    files.forEach(link => {
      fileSystem.writeProduct(path.join(folderPath, link), root.compileConcepts(link, sortBy))
      root.log(`ðŸ’¾ Built concepts in ${filename} to ${link}`)
    })
  }