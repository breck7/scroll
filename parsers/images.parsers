captionAftertextParser
 popularity 0.003207
 description An image caption.
 cue caption
 extends paragraphParser
 boolean isPopular true

abstractCaptionedParser
 extends abstractScrollParser
 atoms cueAtom urlAtom
 inScope captionAftertextParser slashCommentParser
 cueFromId
 javascript
  buildHtml(buildSettings) {
   const caption = this.getParticle("caption")
   const captionFig = caption ? `<figcaption>${caption.buildHtml()}</figcaption>` : ""
   const {figureWidth} = this
   const widthStyle = figureWidth ? `width:${figureWidth}px; margin: auto;` : ""
   const float = this.has("float") ? `margin: 20px; float: ${this.get("float")};` : ""
   return `<figure class="scrollCaptionedFigure" style="${widthStyle + float}">${this.getFigureContent(buildSettings)}${captionFig}</figure>`
  }
  get figureWidth() {
    return this.get("width")
  }

openGraphParser
 // todo: fix Parsers scope issue so we can move this parser def under scrollImageParser
 description Add this line to make this the open graph image.
 cueFromId
 atoms cueAtom

scrollImageParser
 cue image
 popularity 0.005908
 description An img tag.
 boolean isPopular true
 extends abstractCaptionedParser
 int atomIndex 1
 example
  image screenshot.png
   caption A caption.
 inScope classMarkupParser aftertextIdParser linkParser linkTargetParser openGraphParser
 javascript
  get dimensions() {
    const width = this.get("width")
    const height = this.get("height")
    if (width || height)
      return {width, height}
    if (!this.isNodeJs())
      return {}
    const src = this.filename
    // If its a local image, get the dimensions and put them in the HTML
    // to avoid flicker
   if (src.startsWith("http:") || src.startsWith("https:")) return {}
    if (this._dimensions)
      return this._dimensions
    try {
     const sizeOf = require("image-size")
     const path = require("path")
     const fullImagePath = path.join(this.root.folderPath, src)
     this._dimensions = sizeOf(fullImagePath)
     return this._dimensions
    } catch (err) {
     console.error(err)
    }
    return {}
  }
  get figureWidth() {
    return this.dimensions.width
  }
  get filename() {
    return this.getAtom(this.atomIndex)
  }
  get dependencies() { return [this.filename]}
  getFigureContent(buildSettings) {
   const linkRelativeToCompileTarget = (buildSettings ? (buildSettings.relativePath ?? "") : "") + this.filename
   const {width, height} = this.dimensions
   let dimensionAttributes = width || height  ? `width="${width}" height="${height}" ` : ""
   // Todo: can we reuse more code from aftertext?
   const className = this.has("class") ? ` class="${this.get("class")}" ` : ""
   const id = this.has("id") ? ` id="${this.get("id")}" ` : ""
   const clickLink = this.find(particle => particle.definition.isOrExtendsAParserInScope(["linkParser"])) || linkRelativeToCompileTarget 
   const target = this.has("target") ? this.get("target") : (this.has("link") ? "" : "_blank")
   return `<a href="${clickLink}" target="${target}" ${className} ${id}><img src="${linkRelativeToCompileTarget}" ${dimensionAttributes}loading="lazy"></a>`
  }
  buildTxt() {
    const subparticles = this.filter(particle => particle.buildTxt).map(particle => particle.buildTxt()).filter(i => i).join("\n")
    return  "[Image Omitted]" + (subparticles ? "\n " + subparticles.replace(/\n/g, "\n ") : "")
  }

quickImageParser
 popularity 0.005788
 extends scrollImageParser
 atoms urlAtom
 pattern ^[^\s]+\.(jpg|jpeg|png|gif|webp|svg|bmp)
 int atomIndex 0