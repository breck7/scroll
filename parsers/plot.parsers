abstractPlotParser
 description Use Plot from observablehq.
 extends abstractScrollWithRequirementsParser
 string iris
  sepal_length,sepal_width,petal_length,petal_width,species
  6.1,3,4.9,1.8,virginica
  5.6,2.7,4.2,1.3,versicolor
  5.6,2.8,4.9,2,virginica
  6.2,2.8,4.8,1.8,virginica
  7.7,3.8,6.7,2.2,virginica
  5.3,3.7,1.5,0.2,setosa
  6.2,3.4,5.4,2.3,virginica
  4.9,2.5,4.5,1.7,virginica
  5.1,3.5,1.4,0.2,setosa
  5,3.4,1.5,0.2,setosa
 string copyFromExternal d3.js plot.js
 string requireOnce
  <script src="d3.js"></script>
  <script src="plot.js"></script>
 example
  plot
 javascript
  compileInstance() {
   const id = "plot" + this._getUid()
   return `<div id="${id}"></div><script>document.querySelector("#${id}").append(Plot.plot(${this.plotOptions}))</script>`
  }
  get marks() {
    // just for testing purposes
    return `Plot.rectY({length: 10000}, Plot.binX({y: "count"}, {x: d3.randomNormal()}))`
  }
  get plotOptions() {
    return `{
      title: "${this.get("title") || ""}",
      subtitle: "${this.get("subtitle") || ""}",
      caption: "${this.get("caption") || ""}",
      symbol: {legend: ${this.has("symbol")}},
      color: {legend: ${this.has("fill")}},
      grid: ${this.get("grid") !== "false"},
      marks: [${this.marks}],
    }`
  }

scatterplotParser
 extends abstractPlotParser
 // todo: make copyFromExternal work with inheritance
 string copyFromExternal d3.js plot.js
 javascript
  get marks() {
    let data = this.iris
    const dataset = this.getNode("data")
    if (dataset?.length)
      data = dataset.childrenToString()
    else if (dataset?.content) {
    const { Disk } = require("scrollsdk/products/Disk.node.js")
    const path = require("path")
    const {file} = this.parent
    data = Disk.read(path.join(file.folderPath, dataset.content))
    }
    const header = data.split("\n")[0].split(",")
    const x = this.get("x") || header[0]
    const y = this.get("y") || header[1]
    const text = this.get("label")
    return `Plot.dot(d3.csvParse(\`${data}\`, d3.autoType), ${JSON.stringify({
      x,
      y,
      r: this.get("radius"),
      fill: this.get("fill"),
      tip: true,
      symbol: this.get("symbol")}, undefined, 2)})` + "," + `Plot.text(d3.csvParse(\`${data}\`, d3.autoType), {x: "${x}", y: "${y}", text: "${text}", dy: -6, lineAnchor: "bottom"})`
  }