scrollRadiusParser
 cue radius
 extends abstractColumnNameParser

scrollSymbolParser
 cue symbol
 extends abstractColumnNameParser

columnNameOrColorAtom
 extends columnNameAtom

abstractColumnNameOrColorParser
 extends abstractColumnNameParser
 atoms cueAtom columnNameOrColorAtom
 javascript
  //todo: cleanup
  colorOptions = "aliceblue antiquewhite aqua aquamarine azure beige bisque black blanchedalmond blue blueviolet brown burlywood cadetblue chartreuse chocolate coral cornflowerblue cornsilk crimson cyan darkblue darkcyan darkgoldenrod darkgray darkgreen darkkhaki darkmagenta darkolivegreen darkorange darkorchid darkred darksalmon darkseagreen darkslateblue darkslategray darkturquoise darkviolet deeppink deepskyblue dimgray dodgerblue firebrick floralwhite forestgreen fuchsia gainsboro ghostwhite gold goldenrod gray green greenyellow honeydew hotpink indianred indigo ivory khaki lavender lavenderblush lawngreen lemonchiffon lightblue lightcoral lightcyan lightgoldenrodyellow lightgray lightgreen lightpink lightsalmon lightseagreen lightskyblue lightslategray lightsteelblue lightyellow lime limegreen linen magenta maroon mediumaquamarine mediumblue mediumorchid mediumpurple mediumseagreen mediumslateblue mediumspringgreen mediumturquoise mediumvioletred midnightblue mintcream mistyrose moccasin navajowhite navy oldlace olive olivedrab orange orangered orchid palegoldenrod palegreen paleturquoise palevioletred papayawhip peachpuff peru pink plum powderblue purple rebeccapurple red rosybrown royalblue saddlebrown salmon sandybrown seagreen seashell sienna silver skyblue slateblue slategray snow springgreen steelblue tan teal thistle tomato turquoise violet wheat white whitesmoke yellow yellowgreen".split(" ")
  getRunTimeEnumOptions(atom) {
   if (atom.atomTypeId === "columnNameOrColorAtom")
      return this.parent.columnNames.join(this.colorOptions)
   return super.getRunTimeEnumOptions(atom)
  }

scrollFillParser
 cue fill
 extends abstractColumnNameOrColorParser

scrollStrokeParser
 cue stroke
 extends abstractColumnNameOrColorParser

scrollLabelParser
 cue label
 extends abstractColumnNameParser

scrollSortParser
 cue sort
 extends abstractColumnNameParser

abstractPlotLabelParser
 cueFromId
 atoms cueAtom
 catchAllAtomType stringAtom

abstractPlotParser
 // Observablehq
 extends abstractTableVisualizationParser
 string copyFromExternal .d3.js .plot.js
 string requireOnce
  <script src=".d3.js"></script>
  <script src=".plot.js"></script>
 example
  plot
 inScope abstractColumnNameParser
 widthParser
  cueFromId
  atoms cueAtom integerAtom
 heightParser
  cueFromId
  atoms cueAtom integerAtom
 titleParser
  extends abstractPlotLabelParser
 subtitleParser
  extends abstractPlotLabelParser
 captionParser
  extends abstractPlotLabelParser
 javascript
  buildInstance() {
   const id = "plot" + this._getUid()
   return `<div id="${id}"></div><script>
   {
    let loadChart = async () => {
    const data = ${this.dataCode}
    const get = (col, index ) => col !== "undefined" ? col : (index === undefined ? undefined : Object.keys(data[0])[index])
    document.querySelector("#${id}").append(Plot.plot(${this.plotOptions}))
    }
    loadChart()
    }
    </script>`
  }
  get sortExpression() {
    const sort = this.get("sort")
    if (!sort) return ""
    let sort_expr = ""
        if (sort.startsWith("-")) {
          // Sort by a value descending
          const sortCol = sort.slice(1)
          sort_expr = `, sort: {x: "y", reverse: true}`
        } else if (sort.includes(" ")) {
          // Fixed order specified
          const order = sort.split(" ")
          sort_expr = `, sort: {x: (a,b) => {
            const order = ${JSON.stringify(order)};
            return order.indexOf(a) - order.indexOf(b)
          }}`
        } else if (sort === "asc") {
          sort_expr = `, sort: {x: "x"}`
        } else if (sort === "desc") {
          sort_expr = `, sort: {x: "x", reverse: true}`
        }
    return sort_expr
  }
  get marks() {
    // just for testing purposes
    return `Plot.rectY({length: 10000}, Plot.binX({y: "count"}, {x: d3.randomNormal()}))`
  }
  get dataCode() {
    const {coreTable} = this.parent
    return `d3.csvParse(\`${new Particle(coreTable).asCsv}\`, d3.autoType)`
  }
  get plotOptions() {
    return `{
      title: "${this.get("title") || ""}",
      subtitle: "${this.get("subtitle") || ""}",
      caption: "${this.get("caption") || ""}",
      symbol: {legend: ${this.has("symbol")}},
      color: {legend: ${this.has("fill") || this.has("stroke")}},
      grid: ${this.get("grid") !== "false"},
      marks: [${this.marks}],
      width: ${this.get("width") || 640},
      height: ${this.get("height") || 400},
    }`
  }

plotScatterplotParser
 cue scatterplot
 extends abstractPlotParser
 description Scatterplot Widget.
 example
  iris
   scatterplot
 javascript
  get marks() {
    const x = this.get("x")
    const y = this.get("y")
    const text = this.get("label")
    return `Plot.dot(data, {
      x: get("${x}", 0),
      y: get("${y}", 1),
      r: get("${this.get("radius")}"),
      fill: get("${this.get("fill")}"),
      tip: true${this.sortExpression},
      symbol: get("${this.get("symbol")}")} ), Plot.text(data, {x: get("${x}",0), y: get("${y}", 1), text: "${text}", dy: -6, lineAnchor: "bottom"})`
  }

plotBarchartParser
 cue barchart
 extends abstractPlotParser
 description Bar chart widget.
 example
  iris
   barchart
 javascript
  get marks() {
    const x = this.get("x")
    const y = this.get("y")
    const text = this.get("label")
    const fill = this.get("fill")
      return `Plot.barY(data, {
        x: get("${x}", 0),
        y: get("${y}", 1),
        fill: get("${fill}"),
        tip: true${this.sortExpression}
      }), Plot.ruleY([0])`
  }

plotLineChartParser
 cue linechart
 extends abstractPlotParser
 description Line chart widget.
 example
  iris
   linechart
    x SepalLength
    y SepalWidth
 javascript
  get marks() {
    const x = this.get("x")
    const y = this.get("y")
    const stroke = this.get("stroke") || "steelblue"
    const strokeWidth = this.get("strokeWidth") || 2
    const strokeLinecap = this.get("strokeLinecap") || "round"
    const fill = this.get("fill")
    return `Plot.line(data, {
      x: get("${x}", 0),
      y: get("${y}", 1),
      stroke: "${stroke}",
      fill: get("${fill}"),
      strokeWidth: ${strokeWidth},
      strokeLinecap: "${strokeLinecap}"${this.sortExpression}
    })`
  }
