abstractMacroParser
 extends abstractScrollParser
 catchAllAtomType stringAtom
 atoms parseTimeCommandAtom
 cueFromId
 javascript
  get search() {
    return this.atoms[1]
  }
  get replacement() {
    return this.value
  }
  get value() {
    return this.length ? this.subparticlesToString() : this.getAtomsFrom(2).join(" ")
  }
  wake() {
    const {search, replacement} = this
    this.addFn(search, replacement)
  }
  addFn(search, replacement) {
    // Note that we don't return replacement directly, because it may contain $&
    // which is a special string in JS replace. "a".replace("a", `$&`).
    // PLDB actually contains that sequence.
    this.root.addTransformer(block => block.replaceAll(search, () => replacement))
  }

replaceParser
 description Replace this with that.
 extends abstractMacroParser
 atoms parseTimeCommandAtom codeAtom
 baseParser blobParser
 example
  replace YEAR 2022

replaceJsParser
 description Replace this with evaled JS.
 extends replaceParser
 catchAllAtomType javascriptAnyAtom
 example
  replaceJs SUM 1+1
  * 1+1 = SUM
 javascript
  get replacement() {
    const particle = this
    const codeAtStart = this.root.codeAtStart || ""
    try {
      return eval(super.replacement)
    } catch (err) {
      console.error(err)
    }
    return this.search
  }
