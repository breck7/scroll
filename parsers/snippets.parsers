endSnippetParser
 popularity 0.004293
 description Cut for snippet here.
 extends abstractScrollParser
 cueFromId
 javascript
  buildHtml() {
   return ""
  }

printSnippetsParser
 popularity 0.000338
 // todo: why are we extending AT here and not loops? Is it for class/id etc?
 extends abstractAftertextParser
 cueFromId
 atoms cueAtom
 catchAllAtomType tagWithOptionalFolderAtom
 description Prints snippets matching tag(s).
 example
  printSnippets index
 javascript
  makeSnippet(scrollProgram, buildSettings) {
    const {endSnippetIndex} = scrollProgram
    if (endSnippetIndex === -1) return scrollProgram.buildHtmlSnippet(buildSettings) + scrollProgram.editHtml
    const linkRelativeToCompileTarget = buildSettings.relativePath + scrollProgram.permalink
    const joinChar = "\n"
    const html = scrollProgram
        .map((subparticle, index) => (index >= endSnippetIndex ? "" : subparticle.buildHtmlSnippet ? subparticle.buildHtmlSnippet(buildSettings) : subparticle.buildHtml(buildSettings)))
        .filter(i => i)
        .join(joinChar)
        .trim() +
      `<a class="scrollContinueReadingLink" href="${linkRelativeToCompileTarget}">Continue reading...</a>`
    return html
  }
  get files() {
   const thisFile = this.parent.file
   const files = this.root.getFilesByTags(this.content, this.has("limit") ? parseInt(this.get("limit")) : undefined).filter(file => file.file !== thisFile)
   // allow sortBy lastCommit Time
   if (this.get("sortBy") === "commitTime") {
     return this.root.sortBy(files, file => file.file.lastCommitTime).reverse()
   }
   return files
  }
  buildHtml() {
   const alreadyRequired = this.root.alreadyRequired
   const snippets = this.files.map(file => {
    const buildSettings = {relativePath: file.relativePath, alreadyRequired }
    return `<div class="scrollSnippetContainer">${this.makeSnippet(file.file.scrollProgram, buildSettings)}</div>`
    }).join("\n\n")
   return `<div class="scrollColumns" style="column-width:35ch;">${snippets}</div>`
  }
  buildTxt() {
   return this.files.map(file =>  {
    const {scrollProgram} = file.file
    const {title, date, absoluteLink} = scrollProgram
    const ruler = "=".repeat(title.length)
    // Note: I tried to print the description here but the description generating code needs work.
    return `${title}\n${ruler}\n${date}\n${absoluteLink}`
   }).join("\n\n")
  }

printFullSnippetsParser
 popularity 0.000048
 extends printSnippetsParser
 cueFromId
 description Print full pages in group(s).
 javascript
  makeSnippet(scrollProgram, buildSettings) {
   return scrollProgram.buildHtmlSnippet(buildSettings) + scrollProgram.editHtml
  }

printShortSnippetsParser
 popularity 0.000048
 extends printSnippetsParser
 cueFromId
 description Titles and descriptions in group(s).
 javascript
  makeSnippet(scrollProgram, buildSettings) {
   const { title, permalink, description, timestamp } = scrollProgram
   return `<div><a href="${permalink}">${title}</a><div>${description}...</div><div class="subdued" style="text-align:right;">${this.root.dayjs(timestamp * 1000).format(`MMMM D, YYYY`)}</div></div>`
  }

printRelatedParser
 popularity 0.001182
 description Print links to related posts.
 extends printSnippetsParser
 cueFromId
 javascript
  buildHtml() {
   const alreadyRequired = this.root.alreadyRequired
   const list = this.files.map(fileWrapper => {
    const {relativePath, file} = fileWrapper
    const {title, permalink, year} = file.scrollProgram
    return `- ${title}${year ? " (" + year + ")" : ""}\n link ${relativePath + permalink}`
    }).join("\n")
    const items = this.parent.concat(list)
    const html = items.map(item => item.buildHtml()).join("\n")
    items.forEach(item => item.destroy())
   return html
  }