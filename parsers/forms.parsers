classicFormParser
 cue classicForm
 popularity 0.006391
 description Generate input form for ScrollSet.
 extends abstractAftertextParser
 atoms cueAtom
 catchAllAtomType stringAtom
 string script
  <script>
  sendFormViaEmail = form => {
    const mailto = new URL("mailto:")
    const params = []
    const { value, title } = form.querySelector('button[type="submit"]')
    params.push(`subject=${encodeURIComponent(value)}`)
    params.push(`to=${encodeURIComponent(title)}`)
    const oneTextarea = form.querySelector('textarea[title="oneTextarea"]')
    const body = oneTextarea ? codeMirrorInstance.getValue() : Array.from(new FormData(form)).map(([name, value]) => `${name} ${value}`).join("\\n")
    params.push(`body=${encodeURIComponent(body)}`)
    mailto.search = params.join("&")
    window.open(mailto.href, '_blank')
  }
  </script>
 string style
  <style> .scrollFormParser {
      font-family: "Gill Sans", "Bitstream Vera Sans", sans-serif;
    }
  .scrollFormParser input , .scrollFormParser textarea{
  padding: 10px;
  margin-bottom: 10px;
  width: 100%;
  box-sizing: border-box;
  } .scrollFormParser label {
    display: block;
    margin-bottom: 5px;
  }
  </style>
 string footer 
 javascript
  get inputs() {
    return this.root.measures.filter(measure => !measure.IsComputed).map((measure, index) => {
      const {Name, Question, IsRequired, Type} = measure
      const type = Type || "text"
      const placeholder = Question
      const ucFirst = Name.substr(0, 1).toUpperCase() + Name.substr(1)
      // ${index ? "" : "autofocus"}
      let tag = ""
      if (Type === "textarea")
        tag = `<textarea placeholder="${placeholder}" id="${Name}" name="${Name}" ${IsRequired ? "required" : ""}></textarea>`
      else
        tag = `<input placeholder="${placeholder}" type="${type}" id="${Name}" name="${Name}" ${IsRequired ? "required" : ""}>`
      return `<div><label for="${Name}" title="${IsRequired ? "Required" : ""}">${ucFirst}${IsRequired ? "*" : ""}:</label>${tag}</div>`
    }).join("\n")
  }
  buildHtml() {
    const {isEmail, formDestination, callToAction, subject} = this
    return `${this.script}${this.style}<form ${isEmail ? "onsubmit='sendFormViaEmail(this); return false;'" : ` method='post' action='${formDestination}'`} class="scrollFormParser">${this.inputs}<button value="${subject}" title="${formDestination}" class="scrollButton" type="submit">${callToAction}</button>${this.footer}</form>`
  }
  get callToAction() {
    return (this.isEmail ? "Submit via email" : (this.subject || "Post"))
  }
  get isEmail() {
    return this.formDestination.includes("@")
  }
  get formDestination() {
    return this.getAtom(1) || ""
  }
  get subject() {
    return this.getAtomsFrom(2)?.join(" ") || ""
  }

scrollFormParser
 extends classicFormParser
 cue scrollForm
 placeholderParser
  atoms cueAtom
  baseParser blobParser
  cueFromId
  single
 valueParser
  atoms cueAtom
  baseParser blobParser
  cueFromId
  single
 nameParser
  description Name for the post submission.
  atoms cueAtom stringAtom
  cueFromId
  single
 description Generate a Scroll Form.
 string copyFromExternal .codeMirror.css .scrollLibs.js .constants.js
 string requireOnce
  <link rel="stylesheet" href=".codeMirror.css">
  <script src=".scrollLibs.js"></script>
  <script src=".constants.js"></script>
 string footer 
 javascript
  get placeholder() {
    return this.getParticle("placeholder")?.subparticlesToString() || ""
  }
  get value() {
    return this.getParticle("value")?.subparticlesToString() || ""
  }
  get name() {
    return this.get("name") || "particles"
  }
  get parsersBundle() {
    const parserRegex = /^[a-zA-Z0-9_]+Parser$/gm
    const clone = this.root.clone()
    const parsers = clone.filter(line => parserRegex.test(line.getLine()))
    return "\n" + parsers.map(particle => {
      particle.prependLine("boolean suggestInAutocomplete true")
      return particle.toString()
    }).join("\n")
  }
  get inputs() {
    const Name = this.name
    return `<textarea title="oneTextarea" rows="${Math.min(this.root.measures.length * 2, 30)}" placeholder="${this.placeholder}" id="${Name}" name="${Name}"></textarea>
    <script id="${Name}Parsers" type="text/plain">${this.parsersBundle}</script>
    <script>{
    const parserRegex = /^[a-zA-Z0-9_]+Parser$/gm
    let {width, height} = document.getElementById('${Name}').getBoundingClientRect();
    const sp = new Particle(AppConstants.parsers)
    sp.filter(particle => particle.getLine().match(parserRegex)).forEach(part => {
    part.appendLine("boolean suggestInAutocomplete false")
    })
    const customScrollParser = new HandParsersProgram(sp.toString() + document.getElementById("${Name}Parsers").textContent).compileAndReturnRootParser()
    codeMirrorInstance = new ParsersCodeMirrorMode("custom", () => customScrollParser, undefined, CodeMirror).register().fromTextAreaWithAutocomplete(document.getElementById("${Name}"), {
      lineWrapping: false,
      lineNumbers: false
    })
    codeMirrorInstance.setSize(width, height);
    codeMirrorInstance.setValue(\`${this.value}\`); }</script>`
  }
  buildHtml(buildSettings) {
    return this.getHtmlRequirements(buildSettings) + super.buildHtml()
  }
