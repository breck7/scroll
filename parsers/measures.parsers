measureNameAtom
 extends cueAtom
 // A regex for column names for max compatibility with a broad range of data science tools:
 regex [a-zA-Z][a-zA-Z0-9]*

buildMeasuresParser
 popularity 0.000024
 cueFromId
 description Compile measures to delimited files.
 extends abstractBuildCommandParser
 sortByParser
  cueFromId
  atoms cueAtom columnNameAtom
 javascript
  async buildOne() {
    const {root} = this
    const { fileSystem, folderPath, filename, path, permalink, measures } = root
    const files = this.getAtomsFrom(1)
    if (!files.length) files.push(permalink.replace(".html", ".csv"))
    const sortBy = this.get("sortBy")
    for (let link of files) {
      await fileSystem.writeProduct(path.join(folderPath, link), root.compileMeasures(link, sortBy))
      root.log(`ðŸ’¾ Built ${measures.length} measures in ${filename} to ${link}`)
    }
  }

abstractMeasureParser
 atoms measureNameAtom
 description Base parser all measures extend.
 cueFromId
 boolean isMeasure true
 float sortIndex 1.9
 boolean isComputed false
 string typeForWebForms text
 extends abstractScrollParser
 javascript
  buildHtmlSnippet() {
   return ""
  }
  buildHtml() {
   return ""
  }
  get measureValue() {
    return this.content ?? ""
  }
  get measureName() {
    return this.getCuePath().replace(/ /g, "_")
  }

// String Measures
abstractAtomMeasureParser
 description Contains a single word.
 atoms measureNameAtom atomAtom
 example
  nicknameParser
   extends abstractAtomMeasureParser
  id Breck
  nickname breck
 extends abstractMeasureParser

abstractStringMeasureParser
 description General text data with no specific format.
 catchAllAtomType stringAtom
 example
  titleParser
   extends abstractStringMeasureParser
  id Breck
  title I build languages for scientists of all ages
 extends abstractMeasureParser

abstractTextareaMeasureParser
 string typeForWebForms textarea
 example
  bioParser
   extends abstractTextareaMeasureParser
  id Breck
  bio
   I build languages for scientists of all ages
 description Long-form text content with preserved line breaks.
 extends abstractMeasureParser
 baseParser blobParser
 javascript
  get measureValue() {
    return this.subparticlesToString().replace(/\n/g, "\\n")
  }

abstractEmailMeasureParser
 description Email address.
 example
  emailParser
   extends abstractEmailMeasureParser
  id Breck
  email breck7@gmail.com
 string typeForWebForms email
 atoms measureNameAtom emailAddressAtom
 extends abstractAtomMeasureParser

// URL Parsers
abstractUrlMeasureParser
 description A single url.
 example
  homepageParser
   extends abstractUrlMeasureParser
  id Breck
  homepage https://breckyunits.com
 string typeForWebForms url
 atoms measureNameAtom urlAtom
 extends abstractAtomMeasureParser


// Required ID measure which denotes a concept
abstractIdParser
 cue id
 description What is the ID of this concept?
 extends abstractStringMeasureParser
 example
  idParser
   extends abstractIdParser
  id breck
 float sortIndex 1
 boolean isMeasureRequired true
 boolean isConceptDelimiter true
 javascript
  getErrors() {
    const errors = super.getErrors()
    let requiredMeasureNames = this.root.measures.filter(measure => measure.isMeasureRequired).map(measure => measure.Name).filter(name => name !== "id")
    if (!requiredMeasureNames.length) return errors
    let next = this.next
    while (requiredMeasureNames.length && next.cue !== "id" && next.index !== 0) {
      requiredMeasureNames = requiredMeasureNames.filter(i => i !== next.cue)
      next = next.next
    }
    requiredMeasureNames.forEach(name =>
      errors.push(this.makeError(`Concept "${this.content}" is missing required measure "${name}".`))
    )
    return errors
  }

abstractIdMeasureParser
 description Alias for abstractIdParser.
 extends abstractIdParser

// Numeric Measures
abstractNumericMeasureParser
 string typeForWebForms number
 description Base number type.
 extends abstractMeasureParser
 javascript
  get measureValue() {
    const {content} = this
    return content === undefined ? "" : parseFloat(content)
  }
abstractNumberMeasureParser
 description Alias to abstractNumericMeasureParser.
 extends abstractNumericMeasureParser

abstractIntegerMeasureParser
 description An integer.
 example
  ageParser
   extends abstractIntegerMeasureParser
  id Breck
  age 40
 atoms measureNameAtom integerAtom
 extends abstractNumericMeasureParser
 javascript
  get measureValue() {
    const {content} = this
    return content === undefined ? "" : parseInt(content)
  }
abstractIntMeasureParser
 description Alias to abstractIntegerMeasureParser.
 extends abstractIntegerMeasureParser

abstractFloatMeasureParser
 description A float.
 example
  temperatureParser
   extends abstractFloatMeasureParser
  id Breck
  temperature 31.8
 atoms measureNameAtom floatAtom
 extends abstractNumericMeasureParser

abstractPercentageMeasureParser
 description A percentage.
 atoms measureNameAtom percentAtom
 extends abstractNumericMeasureParser
 example
  ownershipParser
   extends abstractPercentageMeasureParser
  id Breck
  ownership 31.8
 javascript
  get measureValue() {
    const {content} = this
    return content === undefined ? "" : parseFloat(content)
  }


// Enum Measures
abstractEnumMeasureParser
 description A single enum.
 atoms measureNameAtom enumAtom
 extends abstractMeasureParser
 example
  favoriteHtmlTagParser
   extends abstractEnumMeasureParser
   atoms measureNameAtom htmlTagAtom
  id Breck
  favoriteHtmlTag 2020

// Boolean Measures
abstractBooleanMeasureParser
 description A single boolean.
 atoms measureNameAtom booleanAtom
 extends abstractMeasureParser
 example
  hasBillOfRightsParser
   extends abstractBooleanMeasureParser
  id USA
  hasBillOfRights true
 javascript
  get measureValue() {
    const {content} = this
    return content === undefined ? "" : content == "true"
  }

// Date and time measures
abstractDateMeasureParser
 description Year/month/day in ISO 8601, US, European formats.
 atoms measureNameAtom dateAtom
 extends abstractMeasureParser
 string typeForWebForms date
 javascript
  get measureValue() {
    const {content} = this
    if (!content) return ""
    const {dayjs} = this.root
    try {
      // First try parsing with dayjs
      const parsed = dayjs(content)
      if (parsed.isValid())
        return parsed.format("YYYY-MM-DD")
      // Try parsing other common formats
      const formats = [
        "MM/DD/YYYY",
        "DD/MM/YYYY", 
        "YYYY/MM/DD",
        "MM-DD-YYYY",
        "DD-MM-YYYY",
        "YYYY-MM-DD",
        "DD.MM.YYYY",
        "YYYY.MM.DD"
      ]
      for (const format of formats) {
        const attempt = dayjs(content, format)
        if (attempt.isValid())
          return attempt.format("YYYY-MM-DD")
      }
    } catch (err) {
      console.error(err)
      return ""
    }
    return ""
  }
  get valueAsTimestamp() {
    const {measureValue} = this
    return measureValue ? this.root.dayjs(measureValue).unix() : ""
  }
