paragraphParser
 // todo Perhaps rewrite this from scratch and move out of aftertext.
 extends abstractAftertextParser
 catchAllAtomType stringAtom
 description A paragraph.
 boolean suggestInAutocomplete false
 cueFromId
 javascript
  buildHtml(buildSettings) {
   if (this.isHidden) return ""
   // Hacky, I know.
   const newLine = this.has("inlineMarkupsOn") ? undefined : this.appendLine("inlineMarkupsOn")
   const compiled = super.buildHtml(buildSettings)
   if (newLine)
    newLine.destroy()
   return compiled
  }
  buildTxt() {
    const subparticles = this.filter(particle => particle.buildTxt).map(particle => particle.buildTxt()).filter(i => i).join("\n")
    const dateline = this.getParticle("dateline")
    return (dateline ? dateline.day + "\n\n" : "") + (this.originalText || "") + (subparticles ? "\n " + subparticles.replace(/\n/g, "\n ") : "")
  }

quickParagraphParser
 popularity 0.001881
 cue *
 extends paragraphParser
 description A paragraph.
 boolean isArticleContent true
 example
  * I had a _new_ idea.

abstractIndentableParagraphParser
 extends paragraphParser
 inScope abstractAftertextDirectiveParser abstractAftertextAttributeParser abstractIndentableParagraphParser
 javascript
  compileSubparticles() {
    return this.map(particle => particle.buildHtml())
     .join("\n")
     .trim()
  }
  buildHtml() {
   return super.buildHtml() + this.compileSubparticles()
  }
  buildTxt() {
    return this.getAtom(0) + " " + super.buildTxt()
  }