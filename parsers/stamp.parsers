// A joint effort from:
// - Breck Yunits https://github.com/breck7
// - Guillaume Papin https://github.com/Sarcasm
// Origin: https://github.com/breck7/scrollsdk/issues/120

stampFileParser
 catchAllAtomType stringAtom
 description Create a file.
 javascript
  build(parentDir) {
   const fs = require("fs")
   const path = require("path")
   const fullPath = path.join(parentDir, this.getLine())
   this.root.file.log(`Creating file ${fullPath}`)
   fs.mkdirSync(path.dirname(fullPath), {recursive: true})
   const content = this.subparticlesToString()
   fs.writeFileSync(fullPath, content, "utf8")
   const isExecutable = content.startsWith("#!")
   if (isExecutable) fs.chmodSync(fullPath, "755")
  }

stampFolderParser
 catchAllAtomType stringAtom
 description Create a folder.
 inScope stampFolderParser
 catchAllParser stampFileParser
 pattern \/$
 javascript
  build(parentDir) {
   const fs = require("fs")
   const path = require("path")
   const newPath = path.join(parentDir, this.getLine())
   this.root.file.log(`Creating folder ${newPath}`)
   fs.mkdirSync(newPath, {recursive: true})
   this.forEach(particle => particle.build(newPath))
  }

toStampParser
 description Print a directory to stamp.
 extends abstractScrollParser
 catchAllAtomType filePathAtom
 cueFromId
 javascript
  compileTxt() {
    return this.makeStamp(this.root.makeFullPath(this.content))
  }
  compileHtml() {
    return `<pre>${this.compileTxt()}</pre>`
  }
  makeStamp(dir) {
  const fs = require('fs');
  const path = require('path');
  const { execSync } = require('child_process');
  let stamp = 'stamp\n';
   // Get list of git-tracked files
  const gitTrackedFiles = new Set(execSync('git ls-files', { cwd: dir, encoding: 'utf-8' })
    .split('\n')
    .filter(Boolean))
  function processDirectory(currentPath, depth) {
    const items = fs.readdirSync(currentPath);
    items.forEach(item => {
      const itemPath = path.join(currentPath, item);
      const relativePath = path.relative(dir, itemPath);
      if (!gitTrackedFiles.has(item)) return
      const stats = fs.statSync(itemPath);
      const indentation = ' '.repeat(depth);
      if (stats.isDirectory()) {
        stamp += `${indentation}${relativePath}/\n`;
        processDirectory(itemPath, depth + 1);
      } else if (stats.isFile()) {
        stamp += `${indentation}${relativePath}\n`;
        const content = fs.readFileSync(itemPath, 'utf8');
        stamp += `${indentation} ${content.replace(/\n/g, `\n${indentation} `)}\n`;
      }
    });
  }
  processDirectory(dir, 1);
  return stamp.trim();
  }

stampParser
 description Expand project template to disk.
 extends abstractScrollParser
 inScope stampFolderParser
 catchAllParser stampFileParser
 example
  stamp
   .gitignore
    *.html
   readme.scroll
    # Hello world
    <script src="scripts/nested/hello.js"></script>
   scripts/
    nested/
     hello.js
      console.log("Hello world")
 cueFromId
 atoms preBuildCommandAtom
 javascript
  build() {
    const dir = this.root.file.folderPath
    this.forEach(particle => particle.build(dir))
  }
