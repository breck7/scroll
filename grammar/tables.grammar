abstractTableParser
 cruxFromId
 catchAllParser rowParser
 extends abstractScrollParser
 javascript
  get tableHeader() {
   return this.columns.filter(col => !col.isLink).map(column => `<th>${column.name}</th>\n`)
  }
  get columnNames() {
   const header = this.nodeAt(0)
   return header ? header.getLine().split(this.delimiter) : []
  }
  get columns() {
   const cols = this.columnNames
   return cols.map((name, index) => {
    const isLink = name.endsWith("Link")
    const linkIndex = cols.indexOf(name + "Link")
    return {
     name,
     isLink,
     linkIndex
    }
   })
  }
  get tableBody() {
   const { delimiter } = this
   return this.topDownArray
    .slice(1)
    .map(node => `<tr>${node.toRow(this.columns, delimiter)}</tr>`)
    .join("\n")
  }
  compile() {
   return `<table class="scrollTable"><thead><tr>${this.tableHeader.join("\n")}</tr></thead>\n<tbody>${this.tableBody}</tbody></table>`
  }
  compileTextVersion() {
    return `[Table Omitted]`
  }

rowParser
 catchAllCellType stringCell
 javascript
  toRow(columns, delimiter) {
   const words = this.getLine().split(delimiter)
   let str = ""
   let column = 0
   const columnCount = columns.length
   while (column < columnCount) {
    const col = columns[column]
    column++
    const content = (columnCount === column ? words.slice(columnCount - 1).join(" ") : words[column - 1]) ?? ""
    if (col.isLink) continue
    let tagged = content
    const link = words[col.linkIndex]
    if (col.linkIndex > -1 && link) tagged = `<a href="${link}">${content}</a>`
    else if (content.match(/^https?\:[^ ]+$/)) tagged = `<a href="${content}">${content}</a>`
    str += `<td>${tagged}</td>\n`
   }
   return str
  }

tableParser
 description A table with a custom delimiter.
 extends abstractTableParser
 catchAllCellType anyCell
 javascript
  get delimiter() {
   return this.content ?? ""
  }

commaTableParser
 description Comma separated values table.
 extends abstractTableParser
 string delimiter ,

pipeTableParser
 description Pipe separated values table.
 extends abstractTableParser
 string delimiter |

spaceTableParser
 description Space separated values table. Last column is a catch all.
 extends abstractTableParser
 string delimiter  

tabTableParser
 description Tab separated values table.
 extends abstractTableParser
 string delimiter \t

tableSearchParser
 cruxFromId
 extends abstractScrollWithRequirementsParser
 string copyFromExternal jquery-3.7.1.min.js dataTables.dataTables.min.css dataTables.min.js
 string requireOnce
  <script defer src="jquery-3.7.1.min.js"></script>
  <style>.dt-search{font-family: "SF Pro", "Helvetica Neue", "Segoe UI", "Arial";}</style>
  <link rel="stylesheet" href="dataTables.dataTables.min.css" />
    <script defer src="dataTables.min.js"></script>
    <script>
     // Extract and parse the URL hash to retrieve the search parameter
    var initialSearch = (function() {
      var hashParams = window.location.hash.substr(1).split('&').reduce(function(p, e) {
        var a = e.split('=');
        p[decodeURIComponent(a[0])] = decodeURIComponent(a[1]);
        return p;
      }, {});
      return hashParams.search || ''; // return the search term or an empty string if not found
    })();
     document.addEventListener("DOMContentLoaded", function () {
      jQuery('table').DataTable({"order": [],"paging": false,
      stateSave: true,
      stateSaveCallback: function(settings, data) {
      // Get the search term and encode it for URL safety
      var search = encodeURIComponent(data.search.search);
      // Set the hash to just the search term
      window.location.hash = 'search=' + search;
    },
    // Set the search input to the initial value extracted from the URL
    search: { search: initialSearch },
    stateLoadCallback: function(settings) {
      // Parse the hash to extract the search term
      var hashParams = window.location.hash.substr(1).split('&').reduce(function(p, e) {
        var a = e.split('=');
        p[decodeURIComponent(a[0])] = decodeURIComponent(a[1]);
        return p;
      }, {});
      // Return the state object with only the search term
      return {
        search: { search: hashParams.search || '' }
      };
    }
       });
    } );
    </script>
 description Add table search to all tables on the page.
 javascript
  compileInstance() {
   return ""
  }