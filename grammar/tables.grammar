abstractTableNode
 abstract
 cruxFromId
 catchAllNodeType rowNode
 extends abstractScrollNode
 javascript
  get tableHeader() {
   return this.columns.filter(col => !col.isLink).map(column => `<th>${column.name}</th>\n`)
  }
  get columnNames() {
    const header = this.nodeAt(0)
    return header
    ? header
      .getLine()
      .split(this.delimiter)
    : []  
  }
  get columns() {
    const cols = this.columnNames
    return cols.map((name, index) => {
      const isLink = name.endsWith("Link")
      const linkIndex = cols.indexOf(name + "Link")
      return {
        name,
        isLink,
        linkIndex
      }
    })
  }
  get tableBody() {
   const {delimiter} = this
   return this.getTopDownArray()
    .slice(1)
    .map(node => `<tr>${node.toRow(this.columns, delimiter)}</tr>`)
    .join("\n")
  }
  compile() {
   return `<table class="scrollTableComponent"><thead><tr>${this.tableHeader.join("\n")}</tr></thead>\n<tbody>${this.tableBody}</tbody></table>`
  }
rowNode
 catchAllCellType stringCell
 javascript
  toRow(columns, delimiter) {
   const words = this.getLine().split(delimiter)
   let str = ""
   let column = 0
   const columnCount = columns.length
   while (column < columnCount) {
    const col = columns[column]
    column++
    const content = columnCount === column ? words.slice(columnCount - 1).join(" ") : words[column - 1]
    if (col.isLink) continue
    let tagged = ""
    const link = words[col.linkIndex]
    if (col.linkIndex > -1 && link)
     tagged = `<a href="${link}">${content}</a>`
    else
     tagged = this.getRootNode().compileATags(content ?? "")
    str += `<td>${tagged}</td>\n`
   }
   return str
  }
commaTableNode
 description Comma separated values table.
 extends abstractTableNode
 string delimiter ,
pipeTableNode
 description Pipe separated values table.
 extends abstractTableNode
 string delimiter |
spaceTableNode
 description Space separated values table. Last column is a catch all.
 extends abstractTableNode
 string delimiter  
tabTableNode
 description Tab separated values table.
 extends abstractTableNode
 string delimiter \t