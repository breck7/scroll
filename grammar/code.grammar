lineOfCodeNode
 catchAllCellType codeCell
 catchAllNodeType lineOfCodeNode
codeNode
 description A code block.
 catchAllNodeType lineOfCodeNode
 extends abstractScrollNode
 javascript
  compile() {
   return `<code class="scrollCodeBlockComponent">${this.childrenToString().replace(/\</g, "&lt;")}</code>`
  }
 cruxFromId
codeWithLanguageNode
 description Use this to specify the language of the code block, such as csvCode or rustCode.
 extends codeNode
 pattern ^[a-zA-Z0-9_]+Code$
copyButtonsNode
 cruxFromId
 extends abstractScrollWithRequirementsNode
 description Make code snippets copyable.
 javascript
  compileInstance() {
   return ""
  }
 string requireOnce
  <script>
  document.addEventListener("DOMContentLoaded", () => document.querySelectorAll(".scrollCodeBlockComponent").forEach(block =>
   {
    if (!navigator.clipboard) return
    const button = document.createElement("span")
    button.classList.add("scrollCopyButton")
    block.appendChild(button)
    button.addEventListener("click", async () => {
      await navigator.clipboard.writeText(block.innerText)
      button.classList.add("scrollCopied")
    })
   }
  ))
  </script>
belowAsCodeNode
 description Print the Scroll code of the next node.
 extends abstractScrollNode
 catchAllCellType integerCell
 cruxFromId
 javascript
  method = "getNext"
  get code() {
   const { method } = this
   let code = ""
   let howMany = parseInt(this.getWord(1))
   if (!howMany || isNaN(howMany)) howMany = 1
   let nodes = []
   let next = this[method]()
   while (howMany) {
    nodes.push(next)
    next = next[method]()
    howMany--
   }
   if (this.reverseNodes) nodes.reverse()
   return nodes.map(node => node.toString()).join("\n")
  }
  reverseNodes = false
  compile() {
   return `<code class="scrollCodeBlockComponent">${this.code.replace(/\</g, "&lt;")}</code>`
  }
aboveAsCodeNode
 description Print the Scroll code for the previous node.
 extends belowAsCodeNode
 javascript
  method = "getPrevious"
  reverseNodes = true