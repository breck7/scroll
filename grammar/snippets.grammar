endSnippetNode
 description Insert one of these where you want to cut the file for a snippet.
 extends abstractTopLevelSingleMetaNode
snippetsNode
 extends abstractAftertextNode
 cruxFromId
 cells keywordCell groupNameWithOptionalFolderCell
 catchAllCellType groupNameWithOptionalFolderCell
 description Prints the snippets of all files in the named group(s).
 example
  snippets index
 javascript
  getHtml(file) {
    return file.htmlForEmbeddedVersionWithShortSnippets
  }
  makeSnippet(file) {
   const snippet = new TreeNode(`div
   class scrollSnippetContainerComponent`)
   const div = snippet.getNode("div")
   div.appendLineAndChildren("bern", this.getHtml(file))
   return snippet.toString().replace(/\n/g, "\n ")
  }
  compile() {
   const file = this.parent.file
   const files = file.getFilesInGroupsForEmbedding(this.getWordsFrom(1))
   const snippets = files.map(file => this.makeSnippet(file)).join(this.delimiter)
   file.clearEmbeddingRelativeUrls(files)
   const code = `div
   class scrollColumnsComponent
   style column-width:35ch;
   ${snippets}`
   return file.compileStumpCode(code)
  }
  delimiter = "\n "
fullSnippetsNode
 extends snippetsNode
 cruxFromId
 description Prints the full contents of files that are in the named group.
 javascript
  getHtml(file) {
    return file.compiledEmbeddedVersion
  }
loopNode
 extends abstractAftertextNode
 cells keywordCell
 description Iterate over files, lines or words, evaluating code and joining the resulting HTML.
 cruxFromId
 inScope abstractLoopConfigNode
 javascript
  compile() {
   const code = this.get("javascript")
   const joinWith = this.get("join") ?? ""
   try {
    const limit = this.get("limit")
    let items = this.items
    if (limit) items = items.slice(0, parseInt(limit))
    return items.map((item, index) => eval(code)).join(joinWith)
   } catch (err) {
    console.error(err)
    return ""
   } finally {
     this.teardown()
   }
  }
  get items() {
   const provider = this.getChildInstancesOfNodeTypeId("abstractItemsProviderNode")[0]
   return provider ? provider.items : []
  }
  teardown() {}
loopLineNode
 catchAllCellType stringCell
abstractLoopConfigNode
 cells keywordCell
abstractItemsProviderNode
 extends abstractLoopConfigNode
loopLinesNode
 crux lines
 extends abstractItemsProviderNode
 description Iterate over the provided lines.
 catchAllNodeType loopLineNode
 javascript
  get items() {
   return this.map(node => node.toString())
  }
loopWordsNode
 crux words
 extends abstractItemsProviderNode
 catchAllCellType stringCell
 description Iterate over the provided words.
 javascript
  get items() {
   return this.getWordsFrom(1)
  }
loopGroupsNode
 crux groups
 extends abstractItemsProviderNode
 catchAllCellType groupNameWithOptionalFolderCell
 description Set this to iterate over scroll files in a folder. Provide both the folder and group name like this: [folder]/[groupName]
 javascript
  get items() {
   this.files = this.root.file.getFilesInGroupsForEmbedding(this.getWordsFrom(1))
   return this.files
  }
  teardown() {
    this.root.file.clearEmbeddingRelativeUrls(this.files)
    delete this.files
  }
loopJoinNode
 extends abstractLoopConfigNode
 crux join
 catchAllCellType stringCell
 description HTML to use to join the items.
loopLimitNode
 extends abstractLoopConfigNode
 crux limit
 catchAllCellType stringCell
 description HTML to use to join the items.
loopCodeNode
 extends abstractLoopConfigNode
 crux javascript
 catchAllCellType javascriptCell
 description Javascript to execute for each file in the loop.