{"version":3,"file":"debug.js","sourceRoot":"","sources":["../../src/themes/debug.ts"],"names":[],"mappings":"AAEA;;;;GAIG;AACH,MAAM,CAAC,MAAM,KAAK,GAAU,IAAI,GAAG,CACjC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA6ID;KACI,IAAI,EAAE;KACN,KAAK,CAAC,IAAI,CAAC;KACX,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,CAAS,EAAE,EAAE,CAAC,IAAI,IAAI,IAAI,CAAC,KAAK,IAAI,GAAG,CAAC,CAAC,CACjE,CAAA;AAED,mEAAmE;AACnE,KAAK,CAAC,GAAG,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAA;AACnC,KAAK,CAAC,GAAG,CAAC,yBAAyB,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAA;AAC9C,KAAK,CAAC,GAAG,CAAC,4BAA4B,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAA;AACjD,KAAK,CAAC,GAAG,CAAC,+BAA+B,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAA","sourcesContent":["import { Theme } from '../index.js'\n\n/**\n * This theme just shows which token names are in use The list of tokens is\n * everything defined in the tsx PrismJS language grammar, since that is a\n * superset of JavaScript, TS, JSX, and HTML.\n */\nexport const theme: Theme = new Map(\n  `\nboolean\nbuiltin\ncdata\nclass-name\nclass-name boolean\nclass-name builtin\nclass-name comment\nclass-name constant\nclass-name function\nclass-name function-variable\nclass-name hashbang\nclass-name keyword\nclass-name number\nclass-name operator\nclass-name punctuation\nclass-name regex\nclass-name regex regex-delimiter\nclass-name regex regex-flags\nclass-name regex regex-source\nclass-name string\nclass-name string-property\nclass-name template-string\nclass-name template-string interpolation\nclass-name template-string interpolation interpolation-punctuation\nclass-name template-string interpolation rest\nclass-name template-string template-punctuation\ncomment\nconstant\ndecorator\ndecorator at\ndecorator function\ndoctype\ndoctype doctype-tag\ndoctype internal-subset\ndoctype name\ndoctype punctuation\ndoctype string\nentity\nfunction\nfunction-variable\ngeneric-function\ngeneric-function function\ngeneric-function generic\nhashbang\nkeyword\nnumber\noperator\nprolog\npunctuation\nregex\nregex regex-delimiter\nregex regex-flags\nregex regex-source\nscript\nscript included-cdata\nscript included-cdata cdata\nscript included-cdata language-javascript\nscript included-cdata language-javascript class-name\nscript included-cdata language-javascript comment\nscript included-cdata language-javascript function-variable\nscript included-cdata language-javascript hashbang\nscript included-cdata language-javascript keyword\nscript included-cdata language-javascript literal-property\nscript included-cdata language-javascript number\nscript included-cdata language-javascript parameter\nscript included-cdata language-javascript regex\nscript included-cdata language-javascript string\nscript included-cdata language-javascript string-property\nscript included-cdata language-javascript template-string\nscript language-javascript\nscript language-javascript class-name\nscript language-javascript comment\nscript language-javascript function-variable\nscript language-javascript hashbang\nscript language-javascript keyword\nscript language-javascript literal-property\nscript language-javascript number\nscript language-javascript parameter\nscript language-javascript regex\nscript language-javascript regex regex-source\nscript language-javascript string\nscript language-javascript string-property\nscript language-javascript template-string\nscript language-javascript template-string interpolation\nscript language-javascript template-string interpolation interpolation-punctuation\nscript language-javascript template-string interpolation rest\nscript language-javascript template-string template-punctuation\nstring\nstring-property\nstyle\nstyle included-cdata\nstyle included-cdata cdata\nstyle included-cdata language-css\nstyle included-cdata language-css atrule\nstyle included-cdata language-css comment\nstyle included-cdata language-css function\nstyle included-cdata language-css important\nstyle included-cdata language-css property\nstyle included-cdata language-css punctuation\nstyle included-cdata language-css selector\nstyle included-cdata language-css string\nstyle included-cdata language-css url\nstyle language-css\nstyle language-css atrule\nstyle language-css atrule keyword\nstyle language-css atrule rest\nstyle language-css atrule rule\nstyle language-css atrule selector-function-argument\nstyle language-css comment\nstyle language-css function\nstyle language-css important\nstyle language-css property\nstyle language-css punctuation\nstyle language-css selector\nstyle language-css string\nstyle language-css url\nstyle language-css url function\nstyle language-css url punctuation\nstyle language-css url string\ntag\ntag attr-name\ntag attr-name namespace\ntag attr-value\ntag attr-value punctuation\ntag comment\ntag punctuation\ntag script\ntag script rest\ntag script script-punctuation\ntag special-attr\ntag spread\ntag tag\ntag tag class-name\ntag tag namespace\ntag tag punctuation\ntemplate-string\ntemplate-string interpolation\ntemplate-string interpolation interpolation-punctuation\ntemplate-string string\ntemplate-string template-punctuation\n`\n    .trim()\n    .split('\\n')\n    .map(name => [name, (s: string) => `<${name}>${s}</${name}>`])\n)\n\n// add another match just to have a dupe rule that becomes an array\ntheme.set('a c d e f, f', [s => s])\ntheme.set('a b c d e, a c d e f, f', [s => s])\ntheme.set('a b c d e, a c d e f, f, g', [s => s])\ntheme.set('a b c d e, a c d e f, f, g, h', s => s)\n"]}