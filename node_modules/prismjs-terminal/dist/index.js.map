{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAAA,8CAA8C;AA+C9C,OAAO,KAAK,MAAM,OAAO,CAAA;AACzB,OAAO,EAAE,YAAY,EAAE,MAAM,IAAI,CAAA;AACjC,OAAO,EAAE,QAAQ,EAAE,MAAM,aAAa,CAAA;AACtC,OAAO,EAAE,KAAK,EAAE,MAAM,MAAM,CAAA;AAC5B,OAAO,KAAK,MAAM,SAAS,CAAA;AAC3B,OAAO,YAAY,MAAM,eAAe,CAAA;AAExC,mDAAmD;AACnD,qCAAqC;AACrC,OAAO,aAAa,MAAM,6BAA6B,CAAA;AACvD,aAAa,CAAC,CAAC,KAAK,EAAE,YAAY,EAAE,YAAY,EAAE,KAAK,CAAC,CAAC,CAAA;AAEzD,MAAM,aAAa,GAAG,CAAC,CAAS,EAAc,EAAE;IAC9C,MAAM,MAAM,GAAe,EAAE,CAAA;IAC7B,MAAM,SAAS,GAAG,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAA;IACjD,KAAK,MAAM,CAAC,IAAI,SAAS,EAAE;QACzB,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAA;KAC5B;IACD,OAAO,MAAM,CAAA;AACf,CAAC,CAAA;AAED,MAAM,QAAQ,GAAG,CAAC,CAAW,EAAE,CAAW,EAAE,EAAE,CAC5C,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;AAE1D,MAAM,UAAU,GAAG;AACjB,gCAAgC;AAChC,SAAmB;AACnB,mBAAmB;AACnB,KAAe,EACf,EAAE;IACF,IAAI,CAAC,SAAS,CAAC,MAAM;QAAE,OAAO,IAAI,CAAA;IAClC,IAAI,CAAC,GAAG,CAAC,CAAA;IACT,KAAK,MAAM,CAAC,IAAI,SAAS,EAAE;QACzB,IAAI,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,EAAE;YAClB,CAAC,EAAE,CAAA;YACH,IAAI,CAAC,KAAK,SAAS,CAAC,MAAM;gBAAE,OAAO,IAAI,CAAA;SACxC;KACF;IACD,OAAO,KAAK,CAAA;AACd,CAAC,CAAA;AAED,MAAM,UAAU,GAAG,CAAC,KAAe,EAAE,IAAkB,EAAgB,EAAE,CACvE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC,EAAE,EAAE,CAAC,UAAU,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC,CAAA;AAE5D,iEAAiE;AACjE,MAAM,SAAS,GAAG,CAAC,KAAe,EAAE,IAAkB,EAAa,EAAE;IACnE,MAAM,CAAC,GAAG,UAAU,CAAC,KAAK,EAAE,IAAI,CAAC;SAC9B,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,MAAM,CAAC;SACvC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAA;IACrB,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,CAAY,EAAE,CAAY,EAAE,EAAE;QAC7C,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAA;QACZ,OAAO,CAAC,CAAA;IACV,CAAC,EAAE,EAAE,CAAC,CAAA;AACR,CAAC,CAAA;AAED,MAAM,WAAW,GAAG,CAClB,OAAe,EACf,GAAW,EACX,KAAe,EACf,CAAgB,EAChB,EAAE;IACF,MAAM,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;IACvB,IAAI,CAAC,IAAI;QAAE,OAAO,OAAO,CAAA;IACzB,MAAM,MAAM,GAAG,SAAS,CAAC,KAAK,EAAE,IAAI,CAAC,CAAA;IACrC,KAAK,IAAI,CAAC,GAAG,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;QAC3C,OAAO,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAA;KAC7B;IACD,OAAO,OAAO,CAAA;AAChB,CAAC,CAAA;AAyDD,MAAM,cAAc,GAAG,CAAC,CAAS,EAAE,EAAE,CACnC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;AAErD,MAAM,UAAU,GAAG,CACjB,IAAY,EACZ,CAAgB,EAChB,EACE,QAAQ,GAAG,CAAC,EACZ,QAAQ,GAAG,OAAO,CAAC,MAAM,CAAC,OAAO,IAAI,EAAE,EACvC,OAAO,GAAG,CAAC,EACX,WAAW,GAAG,KAAK,GACC,EACd,EAAE;IACV,MAAM,KAAK,GAAG,cAAc,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAA;IAC9C,MAAM,IAAI,GAAa,EAAE,CAAA;IACzB,IAAI,GAAG,GAAG,QAAQ,CAAA;IAClB,MAAM,IAAI,GAAG,WAAW,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAA;IAC1D,MAAM,IAAI,GAAG,IAAI,GAAG,OAAO,GAAG,CAAC,CAAA;IAC/B,KAAK,MAAM,CAAC,IAAI,KAAK,EAAE;QACrB,MAAM,GAAG,GAAG,YAAY,CAAC,CAAC,CAAC,CAAA;QAC3B,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;QACd,IAAI,GAAG,GAAG,QAAQ,GAAG,IAAI,IAAI,GAAG,GAAG,GAAG;YAAE,GAAG,GAAG,GAAG,CAAA;KAClD;IACD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACpC,MAAM,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAA;QACnB,MAAM,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,OAAO,CAAA;QAC/B,MAAM,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAA;QACxC,MAAM,CAAC,GACL,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC;YACnB,CAAC,WAAW;gBACV,CAAC,CAAC,WAAW,CACT,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,GAAG,EAClC,YAAY,EACZ,EAAE,EACF,CAAC,CACF;gBACH,CAAC,CAAC,EAAE,CAAC,CAAA;QACT,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;KAC5B;IACD,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAA;IAC9B,OAAO,WAAW,CAAC,IAAI,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,CAAC,CAAA;AACtC,CAAC,CAAA;AAED;;;GAGG;AACH,MAAM,CAAC,MAAM,SAAS,GAAG,CACvB,IAAY,EACZ,EACE,QAAQ,GAAG,KAAK,EAChB,KAAK,GAAG,OAAO,EACf,QAAQ,EACR,QAAQ,EACR,OAAO,EACP,WAAW,MACY,EAAE,EACnB,EAAE;IACV,MAAM,CAAC,GAAG,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAA;IAC3D,IAAI,CAAC,CAAC,EAAE;QACN,MAAM,IAAI,KAAK,CAAC,iBAAiB,GAAG,KAAK,CAAC,CAAA;KAC3C;IACD,MAAM,CAAC,GAAG,YAAY,CAAC,CAAC,CAAC,CAAA;IACzB,OAAO,UAAU,CACf,SAAS,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,EAAE,KAAK,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,EAC7D,CAAC,EACD,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,WAAW,EAAE,CAC7C,CAAA;AACH,CAAC,CAAA;AAED,MAAM,cAAc,GAAG,CAAC,QAAgB,EAAU,EAAE;IAClD,MAAM,EAAE,GAAG,EAAE,GAAG,KAAK,CAAC,QAAQ,CAAC,CAAA;IAC/B,QAAQ,GAAG,EAAE;QACX,KAAK,KAAK,CAAC;QACX,KAAK,MAAM,CAAC;QACZ,KAAK,MAAM;YACT,OAAO,YAAY,CAAA;QACrB,KAAK,KAAK,CAAC;QACX,KAAK,MAAM,CAAC;QACZ,KAAK,MAAM;YACT,OAAO,YAAY,CAAA;QACrB,KAAK,MAAM;YACT,OAAO,MAAM,CAAA;QACf,KAAK,EAAE,CAAC;QACR,KAAK,GAAG;YACN,MAAM,IAAI,KAAK,CAAC,sCAAsC,GAAG,QAAQ,CAAC,CAAA;QACpE;YACE,6BAA6B;YAC7B,OAAO,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,CAAA;KAC1B;AACH,CAAC,CAAA;AAED;;;GAGG;AACH,MAAM,CAAC,MAAM,aAAa,GAAG,KAAK,EAChC,QAAgB,EAChB,OAA4B,EAAE,EACb,EAAE;IACnB,IAAI,CAAC,IAAI,CAAC,QAAQ;QAAE,IAAI,CAAC,QAAQ,GAAG,cAAc,CAAC,QAAQ,CAAC,CAAA;IAC5D,OAAO,SAAS,CAAC,MAAM,QAAQ,CAAC,QAAQ,EAAE,MAAM,CAAC,EAAE,IAAI,CAAC,CAAA;AAC1D,CAAC,CAAA;AAED;;;;;GAKG;AACH,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAC/B,QAAgB,EAChB,OAA4B,EAAE,EACtB,EAAE;IACV,IAAI,CAAC,IAAI,CAAC,QAAQ;QAAE,IAAI,CAAC,QAAQ,GAAG,cAAc,CAAC,QAAQ,CAAC,CAAA;IAC5D,OAAO,SAAS,CAAC,YAAY,CAAC,QAAQ,EAAE,MAAM,CAAC,EAAE,IAAI,CAAC,CAAA;AACxD,CAAC,CAAA;AAED,MAAM,SAAS,GAAG,CAChB,GAAW,EACX,KAAoB,EACpB,QAAkB,EAAE,EACZ,EAAE;IACV,IAAI,OAAO,GAAG,KAAK,QAAQ;QAAE,OAAO,GAAG,CAAA;IACvC,IAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;QACtB,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAA;KACzD;SAAM;QACL,OAAO,WAAW,CAChB,SAAS,CAAC,GAAG,CAAC,OAAO,EAAE,KAAK,EAAE,CAAC,GAAG,KAAK,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC,EACnD,GAAG,CAAC,IAAI,EACR,KAAK,EACL,KAAK,CACN,CAAA;KACF;AACH,CAAC,CAAA;AAED,MAAM,cAAc,GAAG,IAAI,GAAG,EAAwB,CAAA;AACtD,MAAM,YAAY,GAAG,CAAC,CAAQ,EAAiB,EAAE;IAC/C,MAAM,GAAG,GAAG,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC,CAAA;IACjC,IAAI,GAAG;QAAE,OAAO,GAAG,CAAA;IACnB,IAAI,CAAC,CAAC,CAAC,YAAY,GAAG,CAAC,EAAE;QACvB,MAAM,CAAC,GAAG,YAAY,CAAC,IAAI,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;QAClD,cAAc,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;QACxB,OAAO,CAAC,CAAA;KACT;IACD,MAAM,CAAC,GAAkB,IAAI,GAAG,EAAE,CAAA;IAClC,KAAK,MAAM,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE;QACjC,MAAM,SAAS,GAAG,aAAa,CAAC,CAAC,CAAC,CAAA;QAClC,KAAK,MAAM,GAAG,IAAI,SAAS,EAAE;YAC3B,uDAAuD;YACvD,gDAAgD;YAChD,oCAAoC;YACpC,MAAM,IAAI,GAAG,GAAG,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,CAAA;YAChC,GAAG,CAAC,GAAG,EAAE,CAAA;YACT,MAAM,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,CAAA;YAC5B,IAAI,MAAM,GAAG,KAAK,CAAA;YAClB,KAAK,MAAM,CAAC,KAAK,EAAE,KAAK,CAAC,IAAI,EAAE,EAAE;gBAC/B,IAAI,QAAQ,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE;oBACxB,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAA;oBAC9C,MAAM,GAAG,IAAI,CAAA;oBACb,MAAK;iBACN;aACF;YACD,IAAI,CAAC,MAAM;gBAAE,EAAE,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAA;YAC1D,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC;gBAAE,CAAC,CAAC,GAAG,CAAC,IAAI,EAAE,EAAE,CAAC,CAAA;SAClC;KACF;IAED,MAAM,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;IACtB,IAAI,CAAC,GAAG;QAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAA;IAE3C,cAAc,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;IACxB,OAAO,CAAC,CAAA;AACV,CAAC,CAAA;AAED,OAAO,KAAK,MAAM,MAAM,mBAAmB,CAAA;AAC3C,OAAO,EAAE,MAAM,EAAE,CAAA","sourcesContent":["// TODO: start stack with [`language-${lang}`]\n\n/**\n * A function that applies styles, typically one of the chalk builder functions\n */\nexport type StyleFn = (s: string) => string\n\n/**\n * Either one {@link StyleFn} or several\n */\nexport type Styles = StyleFn | StyleFn[]\n\n/**\n * Theme objects can be either a Map or object where the keys are the selectors\n * and the values are either a styling function or an array of styling\n * functions to be applied in order.\n *\n * The `_` style rule applies to the block as a whole, and is used\n * as the default style. This is where you'd usually port a PrismJS\n * theme's `code[class*=\"language-\"]` css rule.\n *\n * The `lineNumber` style rule will apply to line numbers, if they\n * are used.\n *\n * The semantics are similar to CSS, where a nested property will be\n * applied to nodes within that nesting stack with a higher\n * priority the more tags that match, and later rules taking\n * precedence over earlier ones. It's _not_ a full CSS selector\n * syntax though, so things like `.token.italic.bold` aren't\n * supported. Just individual token class names, possibly nested.\n * Also, chalk is not CSS, and a terminal is not a browser, so\n * there are some differences and limitations of course.\n *\n * Aliases are also not supported, styles have to be applied to the\n * actual parsed class names PrismJS provides.\n */\nexport type Theme = Record<string, Styles> | Map<string, Styles>\n\ntype CompiledRule = [stack: string[], styles: StyleFn[]][]\n\n/**\n * A theme that has been compiled for use in highlighting functions\n * Optimized for faster lookup of tokens, with rules sorted based on\n * priority.\n */\ntype CompiledTheme = Map<string, CompiledRule>\n\nimport chalk from 'chalk'\nimport { readFileSync } from 'fs'\nimport { readFile } from 'fs/promises'\nimport { parse } from 'path'\nimport Prism from 'prismjs'\nimport stringLength from 'string-length'\n\n// primary use is to highlight ts/js programs, call\n// loadLanguages() to support others.\nimport loadLanguages from 'prismjs/components/index.js'\nloadLanguages(['tsx', 'typescript', 'javascript', 'jsx'])\n\nconst parseSelector = (s: string): string[][] => {\n  const parsed: string[][] = []\n  const selectors = s.split(',').map(s => s.trim())\n  for (const s of selectors) {\n    parsed.push(s.split(/\\s+/))\n  }\n  return parsed\n}\n\nconst arraysEq = (a: string[], b: string[]) =>\n  a.length === b.length && !a.some((aa, i) => aa !== b[i])\n\nconst stackMatch = (\n  // the stack defined in the rule\n  ruleStack: string[],\n  // the actual stack\n  stack: string[]\n) => {\n  if (!ruleStack.length) return true\n  let j = 0\n  for (const t of ruleStack) {\n    if (t === stack[j]) {\n      j++\n      if (j === ruleStack.length) return true\n    }\n  }\n  return false\n}\n\nconst filterRule = (stack: string[], rule: CompiledRule): CompiledRule =>\n  rule.filter(([ruleStack]) => stackMatch(ruleStack, stack))\n\n// return style functions sorted in *ascending* order of priority\nconst getStyles = (stack: string[], rule: CompiledRule): StyleFn[] => {\n  const f = filterRule(stack, rule)\n    .sort(([a], [b]) => a.length - b.length)\n    .map(([_, r]) => r)\n  return f.reduce((s: StyleFn[], r: StyleFn[]) => {\n    s.push(...r)\n    return s\n  }, [])\n}\n\nconst applyStyles = (\n  content: string,\n  tag: string,\n  stack: string[],\n  t: CompiledTheme\n) => {\n  const rule = t.get(tag)\n  if (!rule) return content\n  const styles = getStyles(stack, rule)\n  for (let i = styles.length - 1; i > -1; i--) {\n    content = styles[i](content)\n  }\n  return content\n}\n\ntype Tokens = string | Prism.Token | (string | Prism.Token)[]\n\n/**\n * Options for the highlighting functions\n */\nexport interface PrismJSTerminalOpts {\n  /**\n   * The theme to use. Either a {@link Theme} object, or a\n   * string identifying one of the built-in themes.\n   *\n   * @default 'moria'\n   */\n  theme?: keyof typeof themes | Theme\n\n  /**\n   * The language of the supplied code to highlight. Defaults to `tsx` if no\n   * filename is provided, or else tries to infer the language from the\n   * filename. You must have previously called `loadLanguages([...])` from\n   * `PrismJS` in order to highlight a given language, if you want something\n   * that is not automatically included when `tsx` and `typescript` are\n   * included.\n   *\n   * @default 'tsx'\n   */\n  language?: string\n\n  /**\n   * The minimum width to make the block on the screen.\n   *\n   * @default 0\n   */\n  minWidth?: number\n\n  /**\n   * The maximum width to make the block on the screen.\n   *\n   * @default `process.stdout.columns` or `80`.\n   */\n  maxWidth?: number\n\n  /**\n   * How many spaces to horizontally pad the code block.\n   *\n   * @default 1\n   */\n  padding?: number\n\n  /**\n   * Whether or not to prepend a line number to each line.\n   *\n   * @default false\n   */\n  lineNumbers?: boolean\n}\n\nconst trimTrailingCR = (c: string) =>\n  c.endsWith('\\n') ? c.substring(0, c.length - 1) : c\n\nconst blockStyle = (\n  code: string,\n  c: CompiledTheme,\n  {\n    minWidth = 0,\n    maxWidth = process.stdout.columns || 80,\n    padding = 1,\n    lineNumbers = false,\n  }: PrismJSTerminalOpts\n): string => {\n  const lines = trimTrailingCR(code).split('\\n')\n  const lens: number[] = []\n  let max = minWidth\n  const npad = lineNumbers ? String(lines.length).length : 0\n  const tpad = npad + padding * 2\n  for (const l of lines) {\n    const len = stringLength(l)\n    lens.push(len)\n    if (len < maxWidth - tpad && len > max) max = len\n  }\n  for (let i = 0; i < lens.length; i++) {\n    const len = lens[i]\n    const pad = max - len + padding\n    const r = pad > 0 ? ' '.repeat(pad) : ''\n    const l =\n      ' '.repeat(padding) +\n      (lineNumbers\n        ? applyStyles(\n            String(i + 1).padStart(npad) + ' ',\n            'lineNumber',\n            [],\n            c\n          )\n        : '')\n    lines[i] = l + lines[i] + r\n  }\n  code = lines.join('\\n') + '\\n'\n  return applyStyles(code, '_', [], c)\n}\n\n/**\n * Highlight the string of code provided, returning the string of highlighted\n * code.\n */\nexport const highlight = (\n  code: string,\n  {\n    language = 'tsx',\n    theme = 'moria',\n    minWidth,\n    maxWidth,\n    padding,\n    lineNumbers,\n  }: PrismJSTerminalOpts = {}\n): string => {\n  const t = typeof theme === 'string' ? themes[theme] : theme\n  if (!t) {\n    throw new Error('invalid theme: ' + theme)\n  }\n  const c = compileTheme(t)\n  return blockStyle(\n    stringify(Prism.tokenize(code, Prism.languages[language]), c),\n    c,\n    { minWidth, maxWidth, padding, lineNumbers }\n  )\n}\n\nconst detectLanguage = (filename: string): string => {\n  const { ext } = parse(filename)\n  switch (ext) {\n    case '.ts':\n    case '.mts':\n    case '.cts':\n      return 'typescript'\n    case '.js':\n    case '.cjs':\n    case '.mjs':\n      return 'javascript'\n    case '.htm':\n      return 'html'\n    case '':\n    case '.':\n      throw new Error('could not detect language for file: ' + filename)\n    default:\n      // cross our fingers, I guess\n      return ext.substring(1)\n  }\n}\n\n/**\n * Read the filename provided, and highlight its code. If a language is not\n * provided in the opts, it will attempt to infer from the filename.\n */\nexport const highlightFile = async (\n  filename: string,\n  opts: PrismJSTerminalOpts = {}\n): Promise<string> => {\n  if (!opts.language) opts.language = detectLanguage(filename)\n  return highlight(await readFile(filename, 'utf8'), opts)\n}\n\n/**\n * Read the filename provided, and highlight its code. If a language is not\n * provided in the opts, it will attempt to infer from the filename.\n *\n * Synchronous {@link highlightFile}\n */\nexport const highlightFileSync = (\n  filename: string,\n  opts: PrismJSTerminalOpts = {}\n): string => {\n  if (!opts.language) opts.language = detectLanguage(filename)\n  return highlight(readFileSync(filename, 'utf8'), opts)\n}\n\nconst stringify = (\n  tok: Tokens,\n  theme: CompiledTheme,\n  stack: string[] = []\n): string => {\n  if (typeof tok === 'string') return tok\n  if (Array.isArray(tok)) {\n    return tok.map(t => stringify(t, theme, stack)).join('')\n  } else {\n    return applyStyles(\n      stringify(tok.content, theme, [...stack, tok.type]),\n      tok.type,\n      stack,\n      theme\n    )\n  }\n}\n\nconst compiledThemes = new Map<Theme, CompiledTheme>()\nconst compileTheme = (t: Theme): CompiledTheme => {\n  const pre = compiledThemes.get(t)\n  if (pre) return pre\n  if (!(t instanceof Map)) {\n    const c = compileTheme(new Map(Object.entries(t)))\n    compiledThemes.set(t, c)\n    return c\n  }\n  const c: CompiledTheme = new Map()\n  for (const [s, tr] of t.entries()) {\n    const selectors = parseSelector(s)\n    for (const sel of selectors) {\n      // sel is a stack, so `x y z` becomes `['x', 'y', 'z']`\n      // add the stack with the rule to the last item,\n      // so we add [['x', 'y'], tr] to 'z'\n      const last = sel[sel.length - 1]\n      sel.pop()\n      const cr = c.get(last) || []\n      let pushed = false\n      for (const [stack, rules] of cr) {\n        if (arraysEq(sel, stack)) {\n          rules.push(...(Array.isArray(tr) ? tr : [tr]))\n          pushed = true\n          break\n        }\n      }\n      if (!pushed) cr.push([sel, Array.isArray(tr) ? tr : [tr]])\n      if (!c.has(last)) c.set(last, cr)\n    }\n  }\n\n  const def = c.get('_')\n  if (!def) c.set('_', [[[], [chalk.reset]]])\n\n  compiledThemes.set(t, c)\n  return c\n}\n\nimport * as themes from './themes/index.js'\nexport { themes }\n"]}