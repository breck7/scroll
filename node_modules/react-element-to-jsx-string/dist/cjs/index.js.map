{"version":3,"file":"index.js","sources":["../../src/formatter/spacer.js","../../src/formatter/sortObject.js","../../src/tree.js","../../src/parser/parseReactElement.js","../../src/formatter/formatFunction.js","../../src/formatter/formatComplexDataStructure.js","../../src/formatter/formatPropValue.js","../../src/formatter/formatProp.js","../../src/formatter/mergeSiblingPlainStringChildrenReducer.js","../../src/formatter/sortPropsByNames.js","../../src/formatter/createPropFilter.js","../../src/formatter/formatReactElementNode.js","../../src/formatter/formatReactFragmentNode.js","../../src/formatter/formatTreeNode.js","../../src/formatter/formatTree.js","../../src/index.js"],"sourcesContent":["/* @flow */\n\nexport default (times: number, tabStop: number): string => {\n  if (times === 0) {\n    return '';\n  }\n\n  return new Array(times * tabStop).fill(' ').join('');\n};\n","/* @flow */\nimport * as React from 'react';\n\nfunction safeSortObject(value: any, seen: WeakSet<any>): any {\n  // return non-object value as is\n  if (value === null || typeof value !== 'object') {\n    return value;\n  }\n\n  // return date, regexp and react element values as is\n  if (\n    value instanceof Date ||\n    value instanceof RegExp ||\n    React.isValidElement(value)\n  ) {\n    return value;\n  }\n\n  seen.add(value);\n\n  // make a copy of array with each item passed through the sorting algorithm\n  if (Array.isArray(value)) {\n    return value.map(v => safeSortObject(v, seen));\n  }\n\n  // make a copy of object with key sorted\n  return Object.keys(value)\n    .sort()\n    .reduce((result, key) => {\n      if (key === '_owner') {\n        return result;\n      }\n      if (key === 'current' || seen.has(value[key])) {\n        // eslint-disable-next-line no-param-reassign\n        result[key] = '[Circular]';\n      } else {\n        // eslint-disable-next-line no-param-reassign\n        result[key] = safeSortObject(value[key], seen);\n      }\n      return result;\n    }, {});\n}\n\nexport default function sortObject(value: any): any {\n  return safeSortObject(value, new WeakSet());\n}\n","/* @flow */\n/* eslint-disable no-use-before-define */\n\nimport type { Key } from 'react';\n\ntype PropsType = { [key: string]: any };\ntype DefaultPropsType = { [key: string]: any };\n\nexport type StringTreeNode = {|\n  type: 'string',\n  value: string,\n|};\n\nexport type NumberTreeNode = {|\n  type: 'number',\n  value: number,\n|};\n\nexport type ReactElementTreeNode = {|\n  type: 'ReactElement',\n  displayName: string,\n  props: PropsType,\n  defaultProps: DefaultPropsType,\n  childrens: TreeNode[],\n|};\n\nexport type ReactFragmentTreeNode = {|\n  type: 'ReactFragment',\n  key: ?Key,\n  childrens: TreeNode[],\n|};\n\nexport type TreeNode =\n  | StringTreeNode\n  | NumberTreeNode\n  | ReactElementTreeNode\n  | ReactFragmentTreeNode;\n\nexport const createStringTreeNode = (value: string): StringTreeNode => ({\n  type: 'string',\n  value,\n});\n\nexport const createNumberTreeNode = (value: number): NumberTreeNode => ({\n  type: 'number',\n  value,\n});\n\nexport const createReactElementTreeNode = (\n  displayName: string,\n  props: PropsType,\n  defaultProps: DefaultPropsType,\n  childrens: TreeNode[]\n): ReactElementTreeNode => ({\n  type: 'ReactElement',\n  displayName,\n  props,\n  defaultProps,\n  childrens,\n});\n\nexport const createReactFragmentTreeNode = (\n  key: ?Key,\n  childrens: TreeNode[]\n): ReactFragmentTreeNode => ({\n  type: 'ReactFragment',\n  key,\n  childrens,\n});\n","/* @flow */\n\nimport React, { type Element as ReactElement, Fragment } from 'react';\nimport {\n  ForwardRef,\n  isContextConsumer,\n  isContextProvider,\n  isForwardRef,\n  isLazy,\n  isMemo,\n  isProfiler,\n  isStrictMode,\n  isSuspense,\n  Memo,\n} from 'react-is';\nimport type { Options } from './../options';\nimport {\n  createStringTreeNode,\n  createNumberTreeNode,\n  createReactElementTreeNode,\n  createReactFragmentTreeNode,\n} from './../tree';\nimport type { TreeNode } from './../tree';\n\nconst supportFragment = Boolean(Fragment);\n\nconst getFunctionTypeName = (functionType): string => {\n  if (!functionType.name || functionType.name === '_default') {\n    return 'No Display Name';\n  }\n  return functionType.name;\n};\n\nconst getWrappedComponentDisplayName = (Component: *): string => {\n  switch (true) {\n    case Boolean(Component.displayName):\n      return Component.displayName;\n    case Component.$$typeof === Memo:\n      return getWrappedComponentDisplayName(Component.type);\n    case Component.$$typeof === ForwardRef:\n      return getWrappedComponentDisplayName(Component.render);\n    default:\n      return getFunctionTypeName(Component);\n  }\n};\n\n// heavily inspired by:\n// https://github.com/facebook/react/blob/3746eaf985dd92f8aa5f5658941d07b6b855e9d9/packages/react-devtools-shared/src/backend/renderer.js#L399-L496\nconst getReactElementDisplayName = (element: ReactElement<*>): string => {\n  switch (true) {\n    case typeof element.type === 'string':\n      return element.type;\n    case typeof element.type === 'function':\n      if (element.type.displayName) {\n        return element.type.displayName;\n      }\n      return getFunctionTypeName(element.type);\n    case isForwardRef(element):\n    case isMemo(element):\n      return getWrappedComponentDisplayName(element.type);\n    case isContextConsumer(element):\n      return `${element.type._context.displayName || 'Context'}.Consumer`;\n    case isContextProvider(element):\n      return `${element.type._context.displayName || 'Context'}.Provider`;\n    case isLazy(element):\n      return 'Lazy';\n    case isProfiler(element):\n      return 'Profiler';\n    case isStrictMode(element):\n      return 'StrictMode';\n    case isSuspense(element):\n      return 'Suspense';\n    default:\n      return 'UnknownElementType';\n  }\n};\n\nconst noChildren = (propsValue, propName) => propName !== 'children';\n\nconst onlyMeaningfulChildren = (children): boolean =>\n  children !== true &&\n  children !== false &&\n  children !== null &&\n  children !== '';\n\nconst filterProps = (originalProps: {}, cb: (any, string) => boolean) => {\n  const filteredProps = {};\n\n  Object.keys(originalProps)\n    .filter(key => cb(originalProps[key], key))\n    .forEach(key => (filteredProps[key] = originalProps[key]));\n\n  return filteredProps;\n};\n\nconst parseReactElement = (\n  element: ReactElement<*> | string | number,\n  options: Options\n): TreeNode => {\n  const { displayName: displayNameFn = getReactElementDisplayName } = options;\n\n  if (typeof element === 'string') {\n    return createStringTreeNode(element);\n  } else if (typeof element === 'number') {\n    return createNumberTreeNode(element);\n  } else if (!React.isValidElement(element)) {\n    throw new Error(\n      `react-element-to-jsx-string: Expected a React.Element, got \\`${typeof element}\\``\n    );\n  }\n\n  const displayName = displayNameFn(element);\n\n  const props = filterProps(element.props, noChildren);\n  if (element.ref !== null) {\n    props.ref = element.ref;\n  }\n\n  const key = element.key;\n  if (typeof key === 'string' && key.search(/^\\./)) {\n    // React automatically add key=\".X\" when there are some children\n    props.key = key;\n  }\n\n  const defaultProps = filterProps(element.type.defaultProps || {}, noChildren);\n  const childrens = React.Children.toArray(element.props.children)\n    .filter(onlyMeaningfulChildren)\n    .map(child => parseReactElement(child, options));\n\n  if (supportFragment && element.type === Fragment) {\n    return createReactFragmentTreeNode(key, childrens);\n  }\n\n  return createReactElementTreeNode(\n    displayName,\n    props,\n    defaultProps,\n    childrens\n  );\n};\n\nexport default parseReactElement;\n","import type { Options } from './../options';\n\nfunction noRefCheck() {}\n\nexport const inlineFunction = (fn: any): string =>\n  fn\n    .toString()\n    .split('\\n')\n    .map(line => line.trim())\n    .join('');\n\nexport const preserveFunctionLineBreak = (fn: any): string => fn.toString();\n\nconst defaultFunctionValue = inlineFunction;\n\nexport default (fn: Function, options: Options): string => {\n  const { functionValue = defaultFunctionValue, showFunctions } = options;\n  if (!showFunctions && functionValue === defaultFunctionValue) {\n    return functionValue(noRefCheck);\n  }\n\n  return functionValue(fn);\n};\n","/* @flow */\n\nimport { isValidElement } from 'react';\nimport { prettyPrint } from '@base2/pretty-print-object';\nimport sortObject from './sortObject';\nimport parseReactElement from './../parser/parseReactElement';\nimport formatTreeNode from './formatTreeNode';\nimport formatFunction from './formatFunction';\nimport spacer from './spacer';\nimport type { Options } from './../options';\n\nexport default (\n  value: Object | Array<any>,\n  inline: boolean,\n  lvl: number,\n  options: Options\n): string => {\n  const normalizedValue = sortObject(value);\n\n  const stringifiedValue = prettyPrint(normalizedValue, {\n    transform: (currentObj, prop, originalResult) => {\n      const currentValue = currentObj[prop];\n\n      if (currentValue && isValidElement(currentValue)) {\n        return formatTreeNode(\n          parseReactElement(currentValue, options),\n          true,\n          lvl,\n          options\n        );\n      }\n\n      if (typeof currentValue === 'function') {\n        return formatFunction(currentValue, options);\n      }\n\n      return originalResult;\n    },\n  });\n\n  if (inline) {\n    return stringifiedValue\n      .replace(/\\s+/g, ' ')\n      .replace(/{ /g, '{')\n      .replace(/ }/g, '}')\n      .replace(/\\[ /g, '[')\n      .replace(/ ]/g, ']');\n  }\n\n  // Replace tabs with spaces, and add necessary indentation in front of each new line\n  return stringifiedValue\n    .replace(/\\t/g, spacer(1, options.tabStop))\n    .replace(/\\n([^$])/g, `\\n${spacer(lvl + 1, options.tabStop)}$1`);\n};\n","/* @flow */\n\nimport { isPlainObject } from 'is-plain-object';\nimport { isValidElement } from 'react';\nimport formatComplexDataStructure from './formatComplexDataStructure';\nimport formatFunction from './formatFunction';\nimport formatTreeNode from './formatTreeNode';\nimport type { Options } from './../options';\nimport parseReactElement from './../parser/parseReactElement';\n\nconst escape = (s: string): string => s.replace(/\"/g, '&quot;');\n\nconst formatPropValue = (\n  propValue: any,\n  inline: boolean,\n  lvl: number,\n  options: Options\n): string => {\n  if (typeof propValue === 'number') {\n    return `{${String(propValue)}}`;\n  }\n\n  if (typeof propValue === 'string') {\n    return `\"${escape(propValue)}\"`;\n  }\n\n  // > \"Symbols (new in ECMAScript 2015, not yet supported in Flow)\"\n  // @see: https://flow.org/en/docs/types/primitives/\n  // $FlowFixMe: Flow does not support Symbol\n  if (typeof propValue === 'symbol') {\n    const symbolDescription = propValue\n      .valueOf()\n      .toString()\n      .replace(/Symbol\\((.*)\\)/, '$1');\n\n    if (!symbolDescription) {\n      return `{Symbol()}`;\n    }\n\n    return `{Symbol('${symbolDescription}')}`;\n  }\n\n  if (typeof propValue === 'function') {\n    return `{${formatFunction(propValue, options)}}`;\n  }\n\n  if (isValidElement(propValue)) {\n    return `{${formatTreeNode(\n      parseReactElement(propValue, options),\n      true,\n      lvl,\n      options\n    )}}`;\n  }\n\n  if (propValue instanceof Date) {\n    if (isNaN(propValue.valueOf())) {\n      return `{new Date(NaN)}`;\n    }\n    return `{new Date(\"${propValue.toISOString()}\")}`;\n  }\n\n  if (isPlainObject(propValue) || Array.isArray(propValue)) {\n    return `{${formatComplexDataStructure(propValue, inline, lvl, options)}}`;\n  }\n\n  return `{${String(propValue)}}`;\n};\n\nexport default formatPropValue;\n","/* @flow */\n\nimport spacer from './spacer';\nimport formatPropValue from './formatPropValue';\nimport type { Options } from './../options';\n\nexport default (\n  name: string,\n  hasValue: boolean,\n  value: any,\n  hasDefaultValue: boolean,\n  defaultValue: any,\n  inline: boolean,\n  lvl: number,\n  options: Options\n): {\n  attributeFormattedInline: string,\n  attributeFormattedMultiline: string,\n  isMultilineAttribute: boolean,\n} => {\n  if (!hasValue && !hasDefaultValue) {\n    throw new Error(\n      `The prop \"${name}\" has no value and no default: could not be formatted`\n    );\n  }\n\n  const usedValue = hasValue ? value : defaultValue;\n\n  const { useBooleanShorthandSyntax, tabStop } = options;\n\n  const formattedPropValue = formatPropValue(usedValue, inline, lvl, options);\n\n  let attributeFormattedInline = ' ';\n  let attributeFormattedMultiline = `\\n${spacer(lvl + 1, tabStop)}`;\n  const isMultilineAttribute = formattedPropValue.includes('\\n');\n\n  if (\n    useBooleanShorthandSyntax &&\n    formattedPropValue === '{false}' &&\n    !hasDefaultValue\n  ) {\n    // If a boolean is false and not different from it's default, we do not render the attribute\n    attributeFormattedInline = '';\n    attributeFormattedMultiline = '';\n  } else if (useBooleanShorthandSyntax && formattedPropValue === '{true}') {\n    attributeFormattedInline += `${name}`;\n    attributeFormattedMultiline += `${name}`;\n  } else {\n    attributeFormattedInline += `${name}=${formattedPropValue}`;\n    attributeFormattedMultiline += `${name}=${formattedPropValue}`;\n  }\n\n  return {\n    attributeFormattedInline,\n    attributeFormattedMultiline,\n    isMultilineAttribute,\n  };\n};\n","/* @flow */\n\nimport { createStringTreeNode } from './../tree';\nimport type { TreeNode } from './../tree';\n\nexport default (\n  previousNodes: TreeNode[],\n  currentNode: TreeNode\n): TreeNode[] => {\n  const nodes = previousNodes.slice(\n    0,\n    previousNodes.length > 0 ? previousNodes.length - 1 : 0\n  );\n  const previousNode = previousNodes[previousNodes.length - 1];\n\n  if (\n    previousNode &&\n    (currentNode.type === 'string' || currentNode.type === 'number') &&\n    (previousNode.type === 'string' || previousNode.type === 'number')\n  ) {\n    nodes.push(\n      createStringTreeNode(\n        String(previousNode.value) + String(currentNode.value)\n      )\n    );\n  } else {\n    if (previousNode) {\n      nodes.push(previousNode);\n    }\n\n    nodes.push(currentNode);\n  }\n\n  return nodes;\n};\n","/* @flow */\n\nconst isKeyOrRefProps = (propName: string) => ['key', 'ref'].includes(propName);\n\nexport default (shouldSortUserProps: boolean) => (\n  props: string[]\n): string[] => {\n  const haveKeyProp = props.includes('key');\n  const haveRefProp = props.includes('ref');\n\n  const userPropsOnly = props.filter(oneProp => !isKeyOrRefProps(oneProp));\n\n  const sortedProps = shouldSortUserProps\n    ? [...userPropsOnly.sort()] // We use basic lexical order\n    : [...userPropsOnly];\n\n  if (haveRefProp) {\n    sortedProps.unshift('ref');\n  }\n\n  if (haveKeyProp) {\n    sortedProps.unshift('key');\n  }\n\n  return sortedProps;\n};\n","/* @flow */\n\nexport default function createPropFilter(\n  props: {},\n  filter: string[] | ((any, string) => boolean)\n) {\n  if (Array.isArray(filter)) {\n    return (key: string) => filter.indexOf(key) === -1;\n  } else {\n    return (key: string) => filter(props[key], key);\n  }\n}\n","/* @flow */\n\nimport spacer from './spacer';\nimport formatTreeNode from './formatTreeNode';\nimport formatProp from './formatProp';\nimport mergeSiblingPlainStringChildrenReducer from './mergeSiblingPlainStringChildrenReducer';\nimport sortPropsByNames from './sortPropsByNames';\nimport createPropFilter from './createPropFilter';\nimport type { Options } from './../options';\nimport type { ReactElementTreeNode } from './../tree';\n\nconst compensateMultilineStringElementIndentation = (\n  element,\n  formattedElement: string,\n  inline: boolean,\n  lvl: number,\n  options: Options\n) => {\n  const { tabStop } = options;\n\n  if (element.type === 'string') {\n    return formattedElement\n      .split('\\n')\n      .map((line, offset) => {\n        if (offset === 0) {\n          return line;\n        }\n\n        return `${spacer(lvl, tabStop)}${line}`;\n      })\n      .join('\\n');\n  }\n\n  return formattedElement;\n};\n\nconst formatOneChildren = (\n  inline: boolean,\n  lvl: number,\n  options: Options\n) => element =>\n  compensateMultilineStringElementIndentation(\n    element,\n    formatTreeNode(element, inline, lvl, options),\n    inline,\n    lvl,\n    options\n  );\n\nconst onlyPropsWithOriginalValue = (defaultProps, props) => propName => {\n  const haveDefaultValue = Object.keys(defaultProps).includes(propName);\n  return (\n    !haveDefaultValue ||\n    (haveDefaultValue && defaultProps[propName] !== props[propName])\n  );\n};\n\nconst isInlineAttributeTooLong = (\n  attributes: string[],\n  inlineAttributeString: string,\n  lvl: number,\n  tabStop: number,\n  maxInlineAttributesLineLength: ?number\n): boolean => {\n  if (!maxInlineAttributesLineLength) {\n    return attributes.length > 1;\n  }\n\n  return (\n    spacer(lvl, tabStop).length + inlineAttributeString.length >\n    maxInlineAttributesLineLength\n  );\n};\n\nconst shouldRenderMultilineAttr = (\n  attributes: string[],\n  inlineAttributeString: string,\n  containsMultilineAttr: boolean,\n  inline: boolean,\n  lvl: number,\n  tabStop: number,\n  maxInlineAttributesLineLength: ?number\n): boolean =>\n  (isInlineAttributeTooLong(\n    attributes,\n    inlineAttributeString,\n    lvl,\n    tabStop,\n    maxInlineAttributesLineLength\n  ) ||\n    containsMultilineAttr) &&\n  !inline;\n\nexport default (\n  node: ReactElementTreeNode,\n  inline: boolean,\n  lvl: number,\n  options: Options\n): string => {\n  const {\n    type,\n    displayName = '',\n    childrens,\n    props = {},\n    defaultProps = {},\n  } = node;\n\n  if (type !== 'ReactElement') {\n    throw new Error(\n      `The \"formatReactElementNode\" function could only format node of type \"ReactElement\". Given:  ${type}`\n    );\n  }\n\n  const {\n    filterProps,\n    maxInlineAttributesLineLength,\n    showDefaultProps,\n    sortProps,\n    tabStop,\n  } = options;\n\n  let out = `<${displayName}`;\n\n  let outInlineAttr = out;\n  let outMultilineAttr = out;\n  let containsMultilineAttr = false;\n\n  const visibleAttributeNames = [];\n\n  const propFilter = createPropFilter(props, filterProps);\n\n  Object.keys(props)\n    .filter(propFilter)\n    .filter(onlyPropsWithOriginalValue(defaultProps, props))\n    .forEach(propName => visibleAttributeNames.push(propName));\n\n  Object.keys(defaultProps)\n    .filter(propFilter)\n    .filter(() => showDefaultProps)\n    .filter(defaultPropName => !visibleAttributeNames.includes(defaultPropName))\n    .forEach(defaultPropName => visibleAttributeNames.push(defaultPropName));\n\n  const attributes = sortPropsByNames(sortProps)(visibleAttributeNames);\n\n  attributes.forEach(attributeName => {\n    const {\n      attributeFormattedInline,\n      attributeFormattedMultiline,\n      isMultilineAttribute,\n    } = formatProp(\n      attributeName,\n      Object.keys(props).includes(attributeName),\n      props[attributeName],\n      Object.keys(defaultProps).includes(attributeName),\n      defaultProps[attributeName],\n      inline,\n      lvl,\n      options\n    );\n\n    if (isMultilineAttribute) {\n      containsMultilineAttr = true;\n    }\n\n    outInlineAttr += attributeFormattedInline;\n    outMultilineAttr += attributeFormattedMultiline;\n  });\n\n  outMultilineAttr += `\\n${spacer(lvl, tabStop)}`;\n\n  if (\n    shouldRenderMultilineAttr(\n      attributes,\n      outInlineAttr,\n      containsMultilineAttr,\n      inline,\n      lvl,\n      tabStop,\n      maxInlineAttributesLineLength\n    )\n  ) {\n    out = outMultilineAttr;\n  } else {\n    out = outInlineAttr;\n  }\n\n  if (childrens && childrens.length > 0) {\n    const newLvl = lvl + 1;\n\n    out += '>';\n\n    if (!inline) {\n      out += '\\n';\n      out += spacer(newLvl, tabStop);\n    }\n\n    out += childrens\n      .reduce(mergeSiblingPlainStringChildrenReducer, [])\n      .map(formatOneChildren(inline, newLvl, options))\n      .join(!inline ? `\\n${spacer(newLvl, tabStop)}` : '');\n\n    if (!inline) {\n      out += '\\n';\n      out += spacer(newLvl - 1, tabStop);\n    }\n    out += `</${displayName}>`;\n  } else {\n    if (\n      !isInlineAttributeTooLong(\n        attributes,\n        outInlineAttr,\n        lvl,\n        tabStop,\n        maxInlineAttributesLineLength\n      )\n    ) {\n      out += ' ';\n    }\n\n    out += '/>';\n  }\n\n  return out;\n};\n","/* @flow */\n\nimport type { Key } from 'react';\nimport formatReactElementNode from './formatReactElementNode';\nimport type { Options } from './../options';\nimport type {\n  ReactElementTreeNode,\n  ReactFragmentTreeNode,\n  TreeNode,\n} from './../tree';\n\nconst REACT_FRAGMENT_TAG_NAME_SHORT_SYNTAX = '';\nconst REACT_FRAGMENT_TAG_NAME_EXPLICIT_SYNTAX = 'React.Fragment';\n\nconst toReactElementTreeNode = (\n  displayName: string,\n  key: ?Key,\n  childrens: TreeNode[]\n): ReactElementTreeNode => {\n  let props = {};\n  if (key) {\n    props = { key };\n  }\n\n  return {\n    type: 'ReactElement',\n    displayName,\n    props,\n    defaultProps: {},\n    childrens,\n  };\n};\n\nconst isKeyedFragment = ({ key }: ReactFragmentTreeNode) => Boolean(key);\nconst hasNoChildren = ({ childrens }: ReactFragmentTreeNode) =>\n  childrens.length === 0;\n\nexport default (\n  node: ReactFragmentTreeNode,\n  inline: boolean,\n  lvl: number,\n  options: Options\n): string => {\n  const { type, key, childrens } = node;\n\n  if (type !== 'ReactFragment') {\n    throw new Error(\n      `The \"formatReactFragmentNode\" function could only format node of type \"ReactFragment\". Given: ${type}`\n    );\n  }\n\n  const { useFragmentShortSyntax } = options;\n\n  let displayName;\n  if (useFragmentShortSyntax) {\n    if (hasNoChildren(node) || isKeyedFragment(node)) {\n      displayName = REACT_FRAGMENT_TAG_NAME_EXPLICIT_SYNTAX;\n    } else {\n      displayName = REACT_FRAGMENT_TAG_NAME_SHORT_SYNTAX;\n    }\n  } else {\n    displayName = REACT_FRAGMENT_TAG_NAME_EXPLICIT_SYNTAX;\n  }\n\n  return formatReactElementNode(\n    toReactElementTreeNode(displayName, key, childrens),\n    inline,\n    lvl,\n    options\n  );\n};\n","/* @flow */\n\nimport formatReactElementNode from './formatReactElementNode';\nimport formatReactFragmentNode from './formatReactFragmentNode';\nimport type { Options } from './../options';\nimport type { TreeNode } from './../tree';\n\nconst jsxStopChars = ['<', '>', '{', '}'];\nconst shouldBeEscaped = (s: string) =>\n  jsxStopChars.some(jsxStopChar => s.includes(jsxStopChar));\n\nconst escape = (s: string) => {\n  if (!shouldBeEscaped(s)) {\n    return s;\n  }\n\n  return `{\\`${s}\\`}`;\n};\n\nconst preserveTrailingSpace = (s: string) => {\n  let result = s;\n  if (result.endsWith(' ')) {\n    result = result.replace(/^(.*?)(\\s+)$/, \"$1{'$2'}\");\n  }\n\n  if (result.startsWith(' ')) {\n    result = result.replace(/^(\\s+)(.*)$/, \"{'$1'}$2\");\n  }\n\n  return result;\n};\n\nexport default (\n  node: TreeNode,\n  inline: boolean,\n  lvl: number,\n  options: Options\n): string => {\n  if (node.type === 'number') {\n    return String(node.value);\n  }\n\n  if (node.type === 'string') {\n    return node.value\n      ? `${preserveTrailingSpace(escape(String(node.value)))}`\n      : '';\n  }\n\n  if (node.type === 'ReactElement') {\n    return formatReactElementNode(node, inline, lvl, options);\n  }\n\n  if (node.type === 'ReactFragment') {\n    return formatReactFragmentNode(node, inline, lvl, options);\n  }\n\n  throw new TypeError(`Unknow format type \"${node.type}\"`);\n};\n","/* @flow */\n\nimport formatTreeNode from './formatTreeNode';\nimport type { Options } from './../options';\nimport type { TreeNode } from './../tree';\n\nexport default (node: TreeNode, options: Options): string =>\n  formatTreeNode(node, false, 0, options);\n","/* @flow */\n\nimport formatTree from './formatter/formatTree';\nimport parseReactElement from './parser/parseReactElement';\nimport type { Element as ReactElement } from 'react';\nimport type { Options } from './options';\n\nconst reactElementToJsxString = (\n  element: ReactElement<any>,\n  {\n    filterProps = [],\n    showDefaultProps = true,\n    showFunctions = false,\n    functionValue,\n    tabStop = 2,\n    useBooleanShorthandSyntax = true,\n    useFragmentShortSyntax = true,\n    sortProps = true,\n    maxInlineAttributesLineLength,\n    displayName,\n  }: Options = {}\n) => {\n  if (!element) {\n    throw new Error('react-element-to-jsx-string: Expected a ReactElement');\n  }\n\n  const options = {\n    filterProps,\n    showDefaultProps,\n    showFunctions,\n    functionValue,\n    tabStop,\n    useBooleanShorthandSyntax,\n    useFragmentShortSyntax,\n    sortProps,\n    maxInlineAttributesLineLength,\n    displayName,\n  };\n\n  return formatTree(parseReactElement(element, options), options);\n};\n\nexport default reactElementToJsxString;\n\nexport {\n  inlineFunction,\n  preserveFunctionLineBreak,\n} from './formatter/formatFunction';\n"],"names":["times","tabStop","Array","fill","join","safeSortObject","value","seen","Date","RegExp","React","isValidElement","add","isArray","map","v","Object","keys","sort","reduce","result","key","has","sortObject","WeakSet","createStringTreeNode","type","createNumberTreeNode","createReactElementTreeNode","displayName","props","defaultProps","childrens","createReactFragmentTreeNode","supportFragment","Boolean","Fragment","getFunctionTypeName","functionType","name","getWrappedComponentDisplayName","Component","$$typeof","Memo","ForwardRef","render","getReactElementDisplayName","element","isForwardRef","isMemo","isContextConsumer","_context","isContextProvider","isLazy","isProfiler","isStrictMode","isSuspense","noChildren","propsValue","propName","onlyMeaningfulChildren","children","filterProps","originalProps","cb","filteredProps","filter","forEach","parseReactElement","options","displayNameFn","Error","ref","search","Children","toArray","child","noRefCheck","inlineFunction","fn","toString","split","line","trim","preserveFunctionLineBreak","defaultFunctionValue","functionValue","showFunctions","inline","lvl","normalizedValue","stringifiedValue","prettyPrint","transform","currentObj","prop","originalResult","currentValue","formatTreeNode","formatFunction","replace","spacer","escape","s","formatPropValue","propValue","String","symbolDescription","valueOf","isNaN","toISOString","isPlainObject","formatComplexDataStructure","hasValue","hasDefaultValue","defaultValue","usedValue","useBooleanShorthandSyntax","formattedPropValue","attributeFormattedInline","attributeFormattedMultiline","isMultilineAttribute","includes","previousNodes","currentNode","nodes","slice","length","previousNode","push","isKeyOrRefProps","shouldSortUserProps","haveKeyProp","haveRefProp","userPropsOnly","oneProp","sortedProps","unshift","createPropFilter","indexOf","compensateMultilineStringElementIndentation","formattedElement","offset","formatOneChildren","onlyPropsWithOriginalValue","haveDefaultValue","isInlineAttributeTooLong","attributes","inlineAttributeString","maxInlineAttributesLineLength","shouldRenderMultilineAttr","containsMultilineAttr","node","showDefaultProps","sortProps","out","outInlineAttr","outMultilineAttr","visibleAttributeNames","propFilter","defaultPropName","sortPropsByNames","attributeName","formatProp","newLvl","mergeSiblingPlainStringChildrenReducer","REACT_FRAGMENT_TAG_NAME_SHORT_SYNTAX","REACT_FRAGMENT_TAG_NAME_EXPLICIT_SYNTAX","toReactElementTreeNode","isKeyedFragment","hasNoChildren","useFragmentShortSyntax","formatReactElementNode","jsxStopChars","shouldBeEscaped","some","jsxStopChar","preserveTrailingSpace","endsWith","startsWith","formatReactFragmentNode","TypeError","reactElementToJsxString","formatTree"],"mappings":"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"}