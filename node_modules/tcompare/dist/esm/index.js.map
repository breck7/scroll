{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"AAAA;;;GAGG;AACH,OAAO,EAAE,MAAM,EAAiB,MAAM,aAAa,CAAA;AACnD,OAAO,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAA;AAC3C,OAAO,EAAE,GAAG,EAAE,MAAM,UAAU,CAAA;AAC9B,OAAO,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAA;AAC3C,OAAO,EAAE,WAAW,EAAE,MAAM,mBAAmB,CAAA;AAC/C,OAAO,EAAE,eAAe,EAAE,MAAM,wBAAwB,CAAA;AACxD,OAAO,EAAE,KAAK,EAAE,MAAM,YAAY,CAAA;AAClC,OAAO,EAAE,IAAI,EAAe,MAAM,WAAW,CAAA;AAC7C,OAAO,EAAE,MAAM,EAAE,MAAM,aAAa,CAAA;AAgBpC,MAAM,MAAM,GAAG,CAAiB,CAAI,EAAU,EAAE,CAAC,CAAC;IAChD,IAAI,EAAE,CAAC,CAAC,KAAK,EAAE;IACf,KAAK,EAAE,CAAC,CAAC,KAAK;CACf,CAAC,CAAA;AASF,MAAM,EAAE,GACN,CAAiB,GAAa,EAAE,EAAE,CAClC,CAAC,GAAQ,EAAE,OAAY,EAAE,UAA0B,EAAE,EAAE,EAAE,CACvD,MAAM,CACJ,IAAI,GAAG,CAAC,GAAG,EAAE;IACX,GAAG,OAAO;IACV,MAAM,EAAE,OAAO;IACf,MAAM,EAAE,SAAS;CAClB,CAAC,CACH,CAAA;AAEL,qDAAqD;AACrD,MAAM,CAAC,MAAM,MAAM,GAAG,CACpB,GAAQ,EACR,UAAyB,EAAE,EACnB,EAAE,CAAC,IAAI,MAAM,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC,KAAK,EAAE,CAAA;AAC7C,wDAAwD;AACxD,MAAM,CAAC,MAAM,IAAI,GAAG,EAAE,CAAC,IAAI,CAAC,CAAA;AAC5B,4CAA4C;AAC5C,MAAM,CAAC,MAAM,MAAM,GAAG,EAAE,CAAC,MAAM,CAAC,CAAA;AAChC,yCAAyC;AACzC,MAAM,CAAC,MAAM,GAAG,GAAG,EAAE,CAAC,GAAG,CAAC,CAAA;AAC1B,+CAA+C;AAC/C,MAAM,CAAC,MAAM,SAAS,GAAG,EAAE,CAAC,SAAS,CAAC,CAAA;AACtC,2CAA2C;AAC3C,MAAM,CAAC,MAAM,KAAK,GAAG,EAAE,CAAC,KAAK,CAAC,CAAA;AAC9B,+CAA+C;AAC/C,MAAM,CAAC,MAAM,SAAS,GAAG,EAAE,CAAC,SAAS,CAAC,CAAA;AACtC,iDAAiD;AACjD,MAAM,CAAC,MAAM,WAAW,GAAG,EAAE,CAAC,WAAW,CAAC,CAAA;AAC1C,qDAAqD;AACrD,MAAM,CAAC,MAAM,eAAe,GAAG,EAAE,CAAC,eAAe,CAAC,CAAA;AAElD,OAAO,EAAE,MAAM,EAAE,MAAM,aAAa,CAAA;AAEpC,OAAO,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAA;AAC3C,OAAO,EAAE,GAAG,EAAE,MAAM,UAAU,CAAA;AAC9B,OAAO,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAA;AAC3C,OAAO,EAAE,WAAW,EAAE,MAAM,mBAAmB,CAAA;AAC/C,OAAO,EAAE,eAAe,EAAE,MAAM,wBAAwB,CAAA;AACxD,OAAO,EAAE,KAAK,EAAE,MAAM,YAAY,CAAA;AAClC,OAAO,EAAE,IAAI,EAAE,MAAM,WAAW,CAAA;AAEhC,OAAO,EAAE,MAAM,EAAE,MAAM,aAAa,CAAA;AACpC,OAAO,EAAE,MAAM,EAAE,MAAM,aAAa,CAAA","sourcesContent":["/**\n * Export all implementation classes, and convenience methods for each\n * @module\n */\nimport { Format, FormatOptions } from './format.js'\nimport { HasStrict } from './has-strict.js'\nimport { Has } from './has.js'\nimport { MatchOnly } from './match-only.js'\nimport { MatchStrict } from './match-strict.js'\nimport { MatchOnlyStrict } from './match-only-strict.js'\nimport { Match } from './match.js'\nimport { Same, SameOptions } from './same.js'\nimport { Strict } from './strict.js'\n\n/**\n * The return value from all comparison functions.\n */\nexport interface Result {\n  /**\n   * Diff of formatted test object and expected pattern. Only shows\n   * properties which differ, not the entire object.\n   */\n  diff: string\n  /**\n   * whether or not the objects are a satisfying match\n   */\n  match: boolean\n}\nconst simple = <T extends Same>(o: T): Result => ({\n  diff: o.print(),\n  match: o.match,\n})\n\ntype Class<T> = { new (obj: any, options: SameOptions): T }\n\n/**\n * Options that can be used to set how diffs are formatted.\n */\nexport type CompareOptions = FormatOptions &\n  Pick<SameOptions, 'diffContext'>\nconst fn =\n  <T extends Same>(Cls: Class<T>) =>\n  (obj: any, pattern: any, options: CompareOptions = {}) =>\n    simple<T>(\n      new Cls(obj, {\n        ...options,\n        expect: pattern,\n        parent: undefined,\n      })\n    )\n\n/** format a value and return the formatted string */\nexport const format = (\n  obj: any,\n  options: FormatOptions = {}\n): string => new Format(obj, options).print()\n/** convenience method for {@link tcompare!same.Same} */\nexport const same = fn(Same)\n/** convenience method for {@link Strict} */\nexport const strict = fn(Strict)\n/** convenience method for {@link Has} */\nexport const has = fn(Has)\n/** convenience method for {@link HasStrict} */\nexport const hasStrict = fn(HasStrict)\n/** convenience method for {@link Match} */\nexport const match = fn(Match)\n/** convenience method for {@link MatchOnly} */\nexport const matchOnly = fn(MatchOnly)\n/** convenience method for {@link MatchStrict} */\nexport const matchStrict = fn(MatchStrict)\n/** convenience method for {@link MatchOnlyStrict} */\nexport const matchOnlyStrict = fn(MatchOnlyStrict)\n\nexport { Format } from './format.js'\nexport type { FormatOptions } from './format.js'\nexport { HasStrict } from './has-strict.js'\nexport { Has } from './has.js'\nexport { MatchOnly } from './match-only.js'\nexport { MatchStrict } from './match-strict.js'\nexport { MatchOnlyStrict } from './match-only-strict.js'\nexport { Match } from './match.js'\nexport { Same } from './same.js'\nexport type { SameOptions } from './same.js'\nexport { Strict } from './strict.js'\nexport { styles } from './styles.js'\nexport type { Style } from './styles.js'\n"]}