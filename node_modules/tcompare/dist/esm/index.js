/**
 * Export all implementation classes, and convenience methods for each
 * @module
 */
import { Format } from './format.js';
import { HasStrict } from './has-strict.js';
import { Has } from './has.js';
import { MatchOnly } from './match-only.js';
import { MatchStrict } from './match-strict.js';
import { MatchOnlyStrict } from './match-only-strict.js';
import { Match } from './match.js';
import { Same } from './same.js';
import { Strict } from './strict.js';
const simple = (o) => ({
    diff: o.print(),
    match: o.match,
});
const fn = (Cls) => (obj, pattern, options = {}) => simple(new Cls(obj, {
    ...options,
    expect: pattern,
    parent: undefined,
}));
/** format a value and return the formatted string */
export const format = (obj, options = {}) => new Format(obj, options).print();
/** convenience method for {@link tcompare!same.Same} */
export const same = fn(Same);
/** convenience method for {@link Strict} */
export const strict = fn(Strict);
/** convenience method for {@link Has} */
export const has = fn(Has);
/** convenience method for {@link HasStrict} */
export const hasStrict = fn(HasStrict);
/** convenience method for {@link Match} */
export const match = fn(Match);
/** convenience method for {@link MatchOnly} */
export const matchOnly = fn(MatchOnly);
/** convenience method for {@link MatchStrict} */
export const matchStrict = fn(MatchStrict);
/** convenience method for {@link MatchOnlyStrict} */
export const matchOnlyStrict = fn(MatchOnlyStrict);
export { Format } from './format.js';
export { HasStrict } from './has-strict.js';
export { Has } from './has.js';
export { MatchOnly } from './match-only.js';
export { MatchStrict } from './match-strict.js';
export { MatchOnlyStrict } from './match-only-strict.js';
export { Match } from './match.js';
export { Same } from './same.js';
export { Strict } from './strict.js';
export { styles } from './styles.js';
//# sourceMappingURL=index.js.map