/// <reference types="node" />
import type { ReactNode } from 'react';
import type { Format } from './format.js';
export type StyleType = 'pretty' | 'js' | 'tight';
/**
 * A set of functions defining how various sorts of things get converted
 * into strings.
 */
export interface Style {
    /** a function, optionally with a class name */
    fn: (fn: Function | ((...a: any[]) => any), cls: string) => string;
    /** an empty `Set` */
    setEmpty: (cls: string) => string;
    /** start of a `Set` */
    setHead: (cls: string) => string;
    /** end of a `Set` */
    setTail: (indent: string) => string;
    /** separator between entries in a `Set` */
    setEntrySep: () => string;
    /** an empty `Map` */
    mapEmpty: (cls: string) => string;
    /** start of a `Map` */
    mapHead: (cls: string) => string;
    /** end of a `Map` */
    mapTail: (indent: string) => string;
    /** start of a key in a `Map` */
    mapKeyStart: () => string;
    /** separator between key and value in a `Map` */
    mapKeyValSep: () => string;
    /** separator between entries in a `Map` */
    mapEntrySep: () => string;
    /** what to print when we encounter a circular reference */
    circular: (node: Format) => string;
    /** how to print node identifiers for circular references */
    nodeId: (id: number) => string;
    /** an empty `Error` object */
    errorEmpty: (er: Error, cls: string) => string;
    /** start of an `Error` object */
    errorHead: (er: (Error | {
        name?: string;
        message?: string;
    }) & {
        generatedMessage?: string;
    }, cls: string) => string;
    /** end of an `Error` object */
    errorTail: (indent: string) => string;
    /** empty JavaScript object */
    pojoEmpty: (cls: string) => string;
    /** start of a JavaScript object */
    pojoHead: (cls: string) => string;
    /** end of a JavaScript object */
    pojoTail: (indent: string) => string;
    /** separator between key and value in a JavaScript object */
    pojoKeyValSep: () => string;
    /** separator between entries in a JavaScript object */
    pojoEntrySep: () => string;
    /** an empty `Array` */
    arrayEmpty: (cls: string) => string;
    /** start of an `Array` */
    arrayHead: (cls: string) => string;
    /** end of an `Array` */
    arrayTail: (indent: string) => string;
    /** separator between entries in an `Array` */
    arrayEntrySep: () => string;
    /**
     * how many bytes of a `Buffer` to show per line. can be overridden by
     * the Format constructor options.
     * */
    bufferChunkSize: number;
    /** an empty `Buffer` */
    bufferEmpty: () => string;
    /** start of a short `Buffer` */
    bufferStart: () => string;
    /** contents of a short `Buffer` */
    bufferBody: (buf: Buffer) => string;
    /** end of a short `Buffer` */
    bufferEnd: (buf: Buffer) => string;
    /** start of a long `Buffer` */
    bufferHead: () => string;
    /** line numbers to print for lines in a long `Buffer` */
    bufferKey: (i: number) => string;
    /** line of bytes in a long `Buffer` */
    bufferLine: (buf: Buffer, chunkSize: number) => string;
    /** separator between lines in a long `Buffer` */
    bufferLineSep: () => string;
    /** end of a long `Buffer` */
    bufferTail: (indent: string) => string;
    /** separator between line number and contents of a long `Buffer` */
    bufferKeySep: () => string;
    /** a react element */
    reactElement?: (node: ReactNode) => string;
    /** an empty string */
    stringEmpty: () => string;
    /** a string that fits on one line */
    stringOneLine: (str: string) => string;
    /** start of a long string */
    stringHead: () => string;
    /** separator between lines of a long string */
    stringLineSep: () => string;
    /** each line of a long string */
    stringLine: (str: string) => string;
    /** end of a long string */
    stringTail: (indent: string) => string;
    /** printing symbols */
    symbol: (method: string, key: string) => string;
    /** indicator as to whether this style is suitable for use in diffs */
    diffable: boolean;
    /** beginning of a thing being printed */
    start: (indent: string, key: string, sep: string) => string;
}
export declare const styles: {
    [style in StyleType]: Style;
};
//# sourceMappingURL=styles.d.ts.map