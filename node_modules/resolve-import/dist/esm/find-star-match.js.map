{"version":3,"file":"find-star-match.js","sourceRoot":"","sources":["../../src/find-star-match.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AACH,MAAM,CAAC,MAAM,aAAa,GAAG,CAC3B,CAAS,EACT,GAAwB,EACC,EAAE;IAC3B,wCAAwC;IACxC,MAAM,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC;SAC9B,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,IAAI,CAAC,CAAC,MAAM,CAAC;SACjC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,MAAM,CAAC;SACnC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;SAC3B,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAE,CAAc,CAAC,MAAM,KAAK,CAAC,CAG9C,CAAA;IAEH,KAAK,MAAM,CAAC,GAAG,EAAE,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,IAAI,QAAQ,EAAE;QAC7C,IAAI,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;YAC7C,MAAM,GAAG,GAAG,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC,CAAA;YAC/D,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAAA;SAClB;KACF;IAED,OAAO,IAAI,CAAA;AACb,CAAC,CAAA","sourcesContent":["/**\n * Given an object with string keys possibly containing *, and a test\n * string, return the matching key, and the section that the star should\n * expand to when matching against the test string.\n */\nexport const findStarMatch = (\n  s: string,\n  obj: Record<string, any>\n): [string, string] | null => {\n  // longest pattern matches take priority\n  const patterns = Object.keys(obj)\n    .filter(p => p.length <= s.length)\n    .sort((a, b) => b.length - a.length)\n    .map(p => [p, p.split('*')])\n    .filter(([, p]) => (p as string[]).length === 2) as [\n    string,\n    [string, string]\n  ][]\n\n  for (const [key, [before, after]] of patterns) {\n    if (s.startsWith(before) && s.endsWith(after)) {\n      const mid = s.substring(before.length, s.length - after.length)\n      return [key, mid]\n    }\n  }\n\n  return null\n}\n"]}