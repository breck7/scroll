{"version":3,"file":"find-dep-package.js","sourceRoot":"","sources":["../../src/find-dep-package.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,aAAa,CAAA;AAC5C,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,GAAG,EAAE,MAAM,MAAM,CAAA;AAC5C,OAAO,EAAE,MAAM,EAAE,MAAM,cAAc,CAAA;AAErC,MAAM,SAAS,GAAG,KAAK,EAAE,CAAS,EAAoB,EAAE,CACtD,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CACV,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,WAAW,EAAE,EACtB,GAAG,EAAE,CAAC,KAAK,CACZ,CAAA;AAEH,MAAM,CAAC,MAAM,cAAc,GAAG,KAAK,EACjC,OAAsB,EACtB,UAAkB,EAClB,EAAE;IACF,kEAAkE;IAClE,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,EAAE;QAC7C,MAAM,EAAE,GAAG,OAAO,CAAC,GAAG,EAAE,cAAc,CAAC,GAAG,GAAG,CAAA;QAC7C,qDAAqD;QACrD,4DAA4D;QAC5D,gEAAgE;QAChE,iEAAiE;QACjE,MAAM,KAAK,GACT,OAAO,KAAK,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC,GAAG,GAAG,CAAA;QACtE,IAAI,MAAM,SAAS,CAAC,KAAK,CAAC,EAAE;YAC1B,IAAI;gBACF,OAAO,CAAC,MAAM,QAAQ,CAAC,KAAK,CAAC,CAAC,GAAG,GAAG,CAAA;gBACpC,6DAA6D;gBAC7D,gCAAgC;gBAChC,qBAAqB;aACtB;YAAC,MAAM,GAAE;YACR,oBAAoB;SACvB;KACF;AACH,CAAC,CAAA","sourcesContent":["import { realpath, stat } from 'fs/promises'\nimport { dirname, resolve, sep } from 'path'\nimport { walkUp } from 'walk-up-path'\n\nconst dirExists = async (f: string): Promise<boolean> =>\n  stat(f).then(\n    st => st.isDirectory(),\n    () => false\n  )\n\nexport const findDepPackage = async (\n  pkgName: string | null,\n  parentPath: string\n) => {\n  // starting from the dirname, try to find the nearest node_modules\n  for (const dir of walkUp(dirname(parentPath))) {\n    const nm = resolve(dir, 'node_modules') + sep\n    // if it's null, then we need the node_modules itself\n    // if it's '' then we use node_modules with an extra / on it\n    // thisis only relevant when generating the error message, since\n    // of course node_modules// is never going to be a valid package.\n    const ppath =\n      pkgName === null ? nm : (!pkgName ? nm : resolve(nm, pkgName)) + sep\n    if (await dirExists(ppath)) {\n      try {\n        return (await realpath(ppath)) + sep\n        // the direxists stat will avoid almost all throws that could\n        // occur here, but just in case.\n        /* c8 ignore start */\n      } catch {}\n        /* c8 ignore stop */\n    }\n  }\n}\n"]}