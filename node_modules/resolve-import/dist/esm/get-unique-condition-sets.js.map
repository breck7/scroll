{"version":3,"file":"get-unique-condition-sets.js","sourceRoot":"","sources":["../../src/get-unique-condition-sets.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,wBAAwB,EAAE,MAAM,kCAAkC,CAAA;AAG3E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA+BG;AACH,MAAM,CAAC,MAAM,sBAAsB,GAAG,CACpC,cAAiC,EACrB,EAAE;IACd,MAAM,IAAI,GAAG,wBAAwB,CAAC,cAAc,CAAC,CAAA;IACrD,IAAI,OAAO,GAAe,EAAE,CAAA;IAC5B,KAAK,MAAM,CAAC,CAAC,EAAE,UAAU,CAAC,IAAI,IAAI,EAAE;QAClC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,iBAAiB,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,EAAE;YAC5D,OAAO,CAAC,IAAI,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,CAAA;SAC9B;KACF;IACD,OAAO,OAAO,CAAA;AAChB,CAAC,CAAA;AAED,MAAM,iBAAiB,GAAG,CAAC,GAAa,EAAE,GAAgB,EAAE,EAAE;IAC5D,IAAI,GAAG,CAAC,MAAM,KAAK,GAAG,CAAC,IAAI;QAAE,OAAO,KAAK,CAAA;IACzC,KAAK,MAAM,CAAC,IAAI,GAAG,EAAE;QACnB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;YAAE,OAAO,KAAK,CAAA;KAC9B;IACD,OAAO,IAAI,CAAA;AACb,CAAC,CAAA","sourcesContent":["import { getConditionalValuesList } from './get-conditional-values-list.js'\nimport { Exports, Imports } from './index.js'\n\n/**\n * Get the minimal set of conditions that can potentially produce different\n * resolution values for a given imports or exports object from a package\n * manifest.\n *\n * For example:\n *\n * ```json\n * {\n *   \".\": [{\"import\":[{\"types\":\"x.d.ts\"},\"x.mjs\"], \"require\":\"y.js\"}]\n *   \"./a\": {\"browser\":{\"require\":\"./a.js\"}},\n *   \"./b\": {\"browser\":\"./b.js\"},\n *   \"./c\": {\"require\":{\"browser\":\"./c.js\"}}\n * }\n * ```\n *\n * would return:\n * ```js\n * [\n *   ['import','types'],\n *   ['import'],\n *   ['require'],\n *   ['browser'],\n *   ['browser', 'require'],\n * ]\n * ```\n *\n * With the `['require', 'browser']` condition set omitted, as it is already\n * covered by `['browser', 'require']`.\n *\n * Condition ordering is arbitrary and not guaranteed to be consistent.\n */\nexport const getUniqueConditionSets = (\n  importsExports: Imports | Exports\n): string[][] => {\n  const list = getConditionalValuesList(importsExports)\n  let results: string[][] = []\n  for (const [_, conditions] of list) {\n    if (!results.some(arr => arrayIsEquivalent(arr, conditions))) {\n      results.push([...conditions])\n    }\n  }\n  return results\n}\n\nconst arrayIsEquivalent = (arr: string[], sup: Set<string>) => {\n  if (arr.length !== sup.size) return false\n  for (const c of arr) {\n    if (!sup.has(c)) return false\n  }\n  return true\n}\n"]}