{"version":3,"file":"resolve-all-exports.js","sourceRoot":"","sources":["../../src/resolve-all-exports.ts"],"names":[],"mappings":"AAAA;;;GAGG;AACH,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,MAAM,CAAA;AACvC,OAAO,EAAE,aAAa,EAAE,MAAM,KAAK,CAAA;AACnC,OAAO,EAAE,cAAc,EAAE,MAAM,aAAa,CAAA;AAC5C,OAAO,EAAE,mBAAmB,EAAE,MAAM,6BAA6B,CAAA;AAEjE,OAAO,EAAE,OAAO,EAAE,MAAM,eAAe,CAAA;AACvC,OAAO,EAAE,aAAa,EAAE,MAAM,qBAAqB,CAAA;AACnD,OAAO,EAAE,QAAQ,EAAE,MAAM,gBAAgB,CAAA;AACzC,OAAO,EAAE,MAAM,EAAE,MAAM,cAAc,CAAA;AAErC;;;;;;;;;;GAUG;AACH,MAAM,CAAC,MAAM,iBAAiB,GAAG,KAAK,EACpC,eAA6B,EAC7B,UAA6B,EAAE,EACQ,EAAE;IACzC,MAAM,MAAM,GAAG,MAAM,CAAC,eAAe,CAAC,CAAA;IACtC,MAAM,KAAK,GAAG,OAAO,CAAC,MAAM,CAAC,CAAA;IAE7B,MAAM,GAAG,GAAG,MAAM,OAAO,CAAC,MAAM,CAAC,CAAA;IACjC,IAAI,CAAC,GAAG,EAAE;QACR,MAAM,cAAc,CAAC,eAAe,EAAE,iBAAiB,CAAC,CAAA;KACzD;IAED,MAAM,OAAO,GAAiC,EAAE,CAAA;IAEhD,MAAM,EAAE,OAAO,EAAE,GAAG,GAAG,CAAA;IACvB,KAAK,MAAM,GAAG,IAAI,mBAAmB,CAAC,OAAO,CAAC,EAAE;QAC9C,IAAI,GAAG,CAAA;QAEP,gEAAgE;QAChE,wCAAwC;QACxC,qBAAqB;QACrB,IAAI;YACF,GAAG,GAAG,aAAa,CAAC,GAAG,EAAE,OAAkB,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,CAAC,CAAA;SACtE;QAAC,MAAM,GAAE;QACV,IAAI,CAAC,GAAG;YAAE,SAAQ;QAClB,oBAAoB;QAEpB,4CAA4C;QAC5C,qDAAqD;QACrD,wCAAwC;QACxC,MAAM,IAAI,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;QAC3B,MAAM,IAAI,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;QAC3B,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;YAC1C,KAAK,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,IAAI,MAAM,QAAQ,CACxC,IAAwB,EACxB,KAAK,CACN,EAAE;gBACD,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,aAAa,CAAC,MAAM,CAAC,CAAA;aACzD;SACF;aAAM;YACL,OAAO,CAAC,GAAG,CAAC,GAAG,aAAa,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAA;SAClD;KACF;IAED,OAAO,OAAO,CAAA;AAChB,CAAC,CAAA","sourcesContent":["/**\n * Exported as `'resolve-import/resolve-all-exports'`\n * @module\n */\nimport { dirname, resolve } from 'path'\nimport { pathToFileURL } from 'url'\nimport { invalidPackage } from './errors.js'\nimport { getNamedExportsList } from './get-named-exports-list.js'\nimport { Exports, ResolveImportOpts } from './index.js'\nimport { readPkg } from './read-pkg.js'\nimport { resolveExport } from './resolve-export.js'\nimport { starGlob } from './star-glob.js'\nimport { toPath } from './to-path.js'\n\n/**\n * Given a path or file URL to a package.json file, return an object where each\n * possible export path is mapped to the file URL that it would resolve to.\n *\n * Invalid exports are omitted. No errors are raised as long as the file is a\n * valid `package.json`.\n *\n * Note: in cases like `\"./x/*\": \"./file.js\"`, where the list of possible\n * import paths is unbounded, the returned object will contain `\"./x/*\"` as the\n * key, since there's no way to expand that to every possible match.\n */\nexport const resolveAllExports = async (\n  packageJsonPath: string | URL,\n  options: ResolveImportOpts = {}\n): Promise<Record<string, string | URL>> => {\n  const pjPath = toPath(packageJsonPath)\n  const pjDir = dirname(pjPath)\n\n  const pkg = await readPkg(pjPath)\n  if (!pkg) {\n    throw invalidPackage(packageJsonPath, resolveAllExports)\n  }\n\n  const results: Record<string, string | URL> = {}\n\n  const { exports } = pkg\n  for (const sub of getNamedExportsList(exports)) {\n    let res\n\n    // this can't shouldn't be able to actually throw, because we're\n    // pulling the list from the set itself.\n    /* c8 ignore start */\n    try {\n      res = resolveExport(sub, exports as Exports, pjPath, pjPath, options)\n    } catch {}\n    if (!res) continue\n    /* c8 ignore stop */\n\n    // if it contains a *, then we have to glob,\n    // in package.json exports * is actually **, but only\n    // relevant if there is exactly ONE star\n    const sres = res.split('*')\n    const ssub = sub.split('*')\n    if (sres.length === 2 && ssub.length === 2) {\n      for (const [rep, target] of await starGlob(\n        sres as [string, string],\n        pjDir\n      )) {\n        results[ssub[0] + rep + ssub[1]] = pathToFileURL(target)\n      }\n    } else {\n      results[sub] = pathToFileURL(resolve(pjDir, res))\n    }\n  }\n\n  return results\n}\n"]}