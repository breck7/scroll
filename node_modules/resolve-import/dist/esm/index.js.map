{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"AAAA,cAAc,iCAAiC,CAAA;AAC/C,cAAc,yBAAyB,CAAA;AACvC,cAAc,gCAAgC,CAAA;AAC9C,cAAc,0BAA0B,CAAA;AACxC,cAAc,0BAA0B,CAAA;AACxC,cAAc,gCAAgC,CAAA;AAC9C,cAAc,gCAAgC,CAAA;AAC9C,cAAc,qBAAqB,CAAA","sourcesContent":["export * from './get-all-conditional-values.js'\nexport * from './get-all-conditions.js'\nexport * from './get-unique-condition-sets.js'\nexport * from './is-relative-require.js'\nexport * from './resolve-all-exports.js'\nexport * from './resolve-all-local-imports.js'\nexport * from './resolve-conditional-value.js'\nexport * from './resolve-import.js'\n\nexport interface ResolveImportOpts {\n  /**\n   * Used when resolves take multiple steps through dependencies.\n   *\n   * @internal\n   */\n  originalParent?: string\n\n  /**\n   * List of conditions to resolve. Defaults to ['import', 'node'].\n   *\n   * If set to ['require', 'node'], then this is functionally equivalent to\n   * `require.resolve()`.\n   *\n   * 'default' is always allowed.\n   */\n  conditions?: string[]\n}\n\nexport type ConditionalValueObject = {\n  [k: string]: ConditionalValue\n}\nexport type ConditionalValue =\n  | null\n  | string\n  | ConditionalValueObject\n  | ConditionalValue[]\n\nexport type ExportsSubpaths = {\n  [path: string]: ConditionalValue\n}\n\nexport type Exports = Exclude<ConditionalValue, null> | ExportsSubpaths\n\nexport type Imports = {\n  [path: string]: ConditionalValue\n}\n"]}