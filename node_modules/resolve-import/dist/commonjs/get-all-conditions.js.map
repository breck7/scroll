{"version":3,"file":"get-all-conditions.js","sourceRoot":"","sources":["../../src/get-all-conditions.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Exported as `'resolve-import/get-all-conditions'`\n * @module\n */\nimport { ConditionalValue, Exports, Imports } from './index.js'\n\n/**\n * Given an `exports` or `imports` value from a package, return the list of\n * conditions that it is sensitive to.\n *\n * `default` is not included in the returned list, since that's always\n * effectively relevant.\n *\n * Note that a condition being returned by this method does not mean\n * that the export/import object actually has a *target* for that condition,\n * since it may map to `null`, be nested under another condition, etc. But it\n * does potentially have some kind of conditional behavior for all the\n * conditions returned.\n *\n * Ordering of returned conditions is arbitrary, and does not imply precedence\n * or object shape.\n */\nexport const getAllConditions = (\n  importsExports: Imports | Exports\n): string[] => {\n  if (\n    !!importsExports &&\n    typeof importsExports === 'object' &&\n    !Array.isArray(importsExports)\n  ) {\n    let subs: string | undefined = undefined\n    const conditions: string[] = []\n    for (const [k, v] of Object.entries(importsExports)) {\n      /* c8 ignore start */\n      if (!k) continue\n      /* c8 ignore stop */\n      if (subs === undefined) {\n        if (!k.startsWith('#') && k !== '.' && !k.startsWith('./')) {\n          return getAllConditionsFromCond(\n            importsExports as ConditionalValue\n          )\n        }\n        subs = k.charAt(0)\n      }\n      if (\n        // imports have to be #<something>\n        (subs === '#' && (k === '#' || !k.startsWith('#'))) ||\n        // exports can be ./<something> or .\n        (subs === '.' && k !== '.' && !k.startsWith('./'))\n      ) {\n        throw new Error(\n          `invalid ${\n            subs === '.' ? 'exports' : 'imports'\n          } object, all keys ` + `must start with ${subs}. Found ${k}.`\n        )\n      }\n      conditions.push(...getAllConditionsFromCond(v))\n    }\n    return [...new Set(conditions)]\n  }\n\n  return getAllConditionsFromCond(importsExports as ConditionalValue)\n}\n\nconst getAllConditionsFromCond = (cond?: ConditionalValue): string[] => {\n  if (!cond || typeof cond === 'string') return []\n  if (Array.isArray(cond)) {\n    const conditions: string[] = []\n    for (const e of cond) {\n      if (!e || typeof e === 'string') break\n      conditions.push(...getAllConditionsFromCond(e))\n    }\n    return [...new Set(conditions)]\n  }\n  const conditions: string[] = []\n  for (const [k, v] of Object.entries(cond)) {\n    if (k.startsWith('#') || k === '.' || k.startsWith('./')) {\n      throw new Error(`Expected valid import condition, got: ${k}`)\n    }\n    // anything after 'default' isn't relevant\n    conditions.push(...getAllConditionsFromCond(v))\n    if (k === 'default') break\n    else conditions.push(k)\n  }\n  return [...new Set(conditions)]\n}\n"]}