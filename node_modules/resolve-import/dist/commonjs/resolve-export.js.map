{"version":3,"file":"resolve-export.js","sourceRoot":"","sources":["../../src/resolve-export.ts"],"names":[],"mappings":";;;AAAA,2CAAgD;AAChD,6DAAoD;AAOpD,iFAAwE;AAExE;;;GAGG;AACI,MAAM,aAAa,GAAG,CAC3B,GAAW,EACX,GAAY,EACZ,EAAU,EACV,IAAY,EACZ,OAA0B,EAClB,EAAE;IACV,MAAM,CAAC,GAAG,CAAC,GAAG;QACZ,CAAC,CAAC,GAAG;QACL,CAAC,CAAC,GAAG,KAAK,GAAG,IAAI,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC;YACrC,CAAC,CAAC,GAAG;YACL,CAAC,CAAC,KAAK,GAAG,EAAE,CAAA;IAEd,IAAI,OAAO,GAAG,KAAK,QAAQ,IAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;QACjD,MAAM,GAAG,GAAG,CAAC,KAAK,GAAG,IAAI,IAAA,sDAAuB,EAAC,GAAG,EAAE,OAAO,CAAC,CAAA;QAC9D,IAAI,CAAC,GAAG;YAAE,MAAM,IAAA,8BAAkB,EAAC,CAAC,EAAE,EAAE,EAAE,IAAI,CAAC,CAAA;QAC/C,OAAO,GAAG,CAAA;KACX;IAED,kEAAkE;IAClE,4DAA4D;IAC5D,IAAI,CAAC,KAAK,GAAG,EAAE;QACb,MAAM,GAAG,GAAG,IAAA,sDAAuB,EAAC,GAAG,EAAE,OAAO,CAAC,CAAA;QACjD,IAAI,GAAG;YAAE,OAAO,GAAG,CAAA;KACpB;IAED,mDAAmD;IACnD,MAAM,EAAE,GAAG,GAAsB,CAAA;IAEjC,sCAAsC;IACtC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAA;IACf,IAAI,CAAC,KAAK,SAAS,EAAE;QACnB,MAAM,GAAG,GAAG,IAAA,sDAAuB,EAAC,CAAC,EAAE,OAAO,CAAC,CAAA;QAC/C,IAAI,CAAC,GAAG;YAAE,MAAM,IAAA,8BAAkB,EAAC,CAAC,EAAE,EAAE,EAAE,IAAI,CAAC,CAAA;QAC/C,OAAO,GAAG,CAAA;KACX;IAED,MAAM,EAAE,GAAG,IAAA,kCAAa,EAAC,CAAC,EAAE,EAAE,CAAC,CAAA;IAC/B,IAAI,EAAE,EAAE;QACN,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,CAAA;QACrB,MAAM,GAAG,GAAG,IAAA,sDAAuB,EACjC,EAAE,CAAC,GAAG,CAAqB,EAC3B,OAAO,CACR,CAAA;QACD,IAAI,CAAC,GAAG;YAAE,MAAM,IAAA,8BAAkB,EAAC,CAAC,EAAE,EAAE,EAAE,IAAI,CAAC,CAAA;QAC/C,OAAO,GAAG,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAA;KAC/B;IAED,uBAAuB;IACvB,MAAM,IAAA,8BAAkB,EAAC,CAAC,EAAE,EAAE,EAAE,IAAI,CAAC,CAAA;AACvC,CAAC,CAAA;AAlDY,QAAA,aAAa,iBAkDzB","sourcesContent":["import { subpathNotExported } from './errors.js'\nimport { findStarMatch } from './find-star-match.js'\nimport {\n  ConditionalValue,\n  Exports,\n  ExportsSubpaths,\n  ResolveImportOpts,\n} from './index.js'\nimport { resolveConditionalValue } from './resolve-conditional-value.js'\n\n/**\n * Resolve an export that might be a string, subpath exports, exports value\n * object, or array of strings and exports value objects\n */\nexport const resolveExport = (\n  sub: string,\n  exp: Exports,\n  pj: string,\n  from: string,\n  options: ResolveImportOpts\n): string => {\n  const s = !sub\n    ? '.'\n    : sub === '.' || sub.startsWith('./')\n    ? sub\n    : `./${sub}`\n\n  if (typeof exp === 'string' || Array.isArray(exp)) {\n    const res = s === '.' && resolveConditionalValue(exp, options)\n    if (!res) throw subpathNotExported(s, pj, from)\n    return res\n  }\n\n  // now it must be a set of named exports or an export value object\n  // first try to resolve as a value object, if that's allowed\n  if (s === '.') {\n    const res = resolveConditionalValue(exp, options)\n    if (res) return res\n  }\n\n  // otherwise the only way to match is with subpaths\n  const es = exp as ExportsSubpaths\n\n  // if we have an exact match, use that\n  const e = es[s]\n  if (e !== undefined) {\n    const res = resolveConditionalValue(e, options)\n    if (!res) throw subpathNotExported(s, pj, from)\n    return res\n  }\n\n  const sm = findStarMatch(s, es)\n  if (sm) {\n    const [key, mid] = sm\n    const res = resolveConditionalValue(\n      es[key] as ConditionalValue,\n      options\n    )\n    if (!res) throw subpathNotExported(s, pj, from)\n    return res.replace(/\\*/g, mid)\n  }\n\n  // did not find a match\n  throw subpathNotExported(s, pj, from)\n}\n"]}