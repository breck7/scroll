{"version":3,"file":"resolve-import.js","sourceRoot":"","sources":["../../src/resolve-import.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Exported as `'resolve-import/resolve-import'`\n * @module\n */\nimport { realpath } from 'fs/promises'\nimport { isBuiltin } from 'module'\nimport { basename, dirname, isAbsolute, resolve } from 'path'\nimport { fileURLToPath, pathToFileURL } from 'url'\nimport {\n  moduleNotFound,\n  relativeImportWithoutParentURL,\n} from './errors.js'\nimport { fileExists } from './file-exists.js'\nimport { ResolveImportOpts } from './index.js'\nimport { isRelativeRequire } from './is-relative-require.js'\nimport { resolveDependencyExports } from './resolve-dependency-export.js'\nimport { resolvePackageImport } from './resolve-package-import.js'\nimport { toFileURL } from './to-file-url.js'\nimport { toPath } from './to-path.js'\n\n// It's pretty common to resolve against, eg, cwd + '/x', since we might not\n// know the actual file that it's being loaded from, and want to resolve what\n// a dep WOULD be from a given path. This allows us to realpath that directory,\n// without requiring that the file exist.\nconst realpathParentDir = async (path: string | URL) => {\n  path = toPath(path)\n  return resolve(await realpath(dirname(path)), basename(path))\n}\n\n/**\n * Resolve an import URL or string as if it were coming from the\n * module at parentURL.\n *\n * Returns a string for node builtin modules, and a file:// URL\n * object for anything resolved on disk.\n *\n * If the resolution is impossible, then an error will be raised, which\n * closely matches the errors raised by Node when failing for the same\n * reason.\n */\nexport const resolveImport = async (\n  /** the thing being imported */\n  url: string | URL,\n  /**\n   * the place the import() would be coming from. Required for relative\n   * imports.\n   */\n  parentURL: string | URL | undefined = undefined,\n  options: ResolveImportOpts = {}\n): Promise<URL | string> => {\n  // already resolved, just check that it exists\n  if (typeof url === 'string' && url.startsWith('file://')) {\n    url = new URL(url)\n  }\n  if (typeof url === 'object') {\n    if (!(await fileExists(url))) {\n      throw moduleNotFound(String(url), String(parentURL))\n    }\n    const rp = await realpath(toPath(url))\n    return rp !== fileURLToPath(url) ? pathToFileURL(rp) : url\n  }\n\n  const pu = parentURL\n    ? toFileURL(await realpathParentDir(parentURL))\n    : undefined\n\n  if (isRelativeRequire(url)) {\n    if (!pu) {\n      throw relativeImportWithoutParentURL(url, parentURL)\n    }\n    const u = new URL(url, pu)\n    if (!(await fileExists(u))) {\n      throw moduleNotFound(url, String(parentURL))\n    }\n    return pathToFileURL(await realpath(new URL(url, pu)))\n  }\n\n  if (isAbsolute(url)) {\n    if (!(await fileExists(url))) {\n      throw moduleNotFound(url, String(parentURL))\n    }\n    return pathToFileURL(await realpath(url))\n  }\n\n  if (isBuiltin(String(url))) {\n    return String(url)\n  }\n\n  // ok, we have to resolve it. some kind of bare dep import,\n  // either a package name resolving to module or main, or a named export.\n  const parentPath: string = toPath(\n    parentURL || resolve(await realpath(process.cwd()), 'x')\n  )\n  const opts = {\n    ...options,\n    originalParent: String(options.originalParent || parentPath),\n  }\n  if (url) {\n    return resolvePackageImport(url, parentPath, opts)\n  } else {\n    return resolveDependencyExports(url, parentPath, opts)\n  }\n}\n"]}