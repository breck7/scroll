{"version":3,"file":"resolve-conditional-value.js","sourceRoot":"","sources":["../../src/resolve-conditional-value.ts"],"names":[],"mappings":";;;AAMA;;;GAGG;AACI,MAAM,uBAAuB,GAAG,CACrC,GAAqB,EACrB,OAA0B,EACX,EAAE;IACjB,MAAM,EAAE,UAAU,GAAG,CAAC,QAAQ,EAAE,MAAM,CAAC,EAAE,GAAG,OAAO,CAAA;IACnD,IAAI,GAAG,KAAK,IAAI,IAAI,OAAO,GAAG,KAAK,QAAQ;QAAE,OAAO,GAAG,CAAA;IACvD,IAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;QACtB,KAAK,MAAM,CAAC,IAAI,GAAG,EAAE;YACnB,MAAM,CAAC,GAAG,IAAA,+BAAuB,EAAC,CAAC,EAAE,OAAO,CAAC,CAAA;YAC7C,IAAI,CAAC;gBAAE,OAAO,CAAC,CAAA;SAChB;QACD,OAAO,IAAI,CAAA;KACZ;IACD,KAAK,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;QACxC,IAAI,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,SAAS,EAAE;YAC7C,OAAO,IAAA,+BAAuB,EAAC,CAAC,EAAE,OAAO,CAAC,CAAA;SAC3C;KACF;IACD,OAAO,IAAI,CAAA;AACb,CAAC,CAAA;AAnBY,QAAA,uBAAuB,2BAmBnC","sourcesContent":["/**\n * Exported as `'resolve-import/resolve-conditional-value'`\n * @module\n */\nimport { ConditionalValue, ResolveImportOpts } from './index.js'\n\n/**\n * find the first match for string, import, node, or default\n * at this point, we know we're on the right subpath already\n */\nexport const resolveConditionalValue = (\n  exp: ConditionalValue,\n  options: ResolveImportOpts\n): string | null => {\n  const { conditions = ['import', 'node'] } = options\n  if (exp === null || typeof exp === 'string') return exp\n  if (Array.isArray(exp)) {\n    for (const e of exp) {\n      const r = resolveConditionalValue(e, options)\n      if (r) return r\n    }\n    return null\n  }\n  for (const [k, v] of Object.entries(exp)) {\n    if (conditions.includes(k) || k === 'default') {\n      return resolveConditionalValue(v, options)\n    }\n  }\n  return null\n}\n"]}