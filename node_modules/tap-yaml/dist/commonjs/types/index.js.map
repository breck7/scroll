{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/types/index.ts"],"names":[],"mappings":";;;AAEA,2CASmB;AAEnB,uCAAgC;AAChC,iDAA0C;AAE1C,mEAAmE;AACnE,oCAAoC;AACpC,MAAM,CAAC,GAAS;IACd,mBAAM;IACN,yBAAY;IACZ,mBAAM;IACN,mBAAM;IACN,uBAAU;IACV,kBAAK;IACL,qBAAQ;IACR,wBAAW;IACX,wBAAS;IACT,cAAI;IACJ,MAAM;IACN,KAAK;IACL,QAAQ;CACT,CAAA;AACM,MAAM,UAAU,GAAG,CAAC,IAAU,EAAE,EAAE,CAAC,CAAC,GAAG,IAAI,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;AAAzD,QAAA,UAAU,cAA+C","sourcesContent":["import { Tags } from 'yaml'\n\nimport {\n  classTag,\n  error,\n  functionTag,\n  nullobject,\n  regexp,\n  sharedSymbol,\n  symbol,\n  bigint,\n} from 'yaml-types'\n\nimport { date } from './date.js'\nimport { timestamp } from './timestamp.js'\n\n// prepend our custom tags so that they take priority over anything\n// enabled by default in the schema.\nconst t: Tags = [\n  regexp,\n  sharedSymbol,\n  symbol,\n  bigint,\n  nullobject,\n  error,\n  classTag,\n  functionTag,\n  timestamp,\n  date,\n  'omap',\n  'set',\n  'binary',\n]\nexport const customTags = (tags: Tags) => [...new Set(t.concat(tags))]\n"]}