{"version":3,"file":"child-loader.js","sourceRoot":"","sources":["../../src/child/child-loader.ts"],"names":[],"mappings":";;;;AACA,gCAAiD;AACjD,6BAA0B;AAC1B,gCAAmC;AACnC,kCAAuC;AACvC,iDAAuD;AAEvD,2EAA2E;AAC3E,6CAA6C;AAC7C,SAAgB,oBAAoB,CAAC,SAAiB;IACpD,wDAAwD;IACxD,IAAI,CAAC,IAAA,mBAAY,EAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC;QAAE,OAAO;IAE3D,MAAM,GAAG,GAAG,IAAI,SAAG,CAAC,SAAS,CAAC,CAAC;IAC/B,MAAM,aAAa,GAAG,GAAG,CAAC,YAAY,CAAC,GAAG,CAAC,wBAAS,CAAC,CAAC;IACtD,IAAI,CAAC,aAAa;QAAE,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;IAC7D,MAAM,KAAK,GAAG,IAAA,yBAAU,EAAC,aAAa,CAAC,CAAC;IACxC,KAAK,CAAC,gBAAgB,GAAG,IAAI,CAAC;IAC9B,KAAK,CAAC,cAAc,GAAG,IAAI,CAAC;IAC5B,IAAA,eAAS,EAAC,KAAK,CAAC,CAAC;AACnB,CAAC;AAXD,oDAWC;AAED,IAAI,KAAgD,CAAC;AAErD,gBAAgB;AAChB,SAAgB,aAAa,CAAC,MAAiD;IAC7E,KAAK,GAAG,MAAmD,CAAC;AAC9D,CAAC;AAFD,sCAEC;AAED,MAAM,KAAK,GAA8C;IACvD,OAAO,CAAC,GAAG,IAAgD;QACzD,OAAO,CAAC,KAAK,EAAE,OAAO,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;IAC9C,CAAC;IACD,IAAI,CAAC,GAAG,IAA6C;QACnD,OAAO,CAAC,KAAK,EAAE,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;IAC3C,CAAC;IACD,SAAS,CAAC,GAAG,IAAkD;QAC7D,OAAO,CAAC,KAAK,EAAE,SAAS,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;IAChD,CAAC;IACD,eAAe,CAAC,GAAG,IAAwD;QACzE,OAAO,CAAC,KAAK,EAAE,eAAe,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;IACtD,CAAC;CACF,CAAC;AAEF,gBAAgB;AACH,KAAgD,IAAA,6BAAuB,EAAC,KAAK,CACrE,EADN,eAAO,eAAE,YAAI,YAAE,iBAAS,iBAAE,uBAAe,sBAClC","sourcesContent":["import type { NodeLoaderHooksAPI1, NodeLoaderHooksAPI2 } from '..';\nimport { filterHooksByAPIVersion } from '../esm';\nimport { URL } from 'url';\nimport { bootstrap } from '../bin';\nimport { versionGteLt } from '../util';\nimport { argPrefix, decompress } from './argv-payload';\n\n// On node v20, we cannot lateBind the hooks from outside the loader thread\n// so it has to be done in the loader thread.\nexport function bindFromLoaderThread(loaderURL: string) {\n  // If we aren't in a loader thread, then skip this step.\n  if (!versionGteLt(process.versions.node, '20.0.0')) return;\n\n  const url = new URL(loaderURL);\n  const base64Payload = url.searchParams.get(argPrefix);\n  if (!base64Payload) throw new Error('unexpected loader url');\n  const state = decompress(base64Payload);\n  state.isInChildProcess = true;\n  state.isLoaderThread = true;\n  bootstrap(state);\n}\n\nlet hooks: NodeLoaderHooksAPI1 & NodeLoaderHooksAPI2;\n\n/** @internal */\nexport function lateBindHooks(_hooks: NodeLoaderHooksAPI1 | NodeLoaderHooksAPI2) {\n  hooks = _hooks as NodeLoaderHooksAPI1 & NodeLoaderHooksAPI2;\n}\n\nconst proxy: NodeLoaderHooksAPI1 & NodeLoaderHooksAPI2 = {\n  resolve(...args: Parameters<NodeLoaderHooksAPI1['resolve']>) {\n    return (hooks?.resolve ?? args[2])(...args);\n  },\n  load(...args: Parameters<NodeLoaderHooksAPI2['load']>) {\n    return (hooks?.load ?? args[2])(...args);\n  },\n  getFormat(...args: Parameters<NodeLoaderHooksAPI1['getFormat']>) {\n    return (hooks?.getFormat ?? args[2])(...args);\n  },\n  transformSource(...args: Parameters<NodeLoaderHooksAPI1['transformSource']>) {\n    return (hooks?.transformSource ?? args[2])(...args);\n  },\n};\n\n/** @internal */\nexport const { resolve, load, getFormat, transformSource } = filterHooksByAPIVersion(proxy) as NodeLoaderHooksAPI1 &\n  NodeLoaderHooksAPI2;\n"]}