{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"AAAA;;;GAGG;AACH,MAAM,OAAO,QAAQ;IACnB;;OAEG;IACH,OAAO,CAAiB;IAExB;;OAEG;IACH,MAAM,CAAoB;IAE1B;;OAEG;IACH,OAAO,GAAe,IAAI,OAAO,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;QAC7C,IAAI,CAAC,OAAO,GAAG,GAAG,CAAA;QAClB,IAAI,CAAC,MAAM,GAAG,GAAG,CAAA;IACnB,CAAC,CAAC,CAAA;CACH","sourcesContent":["/**\n * A handle around a Promise, so it may be resolved or\n * rejected from outside the Promise constructor.\n */\nexport class Deferred<T = unknown> {\n  /**\n   * Resolve the promise\n   */\n  resolve!: (v: T) => void\n\n  /**\n   * Reject the promise\n   */\n  reject!: (er: any) => void\n\n  /**\n   * The promise that gets resolved or rejected\n   */\n  promise: Promise<T> = new Promise((res, rej) => {\n    this.resolve = res\n    this.reject = rej\n  })\n}\n"]}