{"version":3,"file":"line-type.js","sourceRoot":"","sources":["../../src/line-type.ts"],"names":[],"mappings":"AAAA;;GAEG;AACH,MAAM,CAAC,MAAM,SAAS,GAAG;IACvB,SAAS,EAAE,oDAAoD;IAC/D,MAAM,EAAE,mCAAmC;IAC3C,OAAO,EAAE,oBAAoB;IAC7B,OAAO,EAAE,2BAA2B;IACpC,YAAY,EAAE,kCAAkC;IAChD,IAAI,EAAE,8CAA8C;IACpD,OAAO,EAAE,0BAA0B;IACnC,aAAa,EAAE,8BAA8B;IAC7C,OAAO,EAAE,YAAY;CACb,CAAA;AAOV;;GAEG;AACH,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAC,IAAY,EAAqB,EAAE;IAC1D,KAAK,MAAM,CAAC,CAAC,EAAE,OAAO,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;QACpD,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAA;QACjC,IAAI,KAAK;YAAE,OAAO,CAAC,CAAC,EAAE,KAAK,CAAC,CAAA;KAC7B;IACD,OAAO,IAAI,CAAA;AACb,CAAC,CAAA","sourcesContent":["/**\n * Collection of the various types of lines encountered in a TAP stream\n */\nexport const lineTypes = {\n  testPoint: /^(not )?ok(?: ([0-9]+))?(?:(?: -)?( .*?))?(\\{?)\\n$/,\n  pragma: /^pragma ([+-])([a-zA-Z0-9_-]+)\\n$/,\n  bailout: /^bail out!(.*)\\n$/i,\n  version: /^TAP version ([0-9]+)\\n$/i,\n  childVersion: /^(    )+TAP version ([0-9]+)\\n$/i,\n  plan: /^([0-9]+)\\.\\.([0-9]+)(?:\\s+(?:#\\s*(.*)))?\\n$/,\n  subtest: /^# Subtest(?:: (.*))?\\n$/,\n  subtestIndent: /^    # Subtest(?:: (.*))?\\n$/,\n  comment: /^\\s*#.*\\n$/,\n} as const\n\n/**\n * The type of a line, and its constituent parsed pieces\n */\nexport type ParsedLine = [string, RegExpMatchArray]\n\n/**\n * Determine the type of line, and parse it into a {@link ParsedLine}\n */\nexport const lineType = (line: string): ParsedLine | null => {\n  for (const [t, pattern] of Object.entries(lineTypes)) {\n    const match = line.match(pattern)\n    if (match) return [t, match]\n  }\n  return null\n}\n"]}