{"version":3,"file":"parse-directive.js","sourceRoot":"","sources":["../../src/parse-directive.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,qBAAqB,CAAA;AAWpD;;;GAGG;AACH,MAAM,CAAC,MAAM,cAAc,GAAG,CAC5B,IAAY,EACc,EAAE;IAC5B,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;QAAE,OAAO,KAAK,CAAA;IAE9B,IAAI,GAAG,IAAI;SACR,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC;SAC3B,IAAI,EAAE;SACN,OAAO,CAAC,yBAAyB,EAAE,WAAW,CAAC,CAAA;IAClD,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CACrB,gDAAgD,CACjD,CAAA;IACD,MAAM,CAAC,GAAG,IAAI,EAAE,CAAC,CAAC,CAAC,CAAA;IACnB,MAAM,CAAC,GAAG,IAAI,EAAE,CAAC,CAAC,CAAC,CAAA;IACnB,IAAI,OAAO,CAAC,KAAK,QAAQ,EAAE;QACzB,IAAI,CAAC,GAAG,CAAC,CAAC,CAAA;QACV,IAAI,CAAC,KAAK,GAAG,EAAE;YACb,yDAAyD;YACzD,CAAC,IAAI,OAAO,CAAA;YACZ,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;YACjB,CAAC,IAAI,IAAI,CAAA;SACV;QACD,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,CAAA;KACnB;IAED,MAAM,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,6BAA6B,CAAC,CAAA;IACpD,MAAM,IAAI,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,WAAW,EAAE,CAAA;IACnC,MAAM,GAAG,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,CAAA;IAC3B,IAAI,CAAC,IAAI;QAAE,OAAO,KAAK,CAAA;IAEvB,4DAA4D;IAC5D,8BAA8B;IAC9B,OAAO,CAAC,IAAiB,EAAE,GAAG,IAAI,IAAI,CAAC,CAAA;AACzC,CAAC,CAAA","sourcesContent":["import { OPEN_BRACE_EOL } from './brace-patterns.js'\n\n/**\n * Directive types supported by this library.\n *\n * `'time'` is not officially in the specification, but node-tap has\n * supported it for a long time, and uses it to report how long\n * subtests take to complete.\n */\nexport type Directive = 'todo' | 'skip' | 'time'\n\n/**\n * Parse a \"directive\", the bit that follows the `#` character\n * on a TestPoint line.\n */\nexport const parseDirective = (\n  line: string\n): [Directive, any] | false => {\n  if (!line.trim()) return false\n\n  line = line\n    .replace(OPEN_BRACE_EOL, '')\n    .trim()\n    .replace(/^duration_ms ([0-9.]+)$/, 'time=$1ms')\n  const time = line.match(\n    /^time=((?:[1-9][0-9]*|0)(?:\\.[0-9]+)?)(ms|s)$/i\n  )\n  const t = time?.[1]\n  const s = time?.[2]\n  if (typeof t === 'string') {\n    let n = +t\n    if (s === 's') {\n      // JS does weird things with floats.  Round it off a bit.\n      n *= 1000000\n      n = Math.round(n)\n      n /= 1000\n    }\n    return ['time', n]\n  }\n\n  const ts = line.match(/^(todo|skip)(?:\\S*)\\b(.*)$/i)\n  const type = ts?.[1]?.toLowerCase()\n  const msg = ts?.[2]?.trim()\n  if (!type) return false\n\n  // we know at this point it must be either 'todo' or 'skip',\n  // in unknown upper/lower case\n  return [type as Directive, msg || true]\n}\n"]}