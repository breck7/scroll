// A joint effort from:
// - Breck Yunits https://github.com/breck7
// - Guillaume Papin https://github.com/Sarcasm
// Origin: https://github.com/breck7/scrollsdk/issues/120

stampFileParser
 catchAllAtomType stringAtom
 description Create a file.
 javascript
  execute(parentDir) {
   const fs = require("fs")
   const path = require("path")
   const fullPath = path.join(parentDir, this.getLine())
   this.root.log(`Creating file ${fullPath}`)
   fs.mkdirSync(path.dirname(fullPath), {recursive: true})
   const content = this.subparticlesToString()
   fs.writeFileSync(fullPath, content, "utf8")
   const isExecutable = content.startsWith("#!")
   if (isExecutable) fs.chmodSync(fullPath, "755")
  }

stampFolderParser
 catchAllAtomType stringAtom
 description Create a folder.
 inScope stampFolderParser
 catchAllParser stampFileParser
 pattern \/$
 javascript
  execute(parentDir) {
   const fs = require("fs")
   const path = require("path")
   const newPath = path.join(parentDir, this.getLine())
   this.root.log(`Creating folder ${newPath}`)
   fs.mkdirSync(newPath, {recursive: true})
   this.forEach(particle => particle.execute(newPath))
  }

toStampParser
 description Print a directory to stamp with configurable filters.
 extends abstractScrollParser
 catchAllAtomType filePathAtom
 cueFromId
 gitOnlyParser
  description Only include git-tracked files
  atoms cueAtom
  single
 excludeParser
  description Exclude files/directories matching these glob patterns
  atoms cueAtom
  catchAllAtomType stringAtom
 maxDepthParser
  description Maximum directory depth to traverse
  atoms cueAtom integerAtom
 javascript
  buildTxt() {
    return this.makeStamp(this.content)
  }
  buildHtml() {
    return this.buildTxt()
  }
  makeStamp(dir) {
    const fs = require('fs');
    const path = require('path');
    const { execSync } = require('child_process');
    let stamp = 'stamp\n';
    const gitOnly = this.has("gitOnly");
    const excludePatterns = this.get("exclude")?.split(" ") || [".git/**", "node_modules/**"];
    const maxDepth = parseInt(this.get("maxDepth")) || Infinity;
    const gitTrackedFiles = new Set(
      gitOnly ? execSync('git ls-files', { cwd: dir, encoding: 'utf-8' })
        .split('\n')
        .filter(Boolean) 
        : []
    );
    // Convert glob patterns to RegExp
    const excludeRegexes = excludePatterns.map(pattern => 
      new RegExp('^' + pattern.replace(/\*\*/g, '.*').replace(/\*/g, '[^/]*') + '$')
    );
    const shouldInclude = (relativePath, isDirectory) => {
      if (excludeRegexes.some(regex => regex.test(relativePath)))
        return false;
      if (isDirectory)
        return true
      if (gitOnly && !gitTrackedFiles.has(relativePath))
        return false;
      return true;
    };
    const handleFile = (indentation, relativePath, itemPath) => {
      if (!shouldInclude(relativePath)) return;
      stamp += `${indentation}${relativePath}\n`;
      try {
        const content = fs.readFileSync(itemPath, { encoding: 'utf8', flag: 'r' });
        // Skip if file appears to be binary
        if (content.includes('\0') || /[\x00-\x08\x0E-\x1F]/.test(content)) return;
        stamp += `${indentation} ${content.replace(/\n/g, `\n${indentation} `)}\n`;
      } catch (err) {
        // Skip files that can't be read as utf8
        console.error(`Error reading ${itemPath}: ${err.message}`);
        return;
      }
    };
    function processDirectory(currentPath, depth = 0) {
      if (depth > maxDepth) return;
      const items = fs.readdirSync(currentPath);
      items.forEach(item => {
        const itemPath = path.join(currentPath, item);
        const relativePath = path.relative(dir, itemPath);
        const stats = fs.statSync(itemPath);
        const isDirectory = stats.isDirectory()
        if (!shouldInclude(relativePath, isDirectory)) return;
        const indentation = ' '.repeat(depth);
        if (isDirectory) {
          stamp += `${indentation}${relativePath}/\n`;
          processDirectory(itemPath, depth + 1);
        } else if (stats.isFile()) {
          handleFile(indentation, relativePath, itemPath);
        }
      });
    }
    const stats = fs.statSync(dir);
    if (stats.isDirectory()) {
      processDirectory(dir, 1);
    } else {
      handleFile(" ", dir, dir);
    }
    return stamp.trim();
  }

stampParser
 description Expand project template to disk.
 extends abstractScrollParser
 inScope stampFolderParser
 catchAllParser stampFileParser
 example
  stamp
   .gitignore
    *.html
   readme.scroll
    # Hello world
    <script src="scripts/nested/hello.js"></script>
   scripts/
    nested/
     hello.js
      console.log("Hello world")
 cueFromId
 atoms preBuildCommandAtom
 javascript
  execute() {
    const dir = this.root.folderPath
    this.forEach(particle => particle.execute(dir))
  }
