{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG;;;AAGH,yDAA6C;AAE7C;;GAEG;AACH,MAAa,KAAK;IAChB,EAAE,CAAU;IACZ,WAAW,GAAkB,EAAE,CAAA;IAC/B,SAAS,GAAY,KAAK,CAAA;IAE1B,YAAY,CAAW;QACrB,IAAI,CAAC,EAAE,GAAG,CAAC,CAAA;IACb,CAAC;IAED;;;;OAIG;IACH,QAAQ,CAAC,EAAa;QACpB,OAAO,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAA;IACvB,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,EAAa;QACjB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC,CAAA;QAEzB,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YACnB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAA;YACrB,MAAM,KAAK,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAA;YAC3B,IAAI,CAAC,EAAE,CAAC,KAAK,GAAG,GAAG,EAAE;gBACnB,MAAM,GAAG,GAAG,KAAK,EAAE,CAAA;gBACnB,IAAI,IAAA,6BAAS,EAAC,GAAG,CAAC,EAAE;oBAClB,OAAO,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,CAAA;iBAC5C;gBACD,OAAO,IAAI,CAAC,aAAa,EAAE,CAAA;YAC7B,CAAC,CAAA;SACF;IACH,CAAC;IAED;;;;OAIG;IACH,aAAa;QACX,IAAI,EAA2B,CAAA;QAC/B,OAAO,CAAC,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC,EAAE;YACpC,IAAI;gBACF,MAAM,GAAG,GAAG,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAA;gBAC9B,IAAI,IAAA,6BAAS,EAAC,GAAG,CAAC,EAAE;oBAClB,OAAO,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,CAAA;iBAC5C;aACF;YAAC,OAAO,CAAC,EAAE;gBACV,IAAI,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAA;gBAC3B,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;gBAChB,OAAM;aACP;SACF;IACH,CAAC;CACF;AA5DD,sBA4DC;AAED;;GAEG;AACI,MAAM,MAAM,GAAqB,CAAC,CAAW,EAAE,EAAE,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,CAAA;AAAxD,QAAA,MAAM,UAAkD","sourcesContent":["/**\n * Plugin class providing {@link @tapjs/after!After#after} and\n * {@link @tapjs/after!After#teardown} on the\n * {@link @tapjs/test!index.Test} class.\n *\n * @module\n */\n\nimport { TapPlugin, TestBase } from '@tapjs/core'\nimport { isPromise } from 'is-actual-promise'\n\n/**\n * Implementation class returned by plugin function\n */\nexport class After {\n  #t: TestBase\n  #onTeardown: (() => any)[] = []\n  #didOnEOF: boolean = false\n\n  constructor(t: TestBase) {\n    this.#t = t\n  }\n\n  /**\n   * Alias for {@link @tapjs/after!After#after}\n   *\n   * @group Test Lifecycle Management\n   */\n  teardown(fn: () => any) {\n    return this.after(fn)\n  }\n\n  /**\n   * Runs the supplied function after the test is completely finished, and\n   * before the next test starts.\n   *\n   * @group Test Lifecycle Management\n   */\n  after(fn: () => any) {\n    this.#onTeardown.push(fn)\n\n    if (!this.#didOnEOF) {\n      this.#didOnEOF = true\n      const onEOF = this.#t.onEOF\n      this.#t.onEOF = () => {\n        const ret = onEOF()\n        if (isPromise(ret)) {\n          return ret.then(() => this.#callTeardown())\n        }\n        return this.#callTeardown()\n      }\n    }\n  }\n\n  /**\n   * call the teardown functions\n   *\n   * @internal\n   */\n  #callTeardown(): void | Promise<void> {\n    let fn: (() => any) | undefined\n    while ((fn = this.#onTeardown.pop())) {\n      try {\n        const ret = fn.call(this.#t.t)\n        if (isPromise(ret)) {\n          return ret.then(() => this.#callTeardown())\n        }\n      } catch (e) {\n        this.#onTeardown.length = 0\n        this.#t.threw(e)\n        return\n      }\n    }\n  }\n}\n\n/**\n * Plugin method that creates the {@link @tapjs/after!After} instance\n */\nexport const plugin: TapPlugin<After> = (t: TestBase) => new After(t)\n"]}