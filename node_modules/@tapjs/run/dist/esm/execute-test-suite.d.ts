/**
 * This provides the functionality that is shared between `tap run`
 * and `tap replay`, to figure out what tests need to be run, create
 * the various subtests for each, and pipe the whole thing through an
 * appropriate reporter.
 *
 * When called by `run`, the execution method is `t.spawn`. When called
 * by `replay`, the file is mapped to its appropriate saved results file in
 * `.tap/test-results`, and `t.tapFile()` is called.
 *
 * @module
 */
import { plugin as AfterPlugin } from '@tapjs/after';
import { LoadedConfig } from '@tapjs/config';
import type { TAP } from '@tapjs/core';
export declare const executeTestSuite: <T extends TAP & import("@tapjs/after").After, S extends (t: TAP & ReturnType<typeof AfterPlugin>) => T>(args: string[], config: LoadedConfig, applyPlugins: S, setup: (t: T) => void | Promise<void>, execute: (t: T, testFile: string, files: string[], hasReporter: boolean) => Promise<any>) => Promise<void>;
//# sourceMappingURL=execute-test-suite.d.ts.map