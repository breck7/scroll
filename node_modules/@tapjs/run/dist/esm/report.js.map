{"version":3,"file":"report.js","sourceRoot":"","sources":["../../src/report.ts"],"names":[],"mappings":"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","sourcesContent":["// this has to do some wicked things with types, because c8's\n// declarations are somewhat lacking.\nimport { LoadedConfig } from '@tapjs/config'\nimport { tap } from '@tapjs/core'\nimport { Report } from 'c8'\nimport { readdir } from 'fs/promises'\nimport opener from 'opener'\nimport { resolve } from 'path'\n\nimport { mainCommand } from './main-config.js'\n\nconst reporterFiles = {\n  clover: 'clover.xml',\n  cobertura: 'cobertura-coverage.xml',\n  json: 'coverage-final.json',\n  'json-summary': 'coverage-summary.json',\n  lcov: 'lcov.info',\n  lcovonly: 'lcov.info',\n}\n\nexport const report = async (\n  args: string[],\n  config: LoadedConfig\n) => {\n  const rconf = config.get('coverage-report')\n  // if there are args passed in, use that. The config is used if\n  // calling this at the end of `tap run`\n  const reporter = args.length\n    ? args\n    : rconf && rconf.length\n    ? rconf\n    : ['text']\n\n  // verify that we actually have coverage, otherwise don't even try\n  const tempDirectory = resolve(config.globCwd, '.tap/coverage')\n  const ok = await readdir(tempDirectory).then(\n    entries => !!entries.length,\n    () => false\n  )\n  if (!ok) {\n    tap().comment('No coverage generated')\n    tap().debug('run/report exit=1 no coverage generated')\n    if (!config.get('allow-empty-coverage')) {\n      process.exitCode = 1\n    }\n    return\n  }\n\n  // C8 report only works when run from the cwd where the files are\n  const cwd = process.cwd()\n  /* c8 ignore start */\n  try {\n    process.chdir(config.globCwd)\n  } catch {}\n  /* c8 ignore stop */\n\n  let showFullCoverage = config.get('show-full-coverage')\n  let r = new Report({\n    skipFull: !showFullCoverage,\n    // no need to include/exclude, we already did that when we captured\n    reporter,\n    reportsDirectory: resolve(config.globCwd, '.tap/report'),\n    tempDirectory: resolve(config.globCwd, '.tap/coverage'),\n    excludeNodeModules: true,\n  })\n\n  // See if we need to generate a text report, or if we should skip it\n  // because --show-full-coverage is false and we have full coverage,\n  // or alternatively, there's NO coverage, and we'll print the warning\n  // anyway.\n  if (reporter.includes('text') && !showFullCoverage) {\n    const summary = await getSummary(r)\n    if (isFullCoverage(summary) || isEmptyCoverage(summary)) {\n      if (mainCommand === 'report' && showFullCoverage !== false) {\n        r = new Report({\n          skipFull: false,\n          reporter,\n          reportsDirectory: resolve(config.globCwd, '.tap/report'),\n          tempDirectory: resolve(config.globCwd, '.tap/coverage'),\n          excludeNodeModules: true,\n        })\n      } else {\n        // don't show the text report, it's just noise.\n        // but make `tap report html --no-show-full-coverage` still\n        // output a summary, at least, so it doesn't seem broken\n        const txt = reporter.indexOf('text')\n        if (txt !== -1) {\n          const none = args.includes('text') ? 'text-summary' : 'none'\n          reporter.splice(txt, 1)\n          if (reporter.length === 0) {\n            reporter.push(none)\n          }\n        }\n      }\n    }\n  }\n\n  // XXX: istanbul-reports just dumps to process.stdout, which collides\n  // with our ink-based reporters. Hijack it and write with console.log\n  // so that patch-console can put it in the intended place (or ignore it).\n  // TODO: make istanbul-reports more configurable.\n  const { write } = process.stdout\n  const stdout: string[] = []\n  process.stdout.write = c => {\n    stdout.push(String(c))\n    return true\n  }\n  await r.run()\n  process.stdout.write = write\n  const s = stdout.join('').trimEnd()\n  if (s) console.log(s)\n  for (const [style, filename] of Object.entries(reporterFiles)) {\n    if (reporter.includes(style)) {\n      const f = resolve(config.globCwd, '.tap/report', filename)\n      console.log(`${style} report: ${f}`)\n    }\n  }\n  if (reporter.includes('html')) {\n    opener(resolve(config.globCwd, '.tap/report/index.html'))\n  } else if (reporter.includes('lcov')) {\n    opener(\n      resolve(config.globCwd, '.tap/report/lcov-report/index.html')\n    )\n  }\n\n  await checkCoverage(r, config)\n  /* c8 ignore start */\n  try {\n    process.chdir(cwd)\n  } catch {}\n  /* c8 ignore stop */\n}\n\ninterface Summary {\n  lines: { pct: number }\n  functions: { pct: number }\n  statements: { pct: number }\n  branches: { pct: number }\n}\n\nconst summaries = new Map<Report, Summary>()\nconst getSummary = async (report: Report) => {\n  const c = summaries.get(report)\n  if (c) return c\n  const r = report as Report & {\n    getCoverageMapFromAllCoverageFiles(): Promise<{\n      getCoverageSummary: () => Summary\n    }>\n  }\n  const map = await r.getCoverageMapFromAllCoverageFiles()\n  const summary = map.getCoverageSummary()\n  summaries.set(report, summary)\n  return summary\n}\n\nconst thresholds: (keyof Summary)[] = [\n  'statements',\n  'branches',\n  'functions',\n  'lines',\n]\n\nconst isEmptyCoverage = (summary: Summary) =>\n  Math.max(...thresholds.map(th => Number(summary[th].pct) || 0)) ===\n  0\n\nconst isFullCoverage = (summary: Summary) =>\n  Math.min(...thresholds.map(th => Number(summary[th].pct) || 0)) ===\n  100\n\nconst checkCoverage = async (\n  report: Report,\n  config: LoadedConfig\n) => {\n  const cr = config.get('coverage-report')\n  const comment = cr && !cr.includes('text')\n  const summary = await getSummary(report)\n  let success = true\n\n  const t = tap()\n\n  // if we didn't get anything, that means that even though it wrote\n  // some coverage files, it didn't actually cover anything, which can\n  // happen, for example if the test crashes before actually loading.\n  if (isEmptyCoverage(summary)) {\n    t.comment('No coverage generated')\n    t.debug('run/report exit=1 coverage is empty', summary)\n    if (!config.get('allow-empty-coverage')) {\n      process.exitCode = 1\n    }\n    return\n  }\n\n  // TODO: make levels configurable, just *default* to 100\n  // only comment it if not using the text reporter, because that makes\n  // it pretty obvious where the shortcomings are already.\n  for (const th of thresholds) {\n    const coverage = Number(summary[th].pct) || 0\n    if (coverage < 100) {\n      if (comment) {\n        t.comment(`ERROR: incomplete ${th} coverage (${coverage}%)`)\n      }\n      success = false\n    }\n  }\n  if (success === false) {\n    t.debug('run/report exit=1 coverage not 100', summary)\n    if (!config.get('allow-incomplete-coverage')) {\n      process.exitCode = 1\n    }\n  }\n}\n"]}