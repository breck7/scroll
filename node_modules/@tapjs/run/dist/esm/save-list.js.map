{"version":3,"file":"save-list.js","sourceRoot":"","sources":["../../src/save-list.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,QAAQ,EAAE,MAAM,EAAE,SAAS,EAAE,MAAM,aAAa,CAAA;AACzD,OAAO,EAAE,OAAO,EAAE,MAAM,MAAM,CAAA;AAE9B,uDAAuD;AACvD,IAAI,IAAc,CAAA;AAClB,IAAI,IAAY,CAAA;AAEhB,MAAM,CAAC,MAAM,QAAQ,GAAG,KAAK,EAAE,MAAoB,EAAE,EAAE;IACrD,IAAI,IAAI;QAAE,OAAO,IAAI,CAAA;IACrB,MAAM,IAAI,GAAG,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAA;IAC/B,IAAI,CAAC,IAAI;QAAE,OAAO,CAAC,IAAI,GAAG,EAAE,CAAC,CAAA;IAC7B,IAAI,CAAC,IAAI;QAAE,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,OAAO,EAAE,IAAI,CAAC,CAAA;IAC/C,MAAM,CAAC,GAAG,CAAC,MAAM,QAAQ,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,EAAE,CAAA;IAC/D,OAAO,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAA;AACxC,CAAC,CAAA;AACD,MAAM,CAAC,MAAM,SAAS,GAAG,KAAK,EAC5B,MAAoB,EACpB,IAAc,EACd,EAAE;IACF,MAAM,IAAI,GAAG,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAA;IAC/B,IAAI,CAAC,IAAI;QAAE,OAAM;IACjB,IAAI,CAAC,IAAI;QAAE,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,OAAO,EAAE,IAAI,CAAC,CAAA;IAC/C,IAAI,CAAC,IAAI,CAAC,MAAM;QAAE,MAAM,MAAM,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE,GAAE,CAAC,CAAC,CAAA;;QAC/C,MAAM,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,EAAE,MAAM,CAAC,CAAA;AAC5D,CAAC,CAAA","sourcesContent":["import { LoadedConfig } from '@tapjs/config'\nimport { readFile, unlink, writeFile } from 'fs/promises'\nimport { resolve } from 'path'\n\n// return the list of entries in the save config, or []\nlet list: string[]\nlet file: string\n\nexport const readSave = async (config: LoadedConfig) => {\n  if (list) return list\n  const save = config.get('save')\n  if (!save) return (list = [])\n  if (!file) file = resolve(config.globCwd, save)\n  const d = (await readFile(file, 'utf8').catch(() => '')).trim()\n  return (list = d ? d.split('\\n') : [])\n}\nexport const writeSave = async (\n  config: LoadedConfig,\n  list: string[]\n) => {\n  const save = config.get('save')\n  if (!save) return\n  if (!file) file = resolve(config.globCwd, save)\n  if (!list.length) await unlink(file).catch(() => {})\n  else await writeFile(file, list.join('\\n') + '\\n', 'utf8')\n}\n"]}