{"version":3,"file":"handle-reporter.js","sourceRoot":"","sources":["../../src/handle-reporter.ts"],"names":[],"mappings":"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","sourcesContent":["import type { LoadedConfig } from '@tapjs/config'\nimport type { TAP } from '@tapjs/core'\nimport {\n  report as testReport,\n  types as reportTypes,\n} from '@tapjs/reporter'\nimport { spawn } from 'node:child_process'\nimport { createWriteStream } from 'node:fs'\nimport { WriteStream } from 'node:tty'\nimport { resolve } from 'node:path'\nimport type { Writable } from 'node:stream'\nimport { pathToFileURL } from 'node:url'\nimport { resolveImport } from 'resolve-import'\nimport which from 'which'\n\nconst rawTap = (t: TAP, out: Writable) => pipe(t, out)\nconst pipe = (t: TAP, dest: Writable): false => {\n  t.pipe(dest)\n  return false\n}\n\n/**\n * Return type indicates whether or not stderr is also being handled.\n * If a stream or raw TAP is used, then `false` is returned, indicating\n * that child test process stderr is *not* handled, and stdio should be\n * inherited from main runner process.\n * If a React component is used, then it's responsible for handling the\n * stderr of any spawned child processes, and this function returns true\n * to indicate that stdio should be piped.\n */\nexport const handleReporter = async (\n  t: TAP,\n  config: LoadedConfig\n) => {\n  // figure out if we MUST use the 'tap' reporter\n  const rf = config.get('reporter-file')\n  const reporter =\n    rf === '/dev/null' ? 'silent' : (config.get('reporter') as string)\n  const isRawTap = process.env.TAP === '1'\n  const out =\n    !rf ||\n    rf === '-' ||\n    rf === '/dev/stdout' ||\n    isRawTap ||\n    reporter === 'silent'\n      ? process.stdout\n      : createWriteStream(rf)\n\n  if (reporter === 'tap' || isRawTap) {\n    return rawTap(t, out)\n  }\n\n  if (reporter === 'silent') {\n    t.register()\n    t.resume()\n    return true\n  }\n\n  // if it's one of the keys we know, then use that\n  if (reportTypes[reporter]) {\n    const Type = reporter as keyof typeof reportTypes\n    testReport(Type, t, config, out)\n    return true\n  }\n\n  // Check to see if it's an executable program. If so, run it\n  // and pipe the TAP data into its stdin.\n  try {\n    const stdio: ['pipe', 'inherit' | 'pipe', 'inherit'] = [\n      'pipe',\n      out === process.stdout ? 'inherit' : 'pipe',\n      'inherit',\n    ]\n    const exe = await which(reporter)\n    const rargs = config.get('reporter-arg') || []\n    const proc = spawn(exe, rargs, {\n      shell: true,\n      stdio,\n    })\n    if (proc.stdout) proc.stdout.pipe(out)\n    return pipe(t, proc.stdin as WriteStream)\n  } catch {}\n\n  // ok, not one of those, check to see if we can import it\n  // load it relative to the cwd, so relative paths work.\n  const from = pathToFileURL(resolve('x'))\n  const mod = String(\n    await resolveImport(reporter, from).catch(() => '')\n  )\n\n  const imported =\n    mod && (await import(mod).catch(() => null))?.default\n  if (imported) {\n    if (typeof imported === 'function') {\n      // either react or stream\n      if (\n        typeof imported.prototype === 'object' &&\n        !!imported.prototype &&\n        typeof imported.prototype.write === 'function' &&\n        typeof imported.prototype.end === 'function'\n      ) {\n        const Cls = imported as typeof Writable\n        const dest = new Cls()\n        dest.pipe(out)\n        return pipe(t, dest)\n      } else {\n        // React function component\n        testReport(imported, t, config, out)\n        return true\n      }\n    }\n  }\n\n  console.error(\n    `Could not load ${JSON.stringify(\n      reporter\n    )} reporter. Displaying raw TAP.`\n  )\n  return rawTap(t, out)\n}\n"]}