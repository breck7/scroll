{"version":3,"file":"coverage-map.js","sourceRoot":"","sources":["../../src/coverage-map.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,OAAO,EAAE,MAAM,MAAM,CAAA;AAC9B,OAAO,EAAE,aAAa,EAAE,MAAM,KAAK,CAAA;AAEnC,MAAM,aAAa,GAAG,CAAC,CAAM,EAAiB,EAAE,CAC9C,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,QAAQ,CAAC,CAAA;AAIzD,MAAM,CAAC,MAAM,cAAc,GAAG,KAAK,EAAE,MAAoB,EAAE,EAAE;IAC3D,IAAI,MAAM,CAAC,GAAG,CAAC,kBAAkB,CAAC;QAAE,OAAO,GAAG,EAAE,CAAC,IAAI,CAAA;IACrD,MAAM,WAAW,GAAG,MAAM,CAAC,GAAG,CAAC,cAAc,CAAC,CAAA;IAC9C,IAAI,CAAC,WAAW;QAAE,OAAO,GAAG,EAAE,CAAC,EAAE,CAAA;IACjC,MAAM,SAAS,GAAG,CAAC,MAAM,MAAM,CAC7B,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC,CAAC,CAC5D,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE;QACX,MAAM,IAAI,KAAK,CACb,gBAAgB,WAAW,2BAA2B,EAAE,CAAC,OAAO,EAAE,CACnE,CAAA;IACH,CAAC,CAAC,CAA+C,CAAA;IACjD,qBAAqB;IACrB,MAAM,GAAG,GACP,OAAO,SAAS,KAAK,QAAQ,CAAC,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,CAAA;IAC/D,oBAAoB;IAEpB,IAAI,OAAO,GAAG,KAAK,UAAU,EAAE;QAC7B,MAAM,IAAI,KAAK,CACb,gBAAgB,WAAW,oCAAoC,CAChE,CAAA;KACF;IACD,OAAO,CAAC,CAAS,EAAE,EAAE;QACnB,MAAM,MAAM,GAA6B,GAAG,CAAC,CAAC,CAAC,CAAA;QAC/C,IACE,MAAM,KAAK,IAAI;YACf,OAAO,MAAM,KAAK,QAAQ;YAC1B,CAAC,aAAa,CAAC,MAAM,CAAC,EACtB;YACA,MAAM,IAAI,KAAK,CACb,gBAAgB,WAAW,wCAAwC,CACpE,CAAA;SACF;QACD,OAAO,MAAM,CAAA;IACf,CAAC,CAAA;AACH,CAAC,CAAA","sourcesContent":["import { LoadedConfig } from '@tapjs/config'\nimport { resolve } from 'path'\nimport { pathToFileURL } from 'url'\n\nconst isStringArray = (a: any): a is string[] =>\n  Array.isArray(a) && !a.some(s => typeof s !== 'string')\n\ntype CoverageMapFn = (file: string) => null | string | string[]\n\nexport const getCoverageMap = async (config: LoadedConfig) => {\n  if (config.get('disable-coverage')) return () => null\n  const coverageMap = config.get('coverage-map')\n  if (!coverageMap) return () => []\n  const mapModule = (await import(\n    String(pathToFileURL(resolve(config.globCwd, coverageMap)))\n  ).catch(er => {\n    throw new Error(\n      `Coverage map ${coverageMap} is not a valid module. ${er.message}`\n    )\n  })) as CoverageMapFn | { default: CoverageMapFn }\n  /* c8 ignore start */\n  const map =\n    typeof mapModule === 'object' ? mapModule.default : mapModule\n  /* c8 ignore stop */\n\n  if (typeof map !== 'function') {\n    throw new Error(\n      `Coverage map ${coverageMap} did not default export a function`\n    )\n  }\n  return (f: string) => {\n    const mapped: null | string | string[] = map(f)\n    if (\n      mapped !== null &&\n      typeof mapped !== 'string' &&\n      !isStringArray(mapped)\n    ) {\n      throw new Error(\n        `Coverage map ${coverageMap} must return string, string[], or null`\n      )\n    }\n    return mapped\n  }\n}\n"]}