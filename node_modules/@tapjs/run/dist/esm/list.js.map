{"version":3,"file":"list.js","sourceRoot":"","sources":["../../src/list.ts"],"names":[],"mappings":"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","sourcesContent":["import { LoadedConfig } from '@tapjs/config'\nimport { ProcessInfo } from '@tapjs/processinfo'\nimport { glob, Glob, IgnoreLike } from 'glob'\nimport { resolve } from 'node:path'\nimport type { Path, PathScurry } from 'path-scurry'\nimport { mainCommand, values } from './main-config.js'\nimport { readSave } from './save-list.js'\n\nconst alwaysExcludeNames = [\n  '.tap',\n  '.nyc_output',\n  '.git',\n  '.hg',\n  'node_modules',\n  'tap-snapshots',\n]\n\nconst alwaysExcludePattern = `**/@(${alwaysExcludeNames.join(\n  '|'\n)})/**`\n\nconst defaultInclude =\n  '**/{' +\n  '@(test?(s)|__test?(s)__)/**/*,' +\n  '*.@(test?(s)|spec),' +\n  'test?(s)' +\n  '}.__EXTENSIONS__'\nconst dirInclude = '**/*.__EXTENSIONS__'\n\n// --save=<file>\n//    only run the files in the list, write failures back to it.\n//    If the file doesn't exist, run everything normally.\n//    Otherwise, don't delete coverage history.\n//    If they all pass, delete the file.\n// --changed\n//    Figure out which files in the suite have changed since last run,\n//    and only run those. Do not delete coverage history ever.\n\nexport const list = async (\n  args: string[],\n  config: LoadedConfig,\n  noPruneUnchanged: boolean = false\n) => {\n  const saveList: Set<string> = new Set(await readSave(config))\n\n  if (args.length === 0) args = config.get('files') || []\n\n  const ignore = [alwaysExcludePattern]\n  if (values.exclude) ignore.push(...values.exclude)\n\n  const g = new Glob(\n    values.include || config.expandInclude(defaultInclude),\n    {\n      ignore,\n      cwd: config.globCwd,\n      withFileTypes: true,\n    }\n  )\n\n  const { scurry } = g\n  // resolve non-existent paths as globs in the actual cwd\n  // turn everything into a Path in our main scurry, except\n  // stdin designators, which are left as strings\n  // This way the expected behavior of \"the thing glob says\"\n  // will work the same way across platforms, *and* the tests\n  // are all resolved to absolute paths that can be run from\n  // the cwd context of the project root.\n  const entries = new Set<Path | '-' | '/dev/stdin'>(\n    (\n      await Promise.all(\n        (\n          await (!args.length\n            ? g.walk()\n            : Promise.all(\n                args.map(async a => {\n                  if (a === '-' || a === '/dev/stdin') return a\n                  const st = await scurry.cwd\n                    .resolve(resolve(a))\n                    .lstat()\n                  if (st) return st\n                  return glob(a, { absolute: true })\n                })\n              ))\n        ).reduce(\n          (\n            set: (\n              | string\n              | Path\n              | Promise<Path | undefined>\n              | undefined\n            )[],\n            entry: string | Path | string[]\n          ) => {\n            // stat the glob results a second time, even though we know\n            // that they exist, because we need their stat info later.\n            if (Array.isArray(entry)) {\n              set.push(\n                ...entry.map(e => scurry.cwd.resolve(e).lstat())\n              )\n            } else if (entry === '-' || entry === '/dev/stdin') {\n              set.push(entry)\n            } else {\n              set.push(entry)\n            }\n            return set\n          },\n          []\n        )\n      )\n    ).filter(p => {\n      // enoents should already be filtered out by glob, but just in case\n      /* c8 ignore start */\n      if (!p) return false\n      /* c8 ignore stop */\n      return true\n    }) as (Path | '-' | '/dev/stdin')[]\n  )\n  await expandDirectories(config, scurry, entries, g.ignore)\n  const before = config.get('before')\n  const after = config.get('after')\n  if (before) {\n    entries.delete(scurry.cwd.resolve(before))\n  }\n  if (after) {\n    entries.delete(scurry.cwd.resolve(after))\n  }\n\n  if (saveList.size) {\n    for (const p of entries) {\n      if (typeof p === 'string') continue\n      if (!saveList.has(p.relativePosix())) entries.delete(p)\n    }\n  }\n\n  const foundEntries = entries.size !== 0\n  if (config.get('changed') && foundEntries && !noPruneUnchanged) {\n    await pruneUnchanged(scurry, entries)\n  }\n\n  const files = [...entries].map(p =>\n    typeof p === 'string' ? p : p.relativePosix()\n  )\n  if (mainCommand === 'list') {\n    if (foundEntries) {\n      // don't report an error if we found something but it's just not new\n      if (files.length) console.log(files.join('\\n').trimEnd())\n    } else {\n      console.error('No files found.')\n      process.exitCode = 1\n      if (args.length === 1) {\n        const maybe = args[0]?.match(/^(plugin|config)s?$/)\n        if (maybe) {\n          console.error(`(Did you mean 'tap ${maybe[1]} list'?)`)\n        }\n      }\n    }\n  }\n  return files\n}\n\nconst expandDirectories = async (\n  config: LoadedConfig,\n  scurry: PathScurry,\n  entries: Set<Path | '-' | '/dev/stdin'>,\n  ignore: string | string[] | IgnoreLike | undefined\n) => {\n  // for each one that's a directory, expand it with the files it contains\n  // then go back to the original dir when we're done expanding.\n  const originalCwd = scurry.cwd\n  for (const entry of entries) {\n    if (typeof entry === 'string') continue\n    if (entry.isDirectory()) {\n      entries.delete(entry)\n      scurry.chdir(entry)\n      // if we match a dir, then pull in any runnable files from within it\n      for (const s of await glob(config.expandInclude(dirInclude), {\n        scurry,\n        ignore,\n        withFileTypes: true,\n      })) {\n        entries.add(s)\n      }\n    }\n  }\n  scurry.chdir(originalCwd)\n}\n\n// delete all the entries in the set that do not reference files\n// that have changed since the last run.\nconst pruneUnchanged = async (\n  scurry: PathScurry,\n  entries: Set<Path | '-' | '/dev/stdin'>\n) => {\n  const dir = scurry.resolve('.tap/processinfo')\n  const db = new ProcessInfo({ dir })\n  await db.load()\n  // for each entry in the list, find it in the processinfo db's list\n  // of externalIDs with changed files. but, we only need to check the\n  // ones for which there is SOME externalID node in the processinfo,\n  // because otherwise that means it's never been run.\n  const ids = new Map<string, Path>()\n  for (const e of entries) {\n    if (typeof e === 'string') continue\n    const rp = e.relativePosix()\n    const pi = db.externalIDs.get(rp)\n    if (!pi) {\n      // if there's no processinfo entry for it, then it must be new\n      // so don't even check it.\n      continue\n    }\n    ids.set(rp, e)\n  }\n  const changed = await db.externalIDsChanged(id => ids.has(id))\n  for (const [id, e] of ids.entries()) {\n    if (!changed.has(id)) {\n      entries.delete(e)\n    }\n  }\n}\n"]}