{"version":3,"file":"select-version.js","sourceRoot":"","sources":["../../src/select-version.ts"],"names":[],"mappings":"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","sourcesContent":["import { LoadedConfig } from '@tapjs/config'\nimport { readFileSync } from 'fs'\nimport pacote from 'pacote'\nimport { resolveImport } from 'resolve-import'\nimport { gt, satisfies } from 'semver'\nimport { fileURLToPath } from 'url'\nimport { npmBg } from './npm.js'\n\nconst corePJ = await resolveImport('@tapjs/core/package.json')\nconst { version: coreVersion } = JSON.parse(\n  readFileSync(fileURLToPath(corePJ), 'utf8')\n) as { version: 'string' }\n\nlet registry: string | undefined = undefined\nconst getPackument = async (pkg: string, config: LoadedConfig) => {\n  if (!registry) {\n    const regLookup = npmBg(['config', 'get', 'registry'], config)\n    if (regLookup.error) throw regLookup.error\n    if (regLookup.status || regLookup.signal) {\n      throw new Error(\n        'failed to look up npm registry: ' + regLookup.stderr.trim()\n      )\n    }\n    registry = regLookup.stdout.trim()\n  }\n  return await pacote.packument(pkg, { registry })\n}\n\n/**\n * Select the highest version acceptable, preferring @latest and non-pre\n * versions over prereleases.\n *\n * Filter by the ones whose peerDependencies will allow the current\n * @tapjs/core. Returns `undefined` if no version matches.\n */\nexport const selectVersion = async (\n  name: string,\n  range: string = '',\n  config: LoadedConfig\n) => {\n  const packu = await getPackument(name, config)\n  let acceptable: string | undefined = undefined\n  let acceptablePre: string | undefined = undefined\n  for (const [ver, mani] of Object.entries(packu.versions)) {\n    const { '@tapjs/core': corePeerDep } = mani.peerDependencies || {\n      '@tapjs/core': undefined,\n    }\n    if (\n      typeof corePeerDep === 'string' &&\n      !satisfies(coreVersion, corePeerDep)\n    ) {\n      continue\n    }\n\n    if (satisfies(ver, range)) {\n      acceptable = newIfGt(acceptable, ver)\n      acceptablePre = newIfGt(acceptablePre, ver)\n    } else if (satisfies(ver, range, { includePrerelease: true })) {\n      acceptablePre = newIfGt(acceptablePre, ver)\n    } else {\n      continue\n    }\n    // if the @latest is acceptable, use that always\n    if (ver === packu['dist-tags'].latest) return ver\n  }\n\n  return acceptable || acceptablePre\n}\n\n// use the new version if it's newer than the older version\nconst newIfGt = (old: string | undefined, neu: string) =>\n  old === undefined || gt(neu, old) ? neu : old\n"]}