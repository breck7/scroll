{"version":3,"file":"watch.js","sourceRoot":"","sources":["../../../src/repl/watch.ts"],"names":[],"mappings":"AAAA,2CAA2C;AAC3C,EAAE;AACF,gEAAgE;AAChE,+DAA+D;AAC/D,iDAAiD;AACjD,EAAE;AACF,gEAAgE;AAChE,oEAAoE;AACpE,kEAAkE;AAClE,QAAQ;AAGR,OAAO,EAAE,KAAK,EAAE,MAAM,UAAU,CAAA;AAEhC,OAAO,EAAE,OAAO,EAAE,MAAM,uBAAuB,CAAA;AAE/C,MAAM,OAAO,KAAK;IAChB,WAAW,CAAa;IACxB,WAAW,CAAY;IACvB,YAAY,GAAa,EAAE,CAAA;IAC3B,QAAQ,CAAW;IAEnB,IAAI,QAAQ;QACV,OAAO,CAAC,CAAC,IAAI,CAAC,WAAW,CAAA;IAC3B,CAAC;IAED,YAAY,WAAwB,EAAE,QAAmB;QACvD,IAAI,CAAC,WAAW,GAAG,WAAW,CAAA;QAC9B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAA;IAC1B,CAAC;IAED,oEAAoE;IACpE,qEAAqE;IACrE,oEAAoE;IACpE,uBAAuB;IACvB,KAAK,CAAC,eAAe;QACnB,uDAAuD;QACvD,kEAAkE;QAClE,4BAA4B;QAC5B,MAAM,CAAC,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,kBAAkB,CACjD,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,MAAM,CACpB,CAAA;QACD,OAAO,CAAC,CAAC,IAAI,KAAK,CAAC,CAAA;IACrB,CAAC;IAED,KAAK;QACH,MAAM,KAAK,GAAa,EAAE,CAAA;QAC1B,KAAK,MAAM,CAAC,IAAI,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,EAAE,EAAE;YAC7C,qBAAqB;YACrB,IAAI,CAAC,CAAC;gBAAE,SAAQ;YAChB,oBAAoB;YACpB,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;SACd;QAED,mDAAmD;QACnD,IAAI,UAAU,GACZ,KAAK,CAAC,MAAM,KAAK,IAAI,CAAC,YAAY,CAAC,MAAM,CAAA;QAC3C,IAAI,CAAC,UAAU,EAAE;YACf,KAAK,MAAM,CAAC,IAAI,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,EAAE,EAAE;gBAC7C,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE;oBAClC,UAAU,GAAG,IAAI,CAAA;oBACjB,MAAK;iBACN;aACF;SACF;QAED,gEAAgE;QAChE,IAAI,UAAU,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;YACnC,IAAI,CAAC,YAAY,GAAG,KAAK,CAAA;YACzB,IAAI,IAAI,CAAC,WAAW;gBAAE,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAA;YAC9C,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,YAAY,EAAE,OAAO,CAAC,CAAA;YACpD,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,EAAU,EAAE,EAAE;gBACxC,yDAAyD;gBACzD,iBAAiB;gBACjB,IAAI,EAAE,KAAK,KAAK;oBAAE,OAAM;gBACxB,IAAI,CAAC,QAAQ,EAAE,CAAA;YACjB,CAAC,CAAC,CAAA;SACH;IACH,CAAC;IAED,KAAK;QACH,IAAI,CAAC,IAAI,CAAC,QAAQ;YAAE,OAAM;QAC1B,IAAI,CAAC,WAAW,EAAE,KAAK,EAAE,CAAA;QACzB,IAAI,CAAC,WAAW,GAAG,SAAS,CAAA;IAC9B,CAAC;CACF","sourcesContent":["// a watcher that watches files for changes\n//\n// A watcher is set on the .tap/processinfo folder if it exists,\n// which marks the ProcessInfo db as dirty. If it's dirty, then\n// we need to reload it before computing changes.\n//\n// Because the tap runner can already do a --changed run, we can\n// just emit that *some* change happened. The specific files changed\n// doesn't matter, just that it was one of the files involved in a\n// test.\n\nimport { ProcessInfo } from '@tapjs/processinfo'\nimport { watch } from 'chokidar'\nimport type { FSWatcher } from 'node:fs'\nimport { options } from './chokidar-options.js'\n\nexport class Watch {\n  processInfo: ProcessInfo\n  fileWatcher?: FSWatcher\n  watchedFiles: string[] = []\n  onChange: () => any\n\n  get watching(): boolean {\n    return !!this.fileWatcher\n  }\n\n  constructor(processInfo: ProcessInfo, onChange: () => any) {\n    this.processInfo = processInfo\n    this.onChange = onChange\n  }\n\n  // Validate that a change which occurs mid-process is still relevant\n  // later. If a change is made to a test file while tests are running,\n  // it might end up being made obsolete by the test running after the\n  // change has occurred.\n  async validateChanges() {\n    // only care about top-level externalID processes here.\n    // if the user set an externalID on a t.spawn() process in a test,\n    // then that's not relevant.\n    const c = await this.processInfo.externalIDsChanged(\n      (_, c) => !c.parent\n    )\n    return c.size !== 0\n  }\n\n  start() {\n    const files: string[] = []\n    for (const f of this.processInfo.files.keys()) {\n      /* c8 ignore start */\n      if (!f) continue\n      /* c8 ignore stop */\n      files.push(f)\n    }\n\n    // if the number of files changed, definitely dirty\n    let filesDirty: boolean =\n      files.length !== this.watchedFiles.length\n    if (!filesDirty) {\n      for (const f of this.processInfo.files.keys()) {\n        if (!this.watchedFiles.includes(f)) {\n          filesDirty = true\n          break\n        }\n      }\n    }\n\n    // if already watching and no change to file list, nothing to do\n    if (filesDirty || !this.fileWatcher) {\n      this.watchedFiles = files\n      if (this.fileWatcher) this.fileWatcher.close()\n      this.fileWatcher = watch(this.watchedFiles, options)\n      this.fileWatcher.on('all', (ev: string) => {\n        // don't care about adds here, we already know what files\n        // we care about.\n        if (ev === 'add') return\n        this.onChange()\n      })\n    }\n  }\n\n  close() {\n    if (!this.watching) return\n    this.fileWatcher?.close()\n    this.fileWatcher = undefined\n  }\n}\n"]}