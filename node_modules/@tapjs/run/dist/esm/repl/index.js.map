{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/repl/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { LoadedConfig } from '@tapjs/config'\nimport { ProcessInfo, ProcessInfoNode } from '@tapjs/processinfo'\nimport chalk from 'chalk'\nimport { FSWatcher, watch } from 'chokidar'\nimport { mkdirpSync } from 'mkdirp'\nimport { ChildProcess, spawn, SpawnOptions } from 'node:child_process'\nimport { readFile } from 'node:fs/promises'\nimport { isAbsolute, relative, resolve } from 'node:path'\nimport type { REPLServer } from 'node:repl'\nimport { start } from 'node:repl'\nimport { fileURLToPath } from 'node:url'\nimport { resolveImport } from 'resolve-import'\nimport { rimrafSync } from 'rimraf'\nimport { stringify } from 'tap-yaml'\nimport { Deferred } from 'trivial-deferred'\nimport { options } from './chokidar-options.js'\nimport { fileCompleter } from './file-completer.js'\nimport { filterCompletions } from './filter-completions.js'\nimport { processinfoCompletions } from './processinfo-completions.js'\nimport { Watch } from './watch.js'\n\nconst tapBin = fileURLToPath(\n  await resolveImport('../index.js', import.meta.url)\n)\n\ntype NodeCallback = (er: Error | null, result: any) => void\n\nconst KILL_TIMEOUT =\n  Number(process.env._TAP_REPL_KILL_TIMEOUT) || 2000\n\n/**\n * A {@link\n * https://tapjs.github.io/processinfo/classes/process_info_node.ProcessInfoNode.html\n * | ProcessInfoNode}, as printed to the repl output.\n */\nexport type PrintedProcessInfoNode = {\n  date: string\n  command: string\n  args: string[]\n  cwd: string\n  pid: number\n  ppid: number\n  children?: { [k: string]: PrintedProcessInfoNode }\n  code?: number\n  signal?: NodeJS.Signals\n  runtime?: number\n  parent?: string\n}\n\nconst commands = [\n  'r',\n  'u',\n  'n',\n  'f',\n  'f?',\n  'c',\n  'i',\n  'w',\n  'w?',\n  'cls',\n  'parse',\n  'plugin',\n  'build',\n  'version',\n  'versions',\n  'list',\n  'config',\n  'tap',\n]\n\nexport const usage = `TAP Repl Commands\n\nr [<filename>]\n  run the test suite, or just the specified test\n\nu [<filename>]\n  update snapshots in the suite, or just the specified test\n\nn\n  run files changed since the last run\n\nf\n  run tests that previously failed, or all tests if there are no\n  failures from any previous runs\n\nf?\n  show the list of tests that failed in the previous run\n\nc [<style>]\n  run a coverage report for the most recent test run\n\ni [<filename | uuid>]\n  print process info for the specified test file in the last run, or\n  show a list of process info keys if no id provided\n\nw [ on | off ]\n  toggle the file watcher on/off\n\nw?\n  show information about file watch status\n\ncls\n  clear the screen\n\nparse [<options>]\n  parse TAP from stdin and print results\n  see 'parse -h' for options\n\nplugin [add <plugin> | rm <plugin> | list]\n  manage tap plugins (see tap --help for details)\n\nbuild\n  build the tap Test class with the configured plugins\n\nversion\n  print the version of tap in use\n\nversions\n  print the version of tap and all components and plugins\n\nlist\n  print the list of test files that will be run by default\n\nconfig\n  show the config options currently in use\n\ntap [<args>]\n  run any other arbitrary tap command (run 'tap help' for details)\n  ('tap repl' is not allowed)\n`\n\nexport class Repl {\n  input: NodeJS.ReadStream\n  output: NodeJS.WriteStream\n  repl?: REPLServer\n  config: LoadedConfig\n  dir: string\n  saveFile: string\n  // the process always inherits our stdio\n  proc?: ChildProcess\n\n  processInfo: ProcessInfo\n  watch: Watch\n  #haveChanges: boolean = false\n\n  #piReloading: boolean = false\n  #piWatcher: FSWatcher\n  #queue: [string, Deferred<any>][] = []\n\n  #inputEnded: boolean = false\n\n  constructor(\n    config: LoadedConfig,\n    input: NodeJS.ReadStream = process.stdin,\n    output: NodeJS.WriteStream = process.stdout,\n    processInfo: ProcessInfo = ProcessInfo.loadSync({\n      dir: resolve(config.globCwd, '.tap/processinfo'),\n    })\n  ) {\n    this.input = input\n    this.output = output\n    this.config = config\n    this.dir = resolve(config.globCwd, '.tap')\n    this.processInfo = processInfo\n    this.saveFile =\n      config.get('save') || resolve(this.dir, 'repl_failures')\n\n    this.watch = new Watch(this.processInfo, () =>\n      this.#onWatchChange()\n    )\n\n    this.#piWatcher = watch(resolve(this.dir, 'processinfo'), options)\n    this.#piWatcher.on('all', () => this.#piReload())\n  }\n\n  async #piReload() {\n    if (this.#piReloading) return\n    this.#piReloading = true\n    await this.processInfo.load()\n    this.#piReloading = false\n  }\n\n  start() {\n    this.repl = start({\n      useColors: chalk.level > 0,\n      input: this.input,\n      output: this.output,\n      prompt: 'TAP> ',\n      eval: (input: string, _: any, __: any, cb: NodeCallback) =>\n        this.parseCommand(input).then((res?: any) => {\n          cb(null, res)\n          while (this.#queue.length && !this.proc) {\n            const [input, d] = this.#queue[0] as [\n              string,\n              Deferred<any>\n            ]\n            this.#queue.shift()\n            d.resolve(this.parseCommand(input))\n          }\n          if (this.#inputEnded && !this.#queue.length && !this.proc) {\n            this.exit()\n          }\n        }),\n      /* c8 ignore start */\n      completer: (input: string) => this.completer(input),\n      /* c8 ignore stop */\n      writer: res =>\n        res === undefined\n          ? ''\n          : typeof res === 'string'\n          ? res\n          : stringify(res),\n      // we don't actually eval anything, save the CPU cycles\n      useGlobal: true,\n    })\n    Object.assign(this.repl, {\n      // doesn't really make sense to have all default Node.js repl commands\n      // since we're not parsing JavaScript\n      commands: {},\n    })\n\n    // ignore the callback, it's best-effort\n    /* c8 ignore start */\n    mkdirpSync(this.dir)\n    this.repl.setupHistory(\n      resolve(this.dir, 'repl_history'),\n      () => {}\n    )\n    /* c8 ignore stop */\n\n    this.input.on('end', () => this.#onInputEnd())\n    this.input.on('close', () => this.#onInputEnd())\n    const osi = () => this.#onSigint()\n    process.removeAllListeners('SIGINT')\n    process.on('SIGINT', osi)\n    // suppress the \"press ^C again to exit\" message\n    this.repl.removeAllListeners('SIGINT')\n    this.repl.on('SIGINT', osi)\n  }\n\n  #onInputEnd() {\n    this.#inputEnded = true\n    if (!this.proc) {\n      this.exit()\n    }\n  }\n\n  #killProc(signal: 'SIGINT' | 'SIGTERM' | 'SIGKILL' = 'SIGINT') {\n    if (!this.proc) return\n    this.proc.kill(signal)\n    const next =\n      signal === 'SIGINT'\n        ? 'SIGTERM'\n        : signal === 'SIGTERM'\n        ? 'SIGKILL'\n        : null\n    if (next) {\n      setTimeout(() => this.#killProc(next), KILL_TIMEOUT)?.unref?.()\n    }\n  }\n\n  #onSigint() {\n    this.output.write(this.proc ? '\\n' : '^C\\n')\n    if (this.proc) {\n      this.#killProc('SIGINT')\n    } else {\n      this.exit()\n      process.removeAllListeners('SIGINT')\n      process.kill(process.pid, 'SIGINT')\n    }\n  }\n\n  async parseCommand(input: string): Promise<any | void> {\n    if (this.proc) {\n      const d = new Deferred<any>()\n      this.#queue.push([input, d])\n      return d.promise\n    }\n    if (!this.input.isTTY) {\n      this.output.write(input)\n    }\n    const words = input\n      .trim()\n      .split(' ')\n      .map(s => s.trim())\n    const cmd = words[0]\n    const args = words.slice(1)\n    switch (cmd) {\n      case 'r':\n        return this.runTests(args)\n      case 'n':\n        return this.runChanged(args)\n      case 'f':\n        return this.runFailed(args)\n      case 'f?':\n        return this.showFailed()\n      case 'u':\n        return this.updateSnapshots(args)\n      case 'w':\n        return this.toggleWatch(args)\n      case 'w?':\n        return this.showWatch()\n      case 'c':\n        return this.report(args)\n      case 'i':\n        return this.info(args)\n      case 'cls':\n        return this.cls()\n      case 'parse':\n        return this.spawnParser(args)\n      case 'tap':\n        return this.spawnTap(args)\n      case 'list':\n      case 'plugin':\n      case 'build':\n      case 'version':\n      case 'versions':\n      case 'config':\n        return this.spawnTap(words)\n      case 'exit':\n        return this.exit()\n      case '':\n        return\n\n      case '-h':\n      case '--help':\n      case 'h':\n      case 'help':\n      case '?':\n      default:\n        return this.help()\n    }\n  }\n\n  async cls() {\n    return '\\x1b[2J\\x1b[H'\n  }\n\n  #setRawMode(mode: boolean) {\n    // ignored to avoid the ?., which is only there because the stream\n    // might not have this method.\n    /* c8 ignore start */\n    this.input.setRawMode?.(mode)\n    /* c8 ignore stop */\n  }\n\n  exit() {\n    this.#setRawMode(false)\n    this.showCursor()\n    this.repl?.close?.()\n    this.watch?.close?.()\n    this.#piWatcher?.close?.()\n    this.#killProc('SIGTERM')\n  }\n\n  showCursor() {\n    this.output.write('\\x1b[?25h')\n  }\n\n  async help() {\n    return usage\n  }\n\n  async #spawn(\n    cmd: string,\n    args: string[],\n    options: SpawnOptions = {}\n  ) {\n    /* c8 ignore start */\n    if (this.proc) return 'command in progress, please wait'\n    /* c8 ignore stop */\n    this.repl?.pause()\n    // inherit environment except what is specified, if anything\n    // delete anything specified as undefined\n    const env = { ...process.env, ...(options.env || {}) }\n    // always save failures to our save file\n    env.TAP_SAVE = this.saveFile\n\n    env._TAP_REPL = '1'\n\n    this.#setRawMode(false)\n    const proc = (this.proc = spawn(cmd, args, {\n      ...options,\n      env,\n      stdio: 'inherit',\n    }))\n    return new Promise<any | void>(res => {\n      proc.on('close', (code, signal) =>\n        res(this.#onSpawnClose(code, signal))\n      )\n    })\n  }\n\n  async #onSpawnClose(\n    code: null | number,\n    signal: null | NodeJS.Signals\n  ) {\n    this.proc = undefined\n    this.repl?.resume()\n    this.#setRawMode(true)\n    this.showCursor()\n    if (this.#haveChanges && (await this.watch.validateChanges())) {\n      // A change occurred while the process was running, and we've validated\n      // that it wasn't made irrelevant by the test eventually running that\n      // file.\n      this.output.write(stringify({ code, signal }))\n      return this.runChanged([])\n    } else {\n      return { code, signal }\n    }\n  }\n\n  async #onWatchChange() {\n    if (!this.proc) {\n      this.output.write('change detected\\n')\n      this.output.write(stringify(await this.runChanged([])) + '\\n')\n      this.repl?.displayPrompt()\n    } else {\n      this.#haveChanges = true\n    }\n  }\n\n  // spawn the tap runner with the specified arguments\n  async spawnTap(args: string[], options?: SpawnOptions) {\n    const argv = [...process.execArgv, tapBin, ...args]\n    return this.#spawn(process.execPath, argv, options)\n  }\n\n  async runTests(args: string[]) {\n    // run all the tests in the suite like normal\n    // If we have any args, then use a saveFile so that we don't\n    // blow away our coverage and processinfo\n    rimrafSync(this.saveFile)\n    const env = args.length\n      ? { TAP_CHANGED: '0', TAP_COVERAGE_ADD: '1' }\n      : process.env\n    return this.spawnTap(['run', ...args], { env })\n  }\n\n  async runChanged(args: string[]) {\n    rimrafSync(this.saveFile)\n    return this.spawnTap(['run', ...args], {\n      env: { TAP_CHANGED: '1' },\n    })\n  }\n\n  async showFailed() {\n    const fails = (\n      await readFile(this.saveFile, 'utf8').catch(() => '')\n    ).trim()\n    if (!fails) return 'no failed tests from previous runs'\n    else return fails.split('\\n')\n  }\n\n  async runFailed(args: string[]) {\n    return this.spawnTap(['run', ...args])\n  }\n\n  updateSnapshots(args: string[]) {\n    const TAP_COVERAGE_ADD = args.length ? '1' : '0'\n    rimrafSync(this.saveFile)\n    const env = {\n      TAP_CHANGED: '0',\n      TAP_SNAPSHOT: '1',\n      TAP_COVERAGE_ADD,\n    }\n    this.spawnTap(['run', ...args], { env })\n  }\n\n  async toggleWatch(args: string[]) {\n    const on =\n      args[0] === 'on'\n        ? true\n        : /* c8 ignore start */\n        args[1] === 'off'\n        ? false\n        : /* c8 ignore stop */\n          !this.watch.watching\n    this.watch[on ? 'start' : 'close']()\n    return this.showWatch()\n  }\n\n  async showWatch() {\n    const w = this.watch\n    if (!w.watching) return 'not watching files for changes'\n    const { watchedFiles } = w\n    const localFiles: string[] = []\n    let deps: number = 0\n    const here = resolve(this.config.globCwd)\n    for (const f of watchedFiles) {\n      const rel = relative(here, f)\n      if (\n        rel.startsWith('..') ||\n        isAbsolute(rel) ||\n        /[\\\\\\/]node_modules[\\\\\\/]/.test(rel)\n      ) {\n        deps++\n      } else {\n        localFiles.push(rel)\n      }\n    }\n    const res: Record<string, any> = {\n      [`${localFiles.length} local files being watched`]:\n        localFiles.sort((a, b) => a.localeCompare(b, 'en')),\n      'dependency files watched': deps,\n    }\n\n    return res\n  }\n\n  async report(args: string[]) {\n    return this.spawnTap(['report', ...args])\n  }\n\n  #printPIN(\n    node: ProcessInfoNode & {\n      code?: number | null\n      signal?: NodeJS.Signals | null\n      runtime?: number\n    },\n    showParent: boolean = false\n  ): PrintedProcessInfoNode {\n    const args = [...node.execArgv, ...node.argv.slice(1)]\n    const pin: PrintedProcessInfoNode = {\n      date: node.date,\n      command: node.argv[0] as string,\n      args,\n      cwd: node.cwd,\n      pid: node.pid,\n      ppid: node.ppid,\n    }\n    if (showParent && node.parent) pin.parent = node.parent.uuid\n    if (node.children) {\n      pin.children = Object.fromEntries(\n        [...node.children]\n          // nondeterministic\n          /* c8 ignore start */\n          .sort(({ date: a }, { date: b }) =>\n            a.localeCompare(b, 'en')\n          )\n          /* c8 ignore stop */\n          .map(c => [c.uuid, this.#printPIN(c)])\n      )\n    }\n    if (node.code !== null) pin.code = node.code\n    /* c8 ignore start */\n    if (node.signal !== null) pin.signal = node.signal\n    /* c8 ignore stop */\n    if (node.runtime) pin.runtime = node.runtime\n    return pin\n  }\n\n  async info(args: string[]) {\n    if (!args.length) {\n      return {\n        'Provide a test id to get information': [\n          ...this.processInfo.externalIDs.keys(),\n        ],\n      }\n    }\n    return Object.fromEntries(\n      args.map(id => {\n        const pin =\n          this.processInfo.externalIDs.get(id) ||\n          this.processInfo.uuids.get(id)\n        return [id, pin ? this.#printPIN(pin, true) : 'no data found']\n      })\n    )\n  }\n\n  async spawnParser(args: string[]) {\n    this.output.write('Parsing TAP from stdin. Press ^D to finish.\\n')\n    this.#spawn('tap-parser', args)\n  }\n\n  completer(input: string) {\n    const words = input\n      .trimStart()\n      .split(' ')\n      .map(s => s.trim())\n    const cmd = words[0]\n    const args = words.slice(1)\n    switch (cmd) {\n      // resolve against filenames\n      case 'r':\n      case 'u':\n      case 'n':\n      case 'f':\n        return fileCompleter(args, input)\n      case 'f?':\n      case 'w':\n      case 'w?':\n      case 'cls':\n      case 'parse':\n      case 'build':\n      case 'version':\n      case 'versions':\n      case 'list':\n      case 'config':\n        return [[cmd], input]\n      case 'i':\n        return processinfoCompletions(this.processInfo, args, input)\n      default:\n        return [filterCompletions(commands, input), input]\n    }\n  }\n}\n"]}