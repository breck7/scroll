{"version":3,"file":"file-completer.js","sourceRoot":"","sources":["../../../src/repl/file-completer.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,QAAQ,EAAE,MAAM,SAAS,CAAA;AAC/C,OAAO,EAAE,OAAO,EAAE,GAAG,EAAE,MAAM,WAAW,CAAA;AACxC,OAAO,EAAE,iBAAiB,EAAE,MAAM,yBAAyB,CAAA;AAE3D,MAAM,CAAC,MAAM,aAAa,GAAG,CAAC,IAAc,EAAE,KAAa,EAAE,EAAE;IAC7D,MAAM,EAAE,GAAG,IAAI,CAAC,GAAG,EAAE,IAAI,EAAE,CAAA;IAC3B,MAAM,CAAC,GAAG,OAAO,CAAC,EAAE,CAAC,CAAA;IACrB,MAAM,GAAG,GAAG,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAA;IAC5D,MAAM,IAAI,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC,EAAE,KAAK,CAAC,MAAM,GAAG,EAAE,CAAC,MAAM,CAAC,CAAA;IACzD,IAAI;QACF,MAAM,OAAO,GAAG,iBAAiB,CAC/B,WAAW,CAAC,GAAG,IAAI,GAAG,CAAC;YACrB,oBAAoB;YACpB,qBAAqB;aACpB,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;YACzC,oBAAoB;aACnB,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;aACzD,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,GAAG,GAAG,GAAG,CAAC,CAAC,EAC3B,KAAK,CACN,CAAA;QACD,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,GAAG,CAAC,EAAE;YACtD,OAAO,CAAC,CAAC,CAAC,IAAI,GAAG,CAAA;SAClB;QACD,OAAO,CAAC,OAAO,EAAE,KAAK,CAAC,CAAA;KACxB;IAAC,MAAM;QACN,OAAO,CAAC,EAAE,EAAE,KAAK,CAAC,CAAA;KACnB;AACH,CAAC,CAAA","sourcesContent":["import { readdirSync, statSync } from 'node:fs'\nimport { dirname, sep } from 'node:path'\nimport { filterCompletions } from './filter-completions.js'\n\nexport const fileCompleter = (args: string[], input: string) => {\n  const lw = args.pop() || ''\n  const d = dirname(lw)\n  const dir = lw.endsWith(sep) ? lw : d === '.' ? '' : d + sep\n  const stem = input.substring(0, input.length - lw.length)\n  try {\n    const matches = filterCompletions(\n      readdirSync(dir || '.')\n        // non-deterministic\n        /* c8 ignore start */\n        .sort((a, b) => a.localeCompare(b, 'en'))\n        /* c8 ignore stop */\n        .map(f => (statSync(dir + f).isDirectory() ? f + sep : f))\n        .map(f => stem + dir + f),\n      input\n    )\n    if (matches.length === 1 && !matches[0]?.endsWith(sep)) {\n      matches[0] += ' '\n    }\n    return [matches, input]\n  } catch {\n    return [[], input]\n  }\n}\n"]}