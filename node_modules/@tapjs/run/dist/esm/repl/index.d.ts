/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { LoadedConfig } from '@tapjs/config';
import { ProcessInfo } from '@tapjs/processinfo';
import { ChildProcess, SpawnOptions } from 'node:child_process';
import type { REPLServer } from 'node:repl';
import { Watch } from './watch.js';
/**
 * A {@link
 * https://tapjs.github.io/processinfo/classes/process_info_node.ProcessInfoNode.html
 * | ProcessInfoNode}, as printed to the repl output.
 */
export type PrintedProcessInfoNode = {
    date: string;
    command: string;
    args: string[];
    cwd: string;
    pid: number;
    ppid: number;
    children?: {
        [k: string]: PrintedProcessInfoNode;
    };
    code?: number;
    signal?: NodeJS.Signals;
    runtime?: number;
    parent?: string;
};
export declare const usage = "TAP Repl Commands\n\nr [<filename>]\n  run the test suite, or just the specified test\n\nu [<filename>]\n  update snapshots in the suite, or just the specified test\n\nn\n  run files changed since the last run\n\nf\n  run tests that previously failed, or all tests if there are no\n  failures from any previous runs\n\nf?\n  show the list of tests that failed in the previous run\n\nc [<style>]\n  run a coverage report for the most recent test run\n\ni [<filename | uuid>]\n  print process info for the specified test file in the last run, or\n  show a list of process info keys if no id provided\n\nw [ on | off ]\n  toggle the file watcher on/off\n\nw?\n  show information about file watch status\n\ncls\n  clear the screen\n\nparse [<options>]\n  parse TAP from stdin and print results\n  see 'parse -h' for options\n\nplugin [add <plugin> | rm <plugin> | list]\n  manage tap plugins (see tap --help for details)\n\nbuild\n  build the tap Test class with the configured plugins\n\nversion\n  print the version of tap in use\n\nversions\n  print the version of tap and all components and plugins\n\nlist\n  print the list of test files that will be run by default\n\nconfig\n  show the config options currently in use\n\ntap [<args>]\n  run any other arbitrary tap command (run 'tap help' for details)\n  ('tap repl' is not allowed)\n";
export declare class Repl {
    #private;
    input: NodeJS.ReadStream;
    output: NodeJS.WriteStream;
    repl?: REPLServer;
    config: LoadedConfig;
    dir: string;
    saveFile: string;
    proc?: ChildProcess;
    processInfo: ProcessInfo;
    watch: Watch;
    constructor(config: LoadedConfig, input?: NodeJS.ReadStream, output?: NodeJS.WriteStream, processInfo?: ProcessInfo);
    start(): void;
    parseCommand(input: string): Promise<any | void>;
    cls(): Promise<string>;
    exit(): void;
    showCursor(): void;
    help(): Promise<string>;
    spawnTap(args: string[], options?: SpawnOptions): Promise<any>;
    runTests(args: string[]): Promise<any>;
    runChanged(args: string[]): Promise<any>;
    showFailed(): Promise<string[] | "no failed tests from previous runs">;
    runFailed(args: string[]): Promise<any>;
    updateSnapshots(args: string[]): void;
    toggleWatch(args: string[]): Promise<Record<string, any> | "not watching files for changes">;
    showWatch(): Promise<Record<string, any> | "not watching files for changes">;
    report(args: string[]): Promise<any>;
    info(args: string[]): Promise<{
        [k: string]: string | PrintedProcessInfoNode;
    } | {
        'Provide a test id to get information': string[];
    }>;
    spawnParser(args: string[]): Promise<void>;
    completer(input: string): (string | string[])[];
}
//# sourceMappingURL=index.d.ts.map