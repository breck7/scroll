{"version":3,"file":"npm.js","sourceRoot":"","sources":["../../src/npm.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * some utilities for interfacing with npm in the `tap plugin` command\n */\n\nimport { LoadedConfig } from '@tapjs/config'\nimport { foregroundChild } from 'foreground-child'\nimport { spawnSync } from 'node:child_process'\nimport { sep } from 'node:path'\nimport { fileURLToPath } from 'node:url'\nimport { resolveImport } from 'resolve-import'\n\n// Figure out the cwd where we should run npm commands.\n// This is important because we need the @tapjs/test module to be able\n// to see the plugins we add.\nlet npmCwd: string\nconst getDepNMParent = async (pkg: string, cwd: string) => {\n  try {\n    const p = fileURLToPath(await resolveImport(pkg, cwd + '/x'))\n    const ppkg = pkg.replace(/\\//, sep)\n    const test = `node_modules${sep}${ppkg}`\n    const i = p.lastIndexOf(test)\n    if (i <= 0) return null\n    return p.substring(0, i - 1)\n  } catch {\n    return null\n  }\n}\n\nconst npmGetPrefix = (cwd: string) =>\n  spawnSync('npm', ['prefix'], {\n    env: npmFreeEnv,\n    encoding: 'utf8',\n    cwd,\n    shell: true,\n  }).stdout || null\n\nexport const npmFindCwd = async (globCwd: string): Promise<string> =>\n  (npmCwd ??=\n    // if tap is in node_modules, take the parent.\n    // almost always going to be the one that hits.\n    (await getDepNMParent('tap', globCwd)) ??\n    // failing that, look for the Test class they're using.\n    (await getDepNMParent('@tapjs/test', globCwd)) ??\n    // the workspace root, if we're in a monorepo workspace\n    npmGetPrefix(globCwd) ??\n    // fall back finally to the project root\n    globCwd)\n\nconst npmFreeEnv = Object.fromEntries(\n  Object.entries(process.env).filter(([k]) => !/^npm_/i.test(k))\n)\n\n/**\n * Run an npm command in the background, returning the result\n */\nexport const npmBg = (args: string[], config: LoadedConfig) =>\n  spawnSync('npm', ['--prefix', npmCwd ?? config.globCwd, ...args], {\n    env: npmFreeEnv,\n    encoding: 'utf8',\n    cwd: npmCwd || config.globCwd,\n    shell: true,\n  })\n\n/**\n * Run an npm command in the foreground\n */\nconst npmFg = (\n  args: string[],\n  config: LoadedConfig,\n  cb: (\n    code: number | null,\n    signal: NodeJS.Signals | null\n  ) =>\n    | number\n    | false\n    | void\n    | NodeJS.Signals\n    | Promise<number | false | void | NodeJS.Signals | undefined>\n    | undefined\n) =>\n  foregroundChild(\n    'npm',\n    // will always have set npmCwd by now\n    /* c8 ignore start */\n    ['--prefix', npmCwd ?? config.globCwd, ...args],\n    {\n      env: npmFreeEnv,\n      cwd: npmCwd || config.globCwd,\n      shell: true,\n      /* c8 ignore stop */\n    },\n    cb\n  )\n\n// suppress all non-essential npm output\nconst quiet = ['--no-audit', '--loglevel=error', '--no-progress']\n\nexport const install = async (\n  pkgs: string[],\n  config: LoadedConfig\n) => {\n  await npmFindCwd(config.globCwd)\n  const args = ['install', ...quiet, '--save-dev', ...pkgs]\n  await new Promise<void>((res, rej) => {\n    npmFg(args, config, (code, signal) => {\n      // allow error exit to proceed\n      if (code || signal) {\n        rej(\n          Object.assign(new Error('install failed'), { code, signal })\n        )\n        return\n      }\n      res()\n      // do not exit\n      return false\n    })\n  })\n}\n\nexport const uninstall = async (\n  pkgs: string[],\n  config: LoadedConfig\n) => {\n  await npmFindCwd(config.globCwd)\n  const args = ['rm', ...quiet, ...pkgs]\n  await new Promise<void>(res =>\n    npmFg(args, config, (code, signal) => {\n      // allow error exit to proceed\n      res()\n      return code || signal ? undefined : false\n    })\n  )\n}\n"]}