{"version":3,"file":"get-install-set.js","sourceRoot":"","sources":["../../src/get-install-set.ts"],"names":[],"mappings":"AAAA,OAAO,aAAa,CAAA;AAGpB,OAAO,EAAE,cAAc,EAAE,MAAM,aAAa,CAAA;AAC5C,OAAO,KAAK,MAAM,OAAO,CAAA;AACzB,OAAO,EAAE,KAAK,EAAE,MAAM,aAAa,CAAA;AACnC,OAAO,EAAE,gBAAgB,EAAE,MAAM,yBAAyB,CAAA;AAC1D,OAAO,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAA;AAE3C,MAAM,MAAM,GAAG,CAAC,CAAS,EAAE,EAAE,CAC3B,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CACX,GAAG,EAAE,CAAC,IAAI,EACV,GAAG,EAAE,CAAC,KAAK,CACZ,CAAA;AAEH,MAAM,CAAC,MAAM,aAAa,GAAG,KAAK,EAChC,IAAc,EACd,MAAoB,EACpB,EAAE;IACF,+CAA+C;IAE/C,qBAAqB;IACrB,MAAM,EAAE,GAAG,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAA;IACrC,oBAAoB;IACpB,MAAM,EAAE,GAAG,MAAM,CAAC,UAAU,CAAA;IAC5B,MAAM,KAAK,GAAG,IAAI,GAAG,EAAU,CAAA;IAC/B,MAAM,WAAW,GAAG,IAAI,GAAG,EAAU,CAAA;IACrC,MAAM,WAAW,GAAG,IAAI,GAAG,EAAU,CAAA;IACrC,KAAK,MAAM,MAAM,IAAI,IAAI,EAAE;QACzB,MAAM,EAAE,IAAI,EAAE,gBAAgB,EAAE,WAAW,EAAE,GAC3C,MAAM,gBAAgB,CAAC,MAAM,EAAE,MAAM,CAAC,CAAA;QAExC,wDAAwD;QACxD,kBAAkB;QAClB,IAAI,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,gBAAgB,KAAK,WAAW,EAAE;YACzD,OAAO,CAAC,KAAK,CAAC,0BAA0B,GAAG,MAAM,CAAC,CAAA;YAClD,SAAQ;SACT;QAED,IAAI,WAAW,KAAK,SAAS,EAAE;YAC7B,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,kBAAkB,MAAM,GAAG,CAAC,CAAC,CAAA;YACrD,OAAO,CAAC,KAAK,CACX,kEAAkE,CACnE,CAAA;YACD,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;SAChB;QAED,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;QAEf,qCAAqC;QACrC,IAAI,EAAE,CAAC,QAAQ,CAAC,IAAI,IAAI,EAAE,CAAC,EAAE;YAC3B,EAAE,CAAC,MAAM,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAA;YACpC,IAAI,cAAc,CAAC,QAAQ,CAAC,IAAI,CAAC;gBAAE,SAAQ;SAC5C;QAED,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;YACtB,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;SACd;QAED,wDAAwD;QACxD,IACE,CAAC,CAAC,MAAM,MAAM,CAAC,MAAM,CAAC,CAAC;YACvB,WAAW;YACX,WAAW,KAAK,gBAAgB,EAChC;YACA,WAAW,CAAC,GAAG,CAAC,GAAG,IAAI,IAAI,WAAW,EAAE,CAAC,CAAA;YACzC,iDAAiD;YACjD,IAAI,CAAC,CAAC,MAAM,SAAS,CAAC,IAAI,CAAC,CAAC,EAAE;gBAC5B,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;aACtB;SACF;KACF;IAED,OAAO,EAAE,KAAK,EAAE,WAAW,EAAE,WAAW,EAAE,CAAA;AAC5C,CAAC,CAAA","sourcesContent":["import '@tapjs/core'\n\nimport { LoadedConfig } from '@tapjs/config'\nimport { defaultPlugins } from '@tapjs/test'\nimport chalk from 'chalk'\nimport { lstat } from 'fs/promises'\nimport { analyzePluginArg } from './analyze-plugin-arg.js'\nimport { pkgExists } from './pkg-exists.js'\n\nconst exists = (f: string) =>\n  lstat(f).then(\n    () => true,\n    () => false\n  )\n\nexport const getInstallSet = async (\n  args: string[],\n  config: LoadedConfig\n) => {\n  // has a default, but tsc doesn't know about it\n\n  /* c8 ignore start */\n  const pc = config.get('plugin') || []\n  /* c8 ignore stop */\n  const pl = config.pluginList\n  const added = new Set<string>()\n  const needInstall = new Set<string>()\n  const needCleanup = new Set<string>()\n  for (const plugin of args) {\n    const { name, versionInstalled, versionWant } =\n      await analyzePluginArg(plugin, config)\n\n    // if we have a version installed, check if it's a match\n    // already present\n    if (pl.includes(name) && versionInstalled === versionWant) {\n      console.error('plugin already present: ' + plugin)\n      continue\n    }\n\n    if (versionWant === undefined) {\n      console.error(chalk.red(`Cannot install ${plugin}.`))\n      console.error(\n        `Version not found, or incompatible with the current tap version.`\n      )\n      process.exit(1)\n    }\n\n    added.add(name)\n\n    // possibly default that was excluded\n    if (pc.includes(`!${name}`)) {\n      pc.splice(pc.indexOf(`!${name}`), 1)\n      if (defaultPlugins.includes(name)) continue\n    }\n\n    if (!pc.includes(name)) {\n      pc.push(name)\n    }\n\n    // if it's not a file on disk, need to try to install it\n    if (\n      !(await exists(plugin)) &&\n      versionWant &&\n      versionWant !== versionInstalled\n    ) {\n      needInstall.add(`${name}@${versionWant}`)\n      // only rollback if it wasn't there to begin with\n      if (!(await pkgExists(name))) {\n        needCleanup.add(name)\n      }\n    }\n  }\n\n  return { added, needInstall, needCleanup }\n}\n"]}