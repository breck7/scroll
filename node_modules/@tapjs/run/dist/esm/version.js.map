{"version":3,"file":"version.js","sourceRoot":"","sources":["../../src/version.ts"],"names":[],"mappings":"AACA,OAAO,KAAK,IAAI,MAAM,UAAU,CAAA;AAChC,OAAO,EAAE,aAAa,EAAE,MAAM,sBAAsB,CAAA;AAEpD,OAAO,EAAE,SAAS,EAAE,MAAM,aAAa,CAAA;AAEvC,MAAM,OAAO,GAAG;IACd,KAAK;IACL,eAAe;IACf,aAAa;IACb,oBAAoB;IACpB,eAAe;IACf,YAAY;IACZ,cAAc;IACd,aAAa;IACb,YAAY;IACZ,UAAU;IACV,UAAU;CACX,CAAA;AAED,MAAM,CAAC,MAAM,OAAO,GAAG,KAAK,EAAE,IAAc,EAAE,MAAoB,EAAE,EAAE,CACpE,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,KAAK,UAAU;IAC9C,CAAC,CAAC,gBAAgB,EAAE;IACpB,CAAC,CAAC,eAAe,EAAE,CAAA;AAEvB,MAAM,CAAC,MAAM,cAAc,GAAG,KAAK,IAAI,EAAE;IACvC,+DAA+D;IAC/D,uBAAuB;IACvB,MAAM,QAAQ,GAAoD,EAAE,CAAA;IACpE,KAAK,MAAM,CAAC,IAAI,OAAO,EAAE;QACvB,MAAM,CAAC,GAAG,aAAa,CAAC,CAAC,CAAC,CAAA;QAC1B,IAAI,CAAC;YAAE,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;KACvB;IAED,MAAM,KAAK,GAAG,SAAS;SACpB,KAAK,CAAC,IAAI,CAAC;SACX,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAA;IAC3C,MAAM,cAAc,GAA2B,EAAE,CAAA;IACjD,KAAK,MAAM,CAAC,IAAI,KAAK,EAAE;QACrB,MAAM,CAAC,GAAG,aAAa,CAAC,CAAC,CAAC,CAAA;QAC1B,IAAI,CAAC,EAAE;YACL,QAAQ,CAAC,OAAO,GAAG,cAAc,CAAA;YACjC,cAAc,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;SACtB;KACF;IAED,OAAO,QAAQ,CAAA;AACjB,CAAC,CAAA;AAED,MAAM,gBAAgB,GAAG,KAAK,IAAI,EAAE;IAClC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,cAAc,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC,CAAA;AAC/D,CAAC,CAAA;AAED,MAAM,eAAe,GAAG,KAAK,IAAI,EAAE;IACjC,MAAM,EAAE,GAAG,aAAa,CAAC,KAAK,CAAC,CAAA;IAC/B,IAAI,EAAE;QAAE,OAAO,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAA;IAC9B,MAAM,EAAE,GAAG,aAAa,CAAC,aAAa,CAAC,CAAA;IACvC,IAAI,EAAE;QAAE,OAAO,OAAO,CAAC,GAAG,CAAC,eAAe,EAAE,EAAE,CAAC,CAAA;IAC/C,MAAM,EAAE,GAAG,aAAa,CAAC,YAAY,CAAC,CAAA;IACtC,IAAI,EAAE;QAAE,OAAO,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,EAAE,CAAC,CAAA;IAC9C,MAAM,IAAI,KAAK,CACb,2DAA2D,CAC5D,CAAA;AACH,CAAC,CAAA","sourcesContent":["import { LoadedConfig } from '@tapjs/config'\nimport * as yaml from 'tap-yaml'\nimport { tryGetVersion } from './try-get-version.js'\n\nimport { signature } from '@tapjs/test'\n\nconst allPkgs = [\n  'tap',\n  '@tapjs/config',\n  '@tapjs/core',\n  '@tapjs/processinfo',\n  '@tapjs/report',\n  '@tapjs/run',\n  '@tapjs/stack',\n  '@tapjs/test',\n  'tap-parser',\n  'tap-yaml',\n  'tcompare',\n]\n\nexport const version = async (args: string[], config: LoadedConfig) =>\n  config.get('versions') || args[0] === 'versions'\n    ? printAllVersions()\n    : printTapVersion()\n\nexport const getAllVersions = async () => {\n  // find all packages anywhere named 'tap', '@tapjs/*', 'tap-*',\n  // treport, or tcompare\n  const versions: Record<string, string | Record<string, string>> = {}\n  for (const p of allPkgs) {\n    const v = tryGetVersion(p)\n    if (v) versions[p] = v\n  }\n\n  const plugs = signature\n    .split('\\n')\n    .sort((a, b) => a.localeCompare(b, 'en'))\n  const pluginVersions: Record<string, string> = {}\n  for (const p of plugs) {\n    const v = tryGetVersion(p)\n    if (v) {\n      versions.plugins = pluginVersions\n      pluginVersions[p] = v\n    }\n  }\n\n  return versions\n}\n\nconst printAllVersions = async () => {\n  console.log(yaml.stringify(await getAllVersions()).trimEnd())\n}\n\nconst printTapVersion = async () => {\n  const tv = tryGetVersion('tap')\n  if (tv) return console.log(tv)\n  const cv = tryGetVersion('@tapjs/core')\n  if (cv) return console.log(`@tapjs/core@${cv}`)\n  const rv = tryGetVersion('@tapjs/run')\n  if (rv) return console.log(`@tapjs/run@${rv}`)\n  throw new Error(\n    'Could not get version for tap, @tapjs/core, or @tapjs/run'\n  )\n}\n"]}