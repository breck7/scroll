{"version":3,"file":"analyze-plugin-arg.js","sourceRoot":"","sources":["../../src/analyze-plugin-arg.ts"],"names":[],"mappings":"AAAA,oDAAoD;AACpD,OAAO,aAAa,CAAA;AAGpB,OAAO,EAAE,cAAc,EAAE,MAAM,aAAa,CAAA;AAC5C,OAAO,EAAE,mBAAmB,EAAE,MAAM,4BAA4B,CAAA;AAChE,OAAO,EAAE,aAAa,EAAE,MAAM,qBAAqB,CAAA;AAEnD,aAAa;AACb,oBAAoB;AACpB,MAAM;AACN,aAAa;AACb,MAAM,KAAK,GACT,gEAAgE,CAAA;AAElE;;;GAGG;AACH,MAAM,CAAC,MAAM,gBAAgB,GAAG,KAAK,EACnC,MAAc,EACd,MAAoB,EACpB,EAAE;IACF,MAAM,QAAQ,GAAG,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAA;IACpC,IAAI,CAAC,QAAQ,IAAI,cAAc,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;QAChD,0DAA0D;QAC1D,OAAO;YACL,IAAI,EAAE,MAAM;YACZ,WAAW,EAAE,EAAE;YACf,gBAAgB,EAAE,EAAE;SACrB,CAAA;KACF;IACD,MAAM,IAAI,GAAG,QAAQ,CAAC,CAAC,CAAW,CAAA;IAClC,MAAM,gBAAgB,GAAG,mBAAmB,CAAC,IAAI,EAAE,MAAM,CAAC,CAAA;IAC1D,MAAM,WAAW,GAAG,MAAM,aAAa,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAA;IAClE,OAAO,EAAE,IAAI,EAAE,gBAAgB,EAAE,WAAW,EAAE,CAAA;AAChD,CAAC,CAAA","sourcesContent":["// import this first so Test exists when we need it.\nimport '@tapjs/core'\n\nimport { LoadedConfig } from '@tapjs/config'\nimport { defaultPlugins } from '@tapjs/test'\nimport { getInstalledVersion } from './get-installed-version.js'\nimport { selectVersion } from './select-version.js'\n\n// @scope/pkg\n// @scope/pkg@semver\n// pkg\n// pkg@semver\nconst pkgRe =\n  /^(@[^\\.\\/_][^\\/]*\\/[^@\\._\\/][^@]*|[^\\._@\\/][^@\\/]*)(?:@(.*))?$/\n\n/**\n * If it's a package, figure out what version we have, what version\n * we want, and what the parsed name of the plugin is.\n */\nexport const analyzePluginArg = async (\n  plugin: string,\n  config: LoadedConfig\n) => {\n  const pkgMatch = plugin.match(pkgRe)\n  if (!pkgMatch || defaultPlugins.includes(plugin)) {\n    // just a folder, not a versioned thing from the registry.\n    return {\n      name: plugin,\n      versionWant: '',\n      versionInstalled: '',\n    }\n  }\n  const name = pkgMatch[1] as string\n  const versionInstalled = getInstalledVersion(name, config)\n  const versionWant = await selectVersion(name, pkgMatch[2], config)\n  return { name, versionInstalled, versionWant }\n}\n"]}