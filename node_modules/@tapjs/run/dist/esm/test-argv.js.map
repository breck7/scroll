{"version":3,"file":"test-argv.js","sourceRoot":"","sources":["../../src/test-argv.ts"],"names":[],"mappings":"AAEA,OAAO,EACL,QAAQ,EACR,aAAa,EACb,eAAe,EACf,OAAO,GACR,MAAM,aAAa,CAAA;AACpB,OAAO,MAAM,MAAM,aAAa,CAAA;AAChC,OAAO,EAAE,aAAa,EAAE,MAAM,gBAAgB,CAAA;AAE9C,oEAAoE;AACpE,MAAM,SAAS,GAAG,CAAC,CAAE,MAA4C;KAC9D,QAAQ,CAAA;AAEX,MAAM,UAAU,GAAG,MAAM,CACvB,MAAM,aAAa,CAAC,aAAa,EAAE,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CACpD,CAAA;AAED,MAAM,cAAc,GAAG,CAAC,OAAiB,EAAE,EAAE,CAC3C,OAAO,CAAC,GAAG,CACT,OAAO,CAAC,GAAG,CAAC,KAAK,EAAC,MAAM,EAAC,EAAE,CACzB,MAAM,CAAC,MAAM,aAAa,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC,CAChD,CACF,CAAA;AACH,MAAM,aAAa,GAAG,MAAM,cAAc,CACxC,SAAS,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,EAAE,CAC/B,CAAA;AACD,MAAM,aAAa,GAAG,MAAM,cAAc,CACxC,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe,CACtC,CAAA;AAED,MAAM,EAAE,GAAG,SAAS;IAClB,CAAC,CAAC,YAAY,MAAM,aAAa,CAC7B,2BAA2B,EAC3B,MAAM,CAAC,IAAI,CAAC,GAAG,CAChB,EAAE;IACL,CAAC,CAAC,YAAY,MAAM,aAAa,CAC7B,2BAA2B,EAC3B,MAAM,CAAC,IAAI,CAAC,GAAG,CAChB,EAAE,CAAA;AAEP,MAAM,MAAM,GAAG;IACb,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,YAAY,CAAC,EAAE,CAAC;IAC1C,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,YAAY,CAAC,EAAE,CAAC;IAC1C,GAAG,CAAC,SAAS,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC;IAChE,sBAAsB;IACtB,4CAA4C;IAC5C,EAAE;CACH,CAAA;AAED,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAC,MAAoB,EAAE,EAAE,CAAC;IAChD,GAAG,MAAM;IACT,GAAG,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC;IAC1B,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;CAClC,CAAA","sourcesContent":["// the arguments when running test files, abstracted from run.ts for testing\nimport type { LoadedConfig } from '@tapjs/config'\nimport {\n  execArgv,\n  importLoaders,\n  loaderFallbacks,\n  loaders,\n} from '@tapjs/test'\nimport module from 'node:module'\nimport { resolveImport } from 'resolve-import'\n\n// if we have Module.register(), then use --import wherever possible\nconst useImport = !!(module as { register?: (...a: any) => any })\n  .register\n\nconst testModule = String(\n  await resolveImport('@tapjs/test', import.meta.url)\n)\n\nconst resolveLoaders = (loaders: string[]) =>\n  Promise.all(\n    loaders.map(async loader =>\n      String(await resolveImport(loader, testModule))\n    )\n  )\nconst importScripts = await resolveLoaders(\n  useImport ? importLoaders : []\n)\nconst loaderScripts = await resolveLoaders(\n  useImport ? loaders : loaderFallbacks\n)\n\nconst pi = useImport\n  ? `--import=${await resolveImport(\n      '@tapjs/processinfo/import',\n      import.meta.url\n    )}`\n  : `--loader=${await resolveImport(\n      '@tapjs/processinfo/loader',\n      import.meta.url\n    )}`\n\nconst always = [\n  ...importScripts.map(l => `--import=${l}`),\n  ...loaderScripts.map(l => `--loader=${l}`),\n  ...(useImport && !loaderScripts.length ? [] : ['--no-warnings']),\n  '--enable-source-maps',\n  // ensure this always comes last in the list\n  pi,\n]\n\nexport const testArgv = (config: LoadedConfig) => [\n  ...always,\n  ...execArgv(config.values),\n  ...(config.get('node-arg') || []),\n]\n"]}