{"version":3,"file":"run.js","sourceRoot":"","sources":["../../src/run.ts"],"names":[],"mappings":"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","sourcesContent":["// run the provided tests\nimport { plugin as AfterPlugin } from '@tapjs/after'\nimport { plugin as BeforePlugin } from '@tapjs/before'\nimport { LoadedConfig } from '@tapjs/config'\nimport { TapFile, TapFileOpts, type TAP } from '@tapjs/core'\nimport { plugin as SpawnPlugin } from '@tapjs/spawn'\nimport { plugin as StdinPlugin } from '@tapjs/stdin'\nimport { glob } from 'glob'\nimport { stat } from 'node:fs/promises'\nimport { relative, resolve } from 'node:path'\nimport { rimraf } from 'rimraf'\nimport { runAfter } from './after.js'\nimport { runBefore } from './before.js'\nimport { build } from './build.js'\nimport { getCoverageMap } from './coverage-map.js'\nimport { executeTestSuite } from './execute-test-suite.js'\nimport { values } from './main-config.js'\nimport { outputDir } from './output-dir.js'\nimport { readSave } from './save-list.js'\nimport { testArgv } from './test-argv.js'\nimport { testIsSerial } from './test-is-serial.js'\n\nconst regExpEscape = (s: string) =>\n  s.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&')\n\nconst node = process.execPath\n\nexport const run = async (args: string[], config: LoadedConfig) => {\n  // timeout in ms for test subprocesses, has a default\n  // so it'll always be set to a number.\n  /* c8 ignore start */\n  const timeout = (config.get('timeout') ?? 30) * 1000\n  /* c8 ignore stop */\n\n  // these all default to an empty array\n  /* c8 ignore start */\n  const testArgs: string[] = values['test-arg'] || []\n  const testEnv: string[] = values['test-env'] || []\n  /* c8 ignore stop */\n  process.env._TAPJS_PROCESSINFO_CWD_ = config.globCwd\n  process.env._TAPJS_PROCESSINFO_EXCLUDE_ = String(\n    // don't consider snapshots and fixtures, or else we'll\n    // always think that all tests are new after generating!\n    // TODO: these come from plugins, they should be able to export\n    // this, like with testFileExtensions.\n    /(^(node|tapmock):|[\\\\\\/](\\.tap|tap-snapshots)[\\\\\\/])/\n  )\n\n  const argv = testArgv(config)\n\n  let env: NodeJS.ProcessEnv | undefined = undefined\n\n  const saveList = await readSave(config)\n  const map = await getCoverageMap(config)\n\n  const covExcludeFiles: (string | undefined)[] = []\n  let _TAPJS_PROCESSINFO_COV_EXCLUDE_FILES_: string | undefined =\n    undefined\n\n  // always exclude the root node_modules from coverage. we don't report\n  // on it, and it just takes up space in the .tap/coverage data.\n  const _TAPJS_PROCESSINFO_COV_EXCLUDE_ = String(\n    new RegExp(\n      '^' + regExpEscape(resolve(config.globCwd, 'node_modules'))\n    )\n  )\n\n  return executeTestSuite(\n    args,\n    config,\n    (\n      t\n    ): TAP &\n      ReturnType<typeof AfterPlugin> &\n      ReturnType<typeof SpawnPlugin> &\n      ReturnType<typeof BeforePlugin> &\n      ReturnType<typeof StdinPlugin> => {\n      // generate the env here, in case any plugins updated it\n      env = { ...process.env }\n      for (const e of testEnv) {\n        if (!e.includes('=')) {\n          delete env[e]\n        } else {\n          const split = e.split('=')\n          const k = split[0] as string\n          const v = split.slice(1).join('=')\n          env[k] = v\n        }\n      }\n\n      // always set in dev, and the applyPlugin behavior is well tested\n      /* c8 ignore start */\n      const a = (t as TAP).pluginLoaded(SpawnPlugin)\n        ? t\n        : t.applyPlugin(SpawnPlugin)\n      const b = (a as TAP).pluginLoaded(BeforePlugin)\n        ? a\n        : a.applyPlugin(BeforePlugin)\n      const c = (b as TAP).pluginLoaded(StdinPlugin)\n        ? b\n        : b.applyPlugin(StdinPlugin)\n      /* c8 ignore stop */\n      return c as TAP &\n        ReturnType<typeof AfterPlugin> &\n        ReturnType<typeof SpawnPlugin> &\n        ReturnType<typeof BeforePlugin> &\n        ReturnType<typeof StdinPlugin>\n    },\n\n    async t => {\n      // if the configured plugins aren't what tap is built with, rebuild it\n      // this won't affect the tap loaded here in the runner, but will in the\n      // the test files we're about to run.\n      const needBuild = t.pluginSignature !== config.pluginSignature\n      if (needBuild) await build([], config)\n\n      // have to register before doing before/after because otherwise\n      // that will trigger a pipe to stdout.\n      t.register()\n      covExcludeFiles.push(runBefore(t, argv, config))\n      covExcludeFiles.push(runAfter(t, argv, config))\n\n      // don't delete old coverage if only running subset of suites\n      if (!config.get('changed') && !saveList.length) {\n        await rimraf(resolve(config.globCwd, '.tap/processinfo'))\n        await rimraf(resolve(config.globCwd, '.tap/coverage'))\n      }\n\n      outputDir(t, config)\n    },\n\n    async (t, file, files, hasReporter) => {\n      if (!_TAPJS_PROCESSINFO_COV_EXCLUDE_FILES_) {\n        _TAPJS_PROCESSINFO_COV_EXCLUDE_FILES_ = [\n          ...covExcludeFiles.filter(f => typeof f === 'string'),\n          ...files.map(f => resolve(config.globCwd, f)),\n        ].join('\\n')\n      }\n\n      /* c8 ignore start */\n      const stdio = hasReporter ? 'pipe' : 'inherit'\n      /* c8 ignore end */\n\n      if (file === '/dev/stdin') {\n        if (files.length === 1) return t.stdinOnly()\n        else return t.stdin()\n      }\n      const name = relative(config.globCwd, file).replace(/\\\\/g, '/')\n      const mapped = map(name)\n      let coveredFiles: null | string[] =\n        mapped === null\n          ? null\n          : await glob(mapped, {\n              cwd: config.globCwd,\n              absolute: true,\n            })\n      if (mapped?.length && !coveredFiles?.length) {\n        // provided a glob expression that didn't match anything.\n        // cover nothing.\n        coveredFiles = null\n      }\n      const _TAPJS_PROCESSINFO_COVERAGE_ =\n        coveredFiles === null ? '0' : '1'\n      const _TAPJS_PROCESSINFO_COV_FILES_ = (coveredFiles || []).join(\n        '\\n'\n      )\n      const buffered = !testIsSerial(file) && t.jobs > 1\n      const args = [...argv, file, ...testArgs]\n      // support stuff like `tap <(...)` or raw .tap files.\n      const st = await stat(file)\n      const raw =\n        st.isCharacterDevice() ||\n        st.isBlockDevice() ||\n        st.isFIFO() ||\n        file.toLowerCase().endsWith('.tap')\n      return raw\n        ? t.sub<TapFile, TapFileOpts>(TapFile, {\n            at: null,\n            cwd: config.globCwd,\n            buffered,\n            filename: file,\n          })\n        : t.spawn(node, args, {\n            at: null,\n            stack: '',\n            buffered,\n            timeout,\n            stdio,\n            env: {\n              ...env,\n              _TAPJS_PROCESSINFO_COVERAGE_,\n              _TAPJS_PROCESSINFO_COV_FILES_,\n              _TAPJS_PROCESSINFO_COV_EXCLUDE_FILES_,\n              _TAPJS_PROCESSINFO_COV_EXCLUDE_,\n            },\n            name,\n            cwd: config.globCwd,\n            externalID: name,\n          })\n    }\n  )\n}\n"]}