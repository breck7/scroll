{"version":3,"file":"tap-file.js","sourceRoot":"","sources":["../../src/tap-file.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * This is not very useful in many cases outside of the tap runner itself,\n * where it's used to replay previous stored test results.\n *\n * @module\n */\nimport { Minipass } from 'minipass'\nimport { createReadStream } from 'node:fs'\nimport { relative, sep } from 'node:path'\nimport { Base, BaseOpts, TapBaseEvents } from './base.js'\nimport { cwd as procCwd } from './proc.js'\nimport { throwToParser } from './throw-to-parser.js'\n\n/**\n * Options that may be provided to the {@link @tapjs/core!tap-file.TapFile}\n * class\n */\nexport interface TapFileOpts extends BaseOpts {\n  /**\n   * Optionally provide a stream of content to treat as the file's TAP data\n   */\n  tapStream?:\n    | NodeJS.ReadableStream\n    | Minipass<Buffer>\n    | Minipass<string>\n  /**\n   * The file to read, required if tapStream not provided\n   */\n  filename?: string\n  /**\n   * just used to calculate the default name from the filename\n   * ignored otherwise\n   */\n  cwd?: string\n}\n\nexport interface TapFileEvents extends TapBaseEvents {}\n\n/**\n * Class representing a file as a TAP stream\n *\n * @internal\n */\nexport class TapFile extends Base<TapFileEvents> {\n  caughtName: string = 'tapFileError'\n  emitName: string = 'tapFile'\n  cwd?: string\n  filename?: string\n  tapStream?:\n    | NodeJS.ReadableStream\n    | Minipass<Buffer>\n    | Minipass<string>\n  constructor(options: TapFileOpts) {\n    const { filename, tapStream, cwd = procCwd } = options\n    const name = TapFile.getName(options.name, filename, cwd)\n    super({ ...options, name })\n\n    this.filename = filename\n    this.cwd = cwd\n    this.tapStream = tapStream\n    this.tapStream?.pause()\n  }\n\n  static getName(\n    name?: string,\n    filename?: string,\n    cwd: string = procCwd\n  ) {\n    if (name) return name\n    if (!filename) return 'file input'\n    const rel = relative(cwd, filename)\n    return (rel.startsWith('..' + sep) ? filename : rel).replace(\n      /\\.tap$/,\n      ''\n    )\n  }\n\n  main(cb: () => void) {\n    const { tapStream, filename } = this\n    if (filename && !tapStream) {\n      this.tapStream = createReadStream(filename)\n    } else if (!this.tapStream) {\n      throw new Error('either tapStream or filename must be provided')\n    }\n    (this.tapStream as Minipass<Buffer>).on('error', er => {\n      (er as Error & { tapCaught: string }).tapCaught = this.caughtName\n      this.threw(er)\n    })\n    if (this.options.timeout) {\n      this.setTimeout(this.options.timeout)\n    }\n    const s = this.tapStream as Minipass\n    s.pipe(this.parser)\n    if (this.parent) {\n      this.parent.emit(this.emitName, this)\n    }\n    s.once('end', cb)\n    s.once('error', cb)\n    this.tapStream.resume()\n  }\n\n  threw(er: any, extra?: any) {\n    return throwToParser(this.parser, super.threw(er, extra))\n  }\n}\n"]}