{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;AAIH,cAAc,eAAe,CAAA;AAC7B,cAAc,WAAW,CAAA;AACzB,cAAc,aAAa,CAAA;AAC3B,cAAc,uBAAuB,CAAA;AACrC,cAAc,YAAY,CAAA;AAC1B,cAAc,kBAAkB,CAAA;AAChC,cAAc,cAAc,CAAA;AAC5B,cAAc,8BAA8B,CAAA;AAC5C,cAAc,sBAAsB,CAAA;AACpC,cAAc,WAAW,CAAA;AACzB,cAAc,YAAY,CAAA;AAC1B,cAAc,YAAY,CAAA;AAC1B,cAAc,cAAc,CAAA;AAC5B,cAAc,gBAAgB,CAAA;AAC9B,cAAc,iBAAiB,CAAA;AAC/B,cAAc,aAAa,CAAA;AAC3B,cAAc,aAAa,CAAA;AAC3B,8DAA8D;AAC9D,uDAAuD;AACvD,mEAAmE;AACnE,oBAAoB;AACpB,OAAO,EAAE,GAAG,EAAO,CAAA;AAEnB,OAAO,EAAE,GAAG,EAAO,MAAM,UAAU,CAAA","sourcesContent":["/**\n * Main export of the `@tapjs/core` module, providing the bulk of\n * the internal machinery of tests.\n *\n * @module\n */\n\nimport { CallSiteLike, CallSiteLikeJSON } from '@tapjs/stack'\n\nexport * from './tap-file.js'\nexport * from './base.js'\nexport * from './counts.js'\nexport * from './extra-from-error.js'\nexport * from './lists.js'\nexport * from './main-script.js'\nexport * from './minimal.js'\nexport * from './normalize-message-extra.js'\nexport * from './parse-test-args.js'\nexport * from './proc.js'\nexport * from './spawn.js'\nexport * from './stdin.js'\nexport * from './tap-dir.js'\nexport * from './test-base.js'\nexport * from './test-point.js'\nexport * from './waiter.js'\nexport * from './worker.js'\n// do it in this weird way to keep prettier from moving tap.js\n// ahead of test-base.js. We need TestBase to be loaded\n// and exported *before* tap, because TAP loades @tapjs/test, which\n// extends TestBase.\nexport { tap, TAP }\n\nimport { tap, TAP } from './tap.js'\nimport type { TestBase, TestBaseOpts } from './test-base.js'\n\n/**\n * The `plugin` export from any tap plugin\n *\n * @template B - the return value of the plugin\n * @template O - test options added by this plugin\n */\nexport type TapPlugin<\n  B extends Object,\n  O extends TestBaseOpts | any = unknown\n> = unknown extends O\n  ? (t: TestBase) => B\n  : (t: TestBase, opts: O) => B\n\n/**\n * The extra info passed to assertions.\n *\n * Extended by BaseOpts, TestBaseOpts, and ultimately TestOpts, since any\n * subtest is also an assertion, and can take all the same assertion options.\n */\nexport interface Extra {\n  bail?: boolean\n  todo?: string | boolean\n  skip?: string | boolean\n  at?: CallSiteLike | CallSiteLikeJSON | null\n  stack?: string\n  source?: string\n  errorOrigin?: {\n    at?: CallSiteLike | CallSiteLikeJSON | null\n    stack?: string\n    source?: string\n  }\n  found?: any\n  wanted?: any\n  doNotWant?: any\n  pattern?: any\n  diff?: string\n  message?: string\n  expired?: string\n  // error properties\n  type?: string\n  error?: any\n  diagnostic?: boolean\n  tapChildBuffer?: string\n  test?: string\n  [k: string]: any\n}\n\n/**\n * The optional `..., message, extra)` arguments passed to\n * test assertions.\n */\nexport type MessageExtra = [] | [string] | [Extra] | [string, Extra]\n"]}