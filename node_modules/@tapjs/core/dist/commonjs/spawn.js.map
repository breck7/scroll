{"version":3,"file":"spawn.js","sourceRoot":"","sources":["../../src/spawn.ts"],"names":[],"mappings":"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","sourcesContent":["import { Base, TapBaseEvents } from './base.js'\n\nimport { ProcessInfo, WithExternalID } from '@tapjs/processinfo'\nimport {\n  ChildProcess,\n  ChildProcessByStdio,\n  IOType,\n  SpawnOptions,\n  StdioOptions,\n} from 'node:child_process'\nimport { basename } from 'node:path'\nimport { Readable, Stream, Writable } from 'node:stream'\nimport { format } from 'node:util'\nimport { Extra } from './index.js'\nimport { TestBaseOpts } from './test-base.js'\nimport { throwToParser } from './throw-to-parser.js'\n\n/**\n * A child process that is known to have a stdout stream\n */\nexport type ChildProcessWithStdout = ChildProcessByStdio<\n  null | Writable,\n  Readable,\n  null | Readable\n>\n\nconst hasStdout = (p: ChildProcess): p is ChildProcessWithStdout =>\n  !!p.stdout\n\n/**\n * Events emitted by the {@link @tapjs/core!spawn.Spawn} class\n */\nexport interface SpawnEvents extends TapBaseEvents {\n  /**\n   * Emitted immediately before the child process is spawned. If the\n   * options are mutated, then the changes *will* take effect.\n   */\n  preprocess: [WithExternalID<SpawnOptions>]\n  /**\n   * Emitted immediately after the child process is spawned, providing\n   * the actual `ChildProcess` object as an argument\n   */\n  process: [ChildProcessWithStdout]\n}\n\n/**\n * Options that may be provided to the {@link @tapjs/core!spawn.Spawn} class\n */\nexport interface SpawnOpts extends TestBaseOpts {\n  cwd?: string\n  command?: string\n  args?: string[]\n  /**\n   * Passed to child_process.spawn's 'stdio' option\n   *\n   * No matter what is specified here, stdout is *always* set to 'pipe',\n   * and stdio[3] is *always* set to 'ipc', because TAP uses these internally\n   * to communicate test results and timeout, respectively.\n   *\n   * So, this is only to set the behavior of stdin and stderr.\n   */\n  stdio?: StdioOptions\n  env?: { [k: string]: string } | NodeJS.ProcessEnv\n  exitCode?: number | null\n  signal?: string | null\n  /**\n   * Used for tracking the test process for tap --changed etc\n   * Typically set to the test name. Unlikely that you should\n   * ever set this, outside of tap itself.\n   */\n  externalID?: string\n}\n\n/**\n * Class representing a spawned TAP process\n *\n * Instantiated by `t.spawn()`, typically.\n *\n * @internal\n */\nexport class Spawn extends Base<SpawnEvents> {\n  declare options: SpawnOpts\n  cwd: string\n  command: string\n  args: string[]\n  stdio: [\n    IOType | Stream | number | null | undefined,\n    'pipe',\n    IOType | Stream | number | null | undefined,\n    'ipc'\n  ]\n  env: { [k: string]: string } | NodeJS.ProcessEnv\n  proc: null | ChildProcess = null\n  cb: null | (() => void) = null\n  externalID?: string\n\n  // doesn't have to be cryptographically secure, just a gut check\n  #childKey: string = String(Math.random())\n\n  #timedOut?: { expired?: string }\n\n  #childId: string\n\n  constructor(options: SpawnOpts) {\n    // figure out the name before calling super()\n    const command = options.command\n    if (!command) {\n      throw new TypeError('no command provided for t.spawn()')\n    }\n    const cwd =\n      typeof options.cwd === 'string' ? options.cwd : process.cwd()\n    const args = options.args || []\n\n    options.name = options.name || Spawn.procName(cwd, command, args)\n    super(options)\n\n    this.externalID = options.externalID\n    this.cwd = cwd\n    this.command = command\n    this.args = args\n    if (options.stdio) {\n      if (typeof options.stdio === 'string') {\n        this.stdio = [options.stdio, 'pipe', options.stdio, 'ipc']\n      } else {\n        const [stdin, _, stderr] = options.stdio\n        /* c8 ignore start */\n        if (stdin === 'ipc' || stderr === 'ipc') {\n          throw new Error(\n            'cannot spawn subtest with ipc in stdin or stderr'\n          )\n        }\n        /* c8 ignore stop */\n        this.stdio = [stdin, 'pipe', stderr, 'ipc']\n      }\n    } else {\n      this.stdio = [0, 'pipe', 2, 'ipc']\n    }\n\n    const env = options.env || process.env\n    this.#childId = String(options.childId || env.TAP_CHILD_ID || '0')\n    this.env = {\n      ...env,\n      TAP_CHILD_ID: this.#childId,\n      TAP: '1',\n      TAP_BAIL: this.bail ? '1' : '0',\n      TAP_CHILD_KEY: this.#childKey,\n    }\n  }\n\n  endAll() {\n    if (this.proc) {\n      this.proc.kill('SIGKILL')\n      this.parser.abort('test unfinished')\n    }\n    this.#callCb()\n  }\n\n  #callCb() {\n    if (this.cb) {\n      this.cb()\n    }\n    this.cb = null\n  }\n\n  main(cb: () => void) {\n    this.cb = cb\n    this.setTimeout(this.options.timeout || 0)\n\n    this.parser.on('comment', c => {\n      const tomatch = c.match(/# timeout=([0-9]+)\\n$/)\n      if (tomatch) {\n        this.setTimeout(+tomatch[1])\n      }\n    })\n\n    this.env.TAP_JOB_ID = String(this.options.jobId || 0)\n    const options = {\n      cwd: this.cwd,\n      env: this.env,\n      stdio: this.stdio,\n      externalID: this.externalID,\n    }\n    this.parent?.emit('spawn', this)\n\n    this.emit('preprocess', options)\n    const proc = (this.proc = ProcessInfo.spawn(\n      this.command,\n      this.args,\n      options\n    ))\n    /* c8 ignore start */\n    if (!hasStdout(proc)) {\n      return this.threw(\n        'failed to open child process stdout',\n        this.options\n      )\n    }\n    /* c8 ignore stop */\n    proc.stdout.pipe(this.parser)\n\n    proc.on('message', msg => {\n      const m = msg as {\n        key: string\n        child: string\n        setTimeout: number\n      }\n      if (\n        !!msg &&\n        typeof msg === 'object' &&\n        m.key === this.#childKey &&\n        m.child === this.#childId\n      ) {\n        this.setTimeout(m.setTimeout)\n        return\n      }\n      this.comment(...(Array.isArray(msg) ? msg : [msg]))\n    })\n\n    proc.on('close', (code, signal) => {\n      this.#onprocclose(code, signal)\n    })\n    proc.on('error', er => this.threw(er))\n    this.emit('process', proc)\n  }\n\n  comment(...args: any[]) {\n    const body = format(...args)\n    const message =\n      ('# ' + body.split(/\\r?\\n/).join('\\n# ')).trim() + '\\n'\n    // it's almost impossible to send a message that will arrive\n    // AFTER the stdout closes, as this only happens when the worker\n    // thread closes, but it is theoretically possible, since messages\n    // are asynchronous.\n    /* c8 ignore start */\n    if (this.parser.results) {\n      if (this.parent && !this.parent.results) {\n        this.parent.parser.write(message)\n      } else {\n        console.log(message.trimEnd())\n      }\n    } else {\n      /* c8 ignore stop */\n      this.parser.write(message)\n    }\n  }\n\n  #onprocclose(code: number | null, signal: string | null) {\n    this.options.exitCode = this.options.exitCode || code\n    this.options.signal = this.options.signal || signal\n    if (this.#timedOut) super.timeout(this.#timedOut)\n    this.debug('SPAWN close %j %s', code, signal)\n\n    // spawn closing with no tests is treated as a skip.\n    if (\n      this.results &&\n      this.results.plan &&\n      this.results.plan.skipAll &&\n      !code &&\n      !signal\n    ) {\n      this.options.skip =\n        this.results.plan.skipReason || 'no tests found'\n    }\n\n    if (code || signal) {\n      if (this.results) {\n        this.results.ok = false\n      }\n      this.parser.ok = false\n    }\n    return this.#callCb()\n  }\n\n  timeout(options: { expired?: string } = { expired: this.name }) {\n    // defer calling super.timeout() until we actually kill the process.\n    this.#timedOut = options\n    // try to send the timeout signal.  If the child test process is\n    // using node-tap as the test runner, and not caught in a busy\n    // loop, it will trigger a dump of outstanding handles and refs.\n    // If that doesn't do the job, then we fall back to signals.\n    // Unfortunately, termination signals on windows cannot be caught,\n    // so this is the only way to get that information in most cases.\n    const proc = this.proc\n    if (proc) {\n      try {\n        proc.send(\n          {\n            tapAbort: 'timeout',\n            key: this.#childKey,\n            child: this.#childId,\n            // If the process ends while/before sending this message,\n            // then just ignore it. the eventual kills will be no-ops,\n            // and since we're done with this process, the success here\n            // doesn't matter.\n            /* c8 ignore start */\n          },\n          () => {}\n        )\n      } catch {}\n      /* c8 ignore stop */\n\n      // this whole bit has to be ignored because there is no way to test\n      // signals on Windows without mocking to the point of irrelevance\n      /* c8 ignore start */\n      const t = setTimeout(() => {\n        // try to give it a chance to note the timeout and report handles\n        try {\n          proc.kill('SIGALRM')\n        } catch (er) {}\n        const t = setTimeout(() => {\n          const { signal, exitCode } = this.options\n          if (!signal && exitCode === undefined) {\n            // that didn't work, use forceful termination\n            proc.kill('SIGKILL')\n          }\n        }, 500)\n        if (t.unref) t.unref()\n        proc.once('close', () => clearTimeout(t))\n      }, 500)\n      if (t.unref) t.unref()\n      proc.once('close', () => clearTimeout(t))\n      /* c8 ignore stop */\n    }\n  }\n\n  threw(er: any, extra?: Extra): Extra | void | undefined {\n    return throwToParser(this.parser, super.threw(er, extra))\n  }\n\n  static procName(cwd: string, command: string, args: string[]) {\n    return (\n      command === process.execPath\n        ? basename(process.execPath) +\n          ' ' +\n          args\n            .map(a =>\n              a.indexOf(cwd) === 0\n                ? './' +\n                  a.substring(cwd.length + 1).replace(/\\\\/g, '/')\n                : a\n            )\n            .join(' ')\n            .trim()\n        : command + ' ' + args.join(' ')\n    ).replace(/\\\\/g, '/')\n  }\n}\n"]}