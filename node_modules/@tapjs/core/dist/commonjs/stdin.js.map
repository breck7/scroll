{"version":3,"file":"stdin.js","sourceRoot":"","sources":["../../src/stdin.ts"],"names":[],"mappings":";;;AAEA,+CAAuC;AAYvC;;;;;;GAMG;AACH,MAAa,KAAM,SAAQ,qBAAO;IAChC,UAAU,GAAW,YAAY,CAAA;IACjC,QAAQ,GAAW,OAAO,CAAA;IAM1B,YAAY,OAAkB;QAC5B,KAAK,CAAC;YACJ,SAAS,EAAE,OAAO,CAAC,KAAK;YACxB,IAAI,EAAE,YAAY;YAClB,GAAG,OAAO;YACV,QAAQ,EAAE,YAAY;SACvB,CAAC,CAAA;IACJ,CAAC;CACF;AAhBD,sBAgBC","sourcesContent":["import { Minipass } from 'minipass'\nimport { BaseOpts } from './base.js'\nimport { TapFile } from './tap-file.js'\n\n/**\n * Options that may be provided to the {@link @tapjs/core!stdin.Stdin} class\n */\nexport interface StdinOpts extends BaseOpts {\n  tapStream?:\n    | NodeJS.ReadableStream\n    | Minipass<Buffer>\n    | Minipass<string>\n}\n\n/**\n * Class representing standard input as a TAP stream\n *\n * Instantiated by `t.stdin()`, typically.\n *\n * @internal\n */\nexport class Stdin extends TapFile {\n  caughtName: string = 'stdinError'\n  emitName: string = 'stdin'\n  declare filename: '/dev/stdin'\n  declare tapStream:\n    | NodeJS.ReadableStream\n    | Minipass<Buffer>\n    | Minipass<string>\n  constructor(options: StdinOpts) {\n    super({\n      tapStream: process.stdin,\n      name: '/dev/stdin',\n      ...options,\n      filename: '/dev/stdin',\n    })\n  }\n}\n"]}