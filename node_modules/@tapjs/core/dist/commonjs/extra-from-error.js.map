{"version":3,"file":"extra-from-error.js","sourceRoot":"","sources":["../../src/extra-from-error.ts"],"names":[],"mappings":"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","sourcesContent":["import type { CallSiteLike } from '@tapjs/stack'\nimport * as stack from '@tapjs/stack'\nimport type { BaseOpts } from './base.js'\nimport { Extra } from './index.js'\n\n// test that a CallSiteLike is \"useful\", ie, has a file/line/col\nconst useful = (at: CallSiteLike | undefined) =>\n  !!at?.fileName &&\n  typeof at.lineNumber === 'number' &&\n  typeof at.columnNumber === 'number'\n\n/**\n * Create an {@link @tapjs/core!index.Extra} object based on a thrown Error\n */\nexport const extraFromError = (\n  er: any,\n  extra?: Extra,\n  options?: BaseOpts\n) => {\n  // the yaml module puts big stuff here, pluck it off\n  // otherwise it's quite noisy when we throw as a result of\n  // trying to parse invalid tap diagnostics.\n  if (\n    !!er &&\n    typeof er === 'object' &&\n    er.source &&\n    typeof er.source === 'object' &&\n    er.source.context\n  ) {\n    const { context, ...source } = er.source\n    er.source = source\n  }\n\n  // pull out all fields from options, other than anything starting\n  // with tapChild, or anything already set in the extra object.\n  options = options ?? {}\n  extra = Object.assign(\n    extra ?? {},\n    Object.fromEntries(\n      Object.entries(options).filter(\n        ([k]) => !/^tapChild/.test(k) && !(k in (extra ?? {}))\n      )\n    )\n  )\n\n  if (!er || typeof er !== 'object') {\n    extra.error = er\n    return extra\n  }\n\n  const st = stack.captureError(er)\n  if (st && st.length) {\n    extra.stack = st.map(c => String(c)).join('\\n')\n    let at: CallSiteLike | undefined\n    // walk down the stack until we find the first \"useful\" stack frame\n    for (let i = 0; i < st.length; i++) {\n      if (useful(st[i])) {\n        at = st[i]\n        break\n      }\n    }\n    extra.at = at || st[0]\n  } else if (typeof er.stack === 'string') {\n    // if we failed to capture it, but it has a stack, then that means\n    // that all of the stack frames were internal, because the error was\n    // generated from native code in a dep that tap ignores (or if not\n    // native code, then something else that escaped the async-hook-domain).\n    // A common cause of this is import() errors.\n    extra.stack = ''\n    extra.at = null\n  }\n\n  if (er.name && er.name !== 'Error') {\n    extra.type = er.name\n  }\n\n  // grab any other rando props\n  const { message: _, name: __, stack: ___, ...props } = er\n  Object.assign(extra, props)\n\n  return extra\n}\n"]}