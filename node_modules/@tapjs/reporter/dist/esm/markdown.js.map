{"version":3,"file":"markdown.js","sourceRoot":"","sources":["../../src/markdown.ts"],"names":[],"mappings":"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","sourcesContent":["// markdown representation of the test run\n\nimport { Minipass } from 'minipass'\nimport { parse } from 'path'\nimport { Parser } from 'tap-parser'\nimport { stringify } from 'tap-yaml'\nimport { Case, Suite, Suites } from './json.js'\n\nexport class MarkdownStream extends Minipass<string> {\n  parser: Parser = new Parser()\n  constructor() {\n    super({ encoding: 'utf8' })\n    const suites = new Suites(this.parser)\n    suites.on('suite', s => this.suiteStart(s))\n    suites.on('case', c => this.onCase(c))\n    suites.on('suiteEnd', s => this.suiteEnd(s))\n    this.suiteStart(suites)\n    this.parser.on('complete', () => {\n      this.suiteEnd(suites)\n      super.end()\n    })\n  }\n\n  onCase(c: Case) {\n    const { name, id, diag, ok, skip, todo } = c.result\n    const t =\n      skip !== false\n        ? 'skip'\n        : todo !== false\n        ? 'todo'\n        : ok\n        ? 'pass'\n        : 'fail'\n    const color =\n      t === 'skip'\n        ? 'cyan'\n        : t === 'todo'\n        ? 'magenta'\n        : t === 'pass'\n        ? 'green'\n        : 'red'\n\n    const msg =\n      typeof skip === 'string'\n        ? `<span color=\"cyan\">${skip}</span>`\n        : typeof todo === 'string'\n        ? `<span color=\"magenta\">${todo}</span>`\n        : ''\n\n    const { source, diff, ...extra } = diag || {}\n    /* c8 ignore start */\n    const file = diag?.at?.fileName || diag?.at?.file || diag?.file\n    /* c8 ignore stop */\n    const srcLang = file ? parse(file).ext.substring(1) : ''\n    const srcPre = source\n      ? `\\n\\n\\`\\`\\`${srcLang}\\n${source.trimEnd()}\\n\\`\\`\\``\n      : ''\n    const ymlExtra = stringify(extra).trimEnd()\n    const preExtra =\n      ymlExtra === '{}' ? '' : `\\n\\n\\`\\`\\`yaml\\n${ymlExtra}\\n\\`\\`\\``\n    const preDiff = diff\n      ? `\\n\\n\\`\\`\\`diff\\n${diff.trimEnd()}\\n\\`\\`\\``\n      : ''\n    const b = (preDiff + srcPre + preExtra)\n      .replace(/^/gm, '    ')\n      .replace(/\\n    \\n/g, '\\n\\n')\n    const body = b.trim() ? '\\n\\n    ' + b.trimStart() : '\\n'\n    super.write(\n      `${id}. <b style=\"color:${color}\">${t}</b> ${name}${msg}${body}\\n`\n    )\n  }\n\n  suiteStart(s: Suite) {\n    const h = Math.min(6, s.parser.level + 1)\n    super.write(`${'#'.repeat(h)} ${s.name.replace(/\\n/g, ' ')}\\n\\n`)\n  }\n\n  suiteEnd(s: Suite) {\n    const summary = {\n      ...s.toJSON(),\n      suites: undefined,\n      cases: undefined,\n    } as Record<string, any>\n    const { source, ...diag } = summary.diag || {}\n    if (summary.diag) delete summary.diag.source\n    /* c8 ignore start */\n    const file = diag.at?.fileName || diag.at?.file || diag.file\n    /* c8 ignore stop */\n    const srcLang = file ? parse(file).ext.substring(1) : ''\n    const srcPre = source\n      ? `\\n\\n\\`\\`\\`${srcLang}\\n${source}\\n\\`\\`\\``\n      : ''\n    const fn = summary.fullname || summary.name\n    delete summary.fullname\n    delete summary.name\n    super.write(\n      `\\n----\\n\\n**${fn}**${srcPre}\\n\\n\\`\\`\\`yaml\\n${stringify(\n        summary\n      ).trimEnd()}\\n\\`\\`\\`\\n\\n`\n    )\n  }\n\n  write(\n    chunk: Minipass.ContiguousData,\n    cb?: (() => void) | undefined\n  ): boolean\n  write(\n    chunk: Minipass.ContiguousData,\n    encoding?: Minipass.Encoding | undefined,\n    cb?: (() => void) | undefined\n  ): boolean\n  write(chunk: any, encoding?: any, cb?: any): boolean {\n    return this.parser.write(chunk, encoding, cb)\n  }\n\n  end(cb?: (() => void) | undefined): this\n  end(\n    chunk: Minipass.ContiguousData,\n    cb?: (() => void) | undefined\n  ): this\n  end(\n    chunk: Minipass.ContiguousData,\n    encoding?: Minipass.Encoding | undefined,\n    cb?: (() => void) | undefined\n  ): this\n  end(chunk?: any, encoding?: any, cb?: any): this {\n    this.parser.end(chunk, encoding, cb)\n    return this\n  }\n}\n"]}