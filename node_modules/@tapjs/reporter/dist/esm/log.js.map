{"version":3,"file":"log.js","sourceRoot":"","sources":["../../src/log.tsx"],"names":[],"mappings":"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","sourcesContent":["// The <Static> section that appends results as the tests run\n// Each log entry can be one of:\n// - A finished test\n// - A failed Result object (on the root test)\n// - a stderr or stdout message\n\nimport { Box, Static, Text } from 'ink'\nimport React, { FC } from 'react'\nimport {\n  ConsoleLog,\n  isConsoleLog,\n  isStdioLog,\n  isTestLog,\n  LogEntry,\n  StdioLog,\n  TestLog,\n  useLog,\n} from './hooks/use-log.js'\nimport { TapReportOpts } from './index.js'\nimport { TestSummary } from './test-summary.js'\n\nexport const TestLogLine: FC<TestLog> = ({ test, previous }) => (\n  <Box paddingTop={!!previous && !isTestLog(previous) ? 1 : 0}>\n    <TestSummary test={test} />\n  </Box>\n)\n\nexport const ConsoleLogLine: FC<ConsoleLog> = ({\n  text,\n  previous,\n}) => (\n  <Box paddingTop={!!previous && !isConsoleLog(previous) ? 1 : 0}>\n    <Text>{text.trimEnd()}</Text>\n  </Box>\n)\n\nexport const StdioLogLine: FC<StdioLog> = ({\n  name,\n  fd,\n  text,\n  previous: p,\n}) => {\n  const prefix =\n    isStdioLog(p) && p.fd === fd && p.name === name ? (\n      <></>\n    ) : (\n      <Box gap={1} paddingTop={1}>\n        {fd === 1 ? (\n          <Text color=\"cyan\" bold dimColor>{`1>`}</Text>\n        ) : (\n          <Text color=\"red\" bold dimColor>{`2>`}</Text>\n        )}\n        <Text dimColor>{name}</Text>\n      </Box>\n    )\n\n  return (\n    <Box flexDirection=\"column\">\n      {prefix}\n      <Box>\n        <Text>{String(text).trimEnd()}</Text>\n      </Box>\n    </Box>\n  )\n}\n\nexport interface LogOpts extends TapReportOpts {\n  includeTests?: boolean\n}\n\nexport const Log: FC<LogOpts> = ({ test, config, includeTests }) => {\n  if (test.results) return <></>\n\n  const logs = useLog(test, config, includeTests)\n  return (\n    <Static items={logs}>\n      {(log, key) => <LogLine {...log} key={key} />}\n    </Static>\n  )\n}\n\nconst LogLine: FC<LogEntry> = log =>\n  isTestLog(log) ? (\n    <TestLogLine {...log} />\n  ) : isStdioLog(log) ? (\n    <StdioLogLine {...log} />\n  ) : (\n    <ConsoleLogLine {...log} />\n  )\n"]}