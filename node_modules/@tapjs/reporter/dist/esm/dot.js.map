{"version":3,"file":"dot.js","sourceRoot":"","sources":["../../src/dot.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,GAAG,EAAE,IAAI,EAAE,MAAM,KAAK,CAAA;AAC/B,OAAO,KAAK,EAAE,EAAM,eAAe,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAA;AAI5D,OAAO,EAAE,aAAa,EAAE,MAAM,qBAAqB,CAAA;AACnD,OAAO,EAAE,gBAAgB,EAAE,MAAM,yBAAyB,CAAA;AAG1D,MAAM,QAAQ,GAAG,CAAC,CAAS,EAAE,EAAE,CAC7B,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAA;AAChE,MAAM,IAAI,GAAY,EAAE,CAAA;AACxB,MAAM,IAAI,GAA2B,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE;IAChD,MAAM,CAAC,IAAI,EAAE,UAAU,CAAC,GAAG,QAAQ,CAAU,EAAE,CAAC,CAAA;IAChD,eAAe,CACb,GAAG,EAAE,CACH,aAAa,CAAC,IAAI,EAAE,QAAQ,EAAE,CAAC,CAAC,EAAE;QAChC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAA;QACtB,UAAU,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAA;IACvB,CAAC,CAAC,EACJ,CAAC,IAAI,CAAC,CACP,CAAA;IACD,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,OAAO,CAAC,CAAA;IACnC,OAAO,CACL,oBAAC,GAAG,IAAC,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAC,MAAM,IAC/B,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAClB,oBAAC,IAAI,IAAC,GAAG,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,QAEf,CACR,CAAC,CACE,CACP,CAAA;AACH,CAAC,CAAA;AAED,MAAM,EAAE,OAAO,GAAG,EAAE,EAAE,GAAG,OAAO,CAAC,MAAM,CAAA;AAEvC,MAAM,CAAC,MAAM,GAAG,GAAa,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,CACzC,oBAAC,GAAG,IAAC,aAAa,EAAC,QAAQ;IACzB,oBAAC,IAAI,IAAC,IAAI,EAAE,IAAI,GAAI;IACpB,oBAAC,gBAAgB,IACf,IAAI,EAAE,IAAI,EACV,MAAM,EAAE,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,EAAE,EAAE,CAC7B,CAAC,MAAM,CAAC,EAAE,IAAI,CAAC,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,CAAC,MAAM,CAAC,IAAI,GAE9C,CACE,CACP,CAAA","sourcesContent":["import { Box, Text } from 'ink'\nimport React, { FC, useLayoutEffect, useState } from 'react'\nimport { TestBase } from '@tapjs/core'\nimport { Result } from 'tap-parser'\nimport { Reporter } from './index.js'\nimport { listenCleanup } from './listen-cleanup.js'\nimport { ResultDetailList } from './result-detail-list.js'\n\ntype Color = 'red' | 'green' | 'cyan' | 'magenta'\nconst getColor = (r: Result) =>\n  r.skip ? 'cyan' : r.todo ? 'magenta' : !r.ok ? 'red' : 'green'\nconst DOTS: Color[] = []\nconst Dots: FC<{ test: TestBase }> = ({ test }) => {\n  const [dots, updateDots] = useState<Color[]>([])\n  useLayoutEffect(\n    () =>\n      listenCleanup(test, 'assert', r => {\n        DOTS.push(getColor(r))\n        updateDots([...DOTS])\n      }),\n    [dots]\n  )\n  const width = Math.max(15, columns)\n  return (\n    <Box width={width} flexWrap=\"wrap\">\n      {dots.map((c, i) => (\n        <Text key={i} color={c}>\n          .\n        </Text>\n      ))}\n    </Box>\n  )\n}\n\nconst { columns = 70 } = process.stdout\n\nexport const Dot: Reporter = ({ test }) => (\n  <Box flexDirection=\"column\">\n    <Dots test={test} />\n    <ResultDetailList\n      test={test}\n      filter={({ parser, counts }) =>\n        !parser.ok || !!counts.todo || !!counts.fail\n      }\n    />\n  </Box>\n)\n"]}