{"version":3,"file":"test-results-list.js","sourceRoot":"","sources":["../../src/test-results-list.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Base } from '@tapjs/core'\nimport { Box, Text } from 'ink'\nimport React, { FC, ReactElement } from 'react'\nimport { Result } from 'tap-parser'\nimport { ResultTag } from './result-tag.js'\n\nexport interface TestResultsListOpts {\n  test: Base\n  details?: boolean\n}\n\nconst isResult = (r: any): r is Result =>\n  !!r && typeof r === 'object' && typeof r.ok === 'boolean'\n\nexport const TestResultsList: FC<TestResultsListOpts> = ({\n  test,\n  details = false,\n}) => {\n  const { results, options, bailedOut } = test\n  const { exitCode, signal } = options\n  if (!results) return <></>\n  const lists = test.lists\n\n  const resultsList: (ReactElement | Result)[] = []\n  if (results.plan.skipAll && !bailedOut && !signal && !exitCode) {\n    resultsList.push(\n      <Box gap={1} paddingLeft={1}>\n        <Text color=\"cyan\" bold>\n          ~\n        </Text>\n        <Text>{results.plan.skipReason || 'no tests found'}</Text>\n      </Box>\n    )\n  }\n  resultsList.push(\n    ...lists.pass,\n    ...lists.skip,\n    ...lists.todo,\n    ...lists.fail\n  )\n\n  if (typeof test.options.signal === 'string') {\n    resultsList.push(\n      <Box gap={1} paddingLeft={1}>\n        <Text color=\"red\" bold>\n          âœ–\n        </Text>\n        <Text>{test.options.signal}</Text>\n      </Box>\n    )\n  }\n  if (bailedOut && !details) {\n    resultsList.push(\n      <Box gap={1} paddingLeft={1}>\n        <Text color=\"red\" bold>\n          Bailout!\n        </Text>\n        <Text>{bailedOut}</Text>\n      </Box>\n    )\n  }\n\n  // group them so the short ones clump together into a single section\n  // with a 1 block space between longer entries\n  type RLG = (ReactElement[] | ReactElement)[]\n  const resultsListGrouped: RLG = resultsList.reduce(\n    (s: RLG, f: ReactElement | Result) => {\n      const el = isResult(f) ? (\n        <ResultTag result={f} details={details} test={test} />\n      ) : (\n        f\n      )\n      if (!details || !(f instanceof Result) || !f.diag) {\n        let l = s[s.length - 1]\n        if (!Array.isArray(l)) {\n          l = []\n          s.push(l)\n        }\n        l.push(el)\n      } else {\n        s.push(el)\n      }\n      return s\n    },\n    []\n  )\n\n  return (\n    <Box gap={1} flexDirection=\"column\">\n      {resultsListGrouped.map((f, key) => (\n        <Box flexDirection=\"column\" key={key}>\n          {Array.isArray(f) ? (\n            f.map((f, key) => (\n              <Box flexDirection=\"column\" key={key}>\n                {f}\n              </Box>\n            ))\n          ) : (\n            <Box key={key}>{f}</Box>\n          )}\n        </Box>\n      ))}\n    </Box>\n  )\n}\n"]}