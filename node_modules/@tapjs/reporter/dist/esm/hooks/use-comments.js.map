{"version":3,"file":"use-comments.js","sourceRoot":"","sources":["../../../src/hooks/use-comments.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,eAAe,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAA;AACjD,OAAO,EAAE,aAAa,EAAE,MAAM,sBAAsB,CAAA;AAEpD,kEAAkE;AAClE,mEAAmE;AACnE,qEAAqE;AACrE,8CAA8C;AAE9C,MAAM,GAAG,GAAG,IAAI,GAAG,EAAkB,CAAA;AAErC,MAAM,CAAC,MAAM,WAAW,GAAG,CAAC,IAAU,EAAE,EAAE;IACxC,MAAM,SAAS,GAAG,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,CAAA;IACrC,MAAM,CAAC,QAAQ,EAAE,cAAc,CAAC,GAAG,QAAQ,CAAW;QACpD,GAAG,SAAS;KACb,CAAC,CAAA;IACF,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC;QAAE,GAAG,CAAC,GAAG,CAAC,IAAI,EAAE,SAAS,CAAC,CAAA;IAE5C,eAAe,CACb,GAAG,EAAE,CACH,aAAa,CAAC,IAAI,CAAC,MAAM,EAAE,SAAS,EAAE,CAAC,CAAS,EAAE,EAAE;QAClD,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE;YACZ,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAA;YAC3B,cAAc,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,CAAA;SAC/B;IACH,CAAC,CAAC,EACJ,CAAC,QAAQ,EAAE,IAAI,CAAC,CACjB,CAAA;IAED,OAAO,CAAC,GAAG,SAAS,CAAC,CAAA;AACvB,CAAC,CAAA","sourcesContent":["import { Base } from '@tapjs/core'\nimport { useLayoutEffect, useState } from 'react'\nimport { listenCleanup } from '../listen-cleanup.js'\n\n// We can sometimes get multiple comments all synchronously in the\n// same tick, which would mean multiple state updates from the same\n// starting state, and what we want is a consistent append-only list,\n// so stash it outside of the react component.\n\nconst log = new Map<Base, string[]>()\n\nexport const useComments = (test: Base) => {\n  const comments_ = log.get(test) || []\n  const [comments, updateComments] = useState<string[]>([\n    ...comments_,\n  ])\n  if (!log.has(test)) log.set(test, comments_)\n\n  useLayoutEffect(\n    () =>\n      listenCleanup(test.parser, 'comment', (c: string) => {\n        if (c.trim()) {\n          comments_.push(c.trimEnd())\n          updateComments([...comments_])\n        }\n      }),\n    [comments, test]\n  )\n\n  return [...comments_]\n}\n"]}