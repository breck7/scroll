{"version":3,"file":"use-cleanup.js","sourceRoot":"","sources":["../../../src/hooks/use-cleanup.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,eAAe,EAAE,MAAM,OAAO,CAAA;AAOvC,mEAAmE;AACnE,MAAM,CAAC,MAAM,UAAU,GAAG,CAAC,MAAqB,EAAE,IAAW,EAAE,EAAE,CAC/D,eAAe,CAAC,GAAG,EAAE;IACnB,MAAM,OAAO,GAAkB,EAAE,CAAA;IACjC,IAAI,CAAC,GAAoC,SAAS,CAAA;IAClD,MAAM,SAAS,GAAG,GAAG,EAAE;QACrB,IAAI,CAAC;YAAE,CAAC,EAAE,CAAA;QACV,KAAK,MAAM,CAAC,IAAI,OAAO;YAAE,CAAC,EAAE,CAAA;QAC5B,OAAO,CAAC,MAAM,GAAG,CAAC,CAAA;IACpB,CAAC,CAAA;IACD,CAAC,GAAG,MAAM,CAAC,OAAO,EAAE,SAAS,CAAC,CAAA;IAC9B,OAAO,SAAS,CAAA;AAClB,CAAC,EAAE,IAAI,CAAC,CAAA","sourcesContent":["import { useLayoutEffect } from 'react'\n\nexport type CleanupEffect = (\n  cleanup: (() => any)[],\n  doCleanup: () => void\n) => void | undefined | (() => void)\n\n// push cleanup functions onto the array, and they'll be cleaned up\nexport const useCleanup = (effect: CleanupEffect, deps: any[]) =>\n  useLayoutEffect(() => {\n    const cleanup: (() => any)[] = []\n    let c: (() => void) | void | undefined = undefined\n    const doCleanup = () => {\n      if (c) c()\n      for (const c of cleanup) c()\n      cleanup.length = 0\n    }\n    c = effect(cleanup, doCleanup)\n    return doCleanup\n  }, deps)\n"]}