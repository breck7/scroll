{"version":3,"file":"use-suite-totals.js","sourceRoot":"","sources":["../../../src/hooks/use-suite-totals.ts"],"names":[],"mappings":"AAAA,OAAO,EAAQ,MAAM,EAAE,MAAM,aAAa,CAAA;AAC1C,OAAO,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAA;AAChC,OAAO,EAAE,aAAa,EAAE,MAAM,sBAAsB,CAAA;AACpD,OAAO,EAAE,UAAU,EAAE,MAAM,kBAAkB,CAAA;AAE7C,MAAM,MAAM,GAAG,IAAI,GAAG,EAAgB,CAAA;AAEtC,MAAM,CAAC,MAAM,cAAc,GAAG,CAAC,IAAU,EAAE,EAAE;IAC3C,kEAAkE;IAClE,oEAAoE;IACpE,0CAA0C;IAC1C,MAAM,SAAS,GAAG,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,IAAI,MAAM,EAAE,CAAA;IAClD,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,SAAS,CAAC,CAAA;IAE3B,MAAM,CAAC,MAAM,EAAE,YAAY,CAAC,GAAG,QAAQ,CAAS,SAAS,CAAC,CAAA;IAE1D,MAAM,QAAQ,GAAG,GAAG,EAAE;QACpB,MAAM,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,IAAI,CAAW,CAAA;QACzC,MAAM,CAAC,KAAK,EAAE,CAAA;QACd,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,MAAM,CAAC,MAAM,CAAC,CAAC,CAAA;QACpC,YAAY,CAAC,MAAM,CAAC,CAAA;IACtB,CAAC,CAAA;IAED,MAAM,WAAW,GAAG,CAAC,CAAO,EAAE,EAAE;QAC9B,MAAM,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,IAAI,CAAW,CAAA;QACzC,MAAM,EAAE,OAAO,EAAE,GAAG,CAAC,CAAA;QACrB,iDAAiD;QACjD,qBAAqB;QACrB,IAAI,CAAC,OAAO;YAAE,OAAM;QACpB,oBAAoB;QACpB,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,GAAG,MAAM,CAAA;QAClD,QAAQ,EAAE,CAAA;QACV,MAAM,MAAM,GACV,CAAC,OAAO,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAA;QAChE,IAAI,MAAM;YAAE,IAAI,EAAE,CAAA;aACb,IAAI,OAAO,CAAC,IAAI,CAAC,OAAO;YAAE,IAAI,EAAE,CAAA;;YAChC,IAAI,EAAE,CAAA;QAEX,MAAM,EAAE,GAAG,IAAI,MAAM,CAAC;YACpB,KAAK;YACL,IAAI;YACJ,IAAI;YACJ,IAAI;YACJ,QAAQ;SACT,CAAC,CAAA;QAEF,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,EAAE,CAAC,CAAA;QACpB,YAAY,CAAC,EAAE,CAAC,CAAA;IAClB,CAAC,CAAA;IAED,UAAU,CACR,OAAO,CAAC,EAAE;QACR,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,YAAY,EAAE,QAAQ,CAAC,CAAC,CAAA;QACzD,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,YAAY,EAAE,WAAW,CAAC,CAAC,CAAA;IAC9D,CAAC,EACD,CAAC,IAAI,EAAE,MAAM,CAAC,CACf,CAAA;IACD,OAAO,MAAM,CAAA;AACf,CAAC,CAAA","sourcesContent":["import { Base, Counts } from '@tapjs/core'\nimport { useState } from 'react'\nimport { listenCleanup } from '../listen-cleanup.js'\nimport { useCleanup } from './use-cleanup.js'\n\nconst SUITES = new Map<Base, Counts>()\n\nexport const useSuiteTotals = (test: Base) => {\n  // multiple subtests can end in the same tick, so we need to track\n  // this in a local var as well as the component render state so that\n  // they don't clobber each other's totals.\n  const fromCache = SUITES.get(test) || new Counts()\n  SUITES.set(test, fromCache)\n\n  const [suites, updateSuites] = useState<Counts>(fromCache)\n\n  const addSuite = () => {\n    const suites = SUITES.get(test) as Counts\n    suites.total++\n    SUITES.set(test, new Counts(suites))\n    updateSuites(suites)\n  }\n\n  const finishSuite = (t: Base) => {\n    const suites = SUITES.get(test) as Counts\n    const { results } = t\n    // will always have results when the subtest ends\n    /* c8 ignore start */\n    if (!results) return\n    /* c8 ignore stop */\n    let { total, fail, pass, skip, complete } = suites\n    complete++\n    const isFail =\n      !results.ok || (results.plan.skipAll && test.options.failSkip)\n    if (isFail) fail++\n    else if (results.plan.skipAll) skip++\n    else pass++\n\n    const ns = new Counts({\n      total,\n      fail,\n      pass,\n      skip,\n      complete,\n    })\n\n    SUITES.set(test, ns)\n    updateSuites(ns)\n  }\n\n  useCleanup(\n    cleanup => {\n      cleanup.push(listenCleanup(test, 'subtestAdd', addSuite))\n      cleanup.push(listenCleanup(test, 'subtestEnd', finishSuite))\n    },\n    [test, suites]\n  )\n  return suites\n}\n"]}