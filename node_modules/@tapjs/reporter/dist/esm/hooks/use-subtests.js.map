{"version":3,"file":"use-subtests.js","sourceRoot":"","sources":["../../../src/hooks/use-subtests.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAA;AAChC,OAAO,EAAE,aAAa,EAAE,MAAM,sBAAsB,CAAA;AACpD,OAAO,EAAE,UAAU,EAAE,MAAM,kBAAkB,CAAA;AAE7C,MAAM,OAAO,GAAG,IAAI,GAAG,EAAgB,CAAA;AACvC,MAAM,OAAO,GAAG,IAAI,GAAG,EAAgB,CAAA;AAEvC,MAAM,CAAC,MAAM,WAAW,GAAG,CACzB,IAAc,EACd,QAAuC,KAAK,EAC5C,EAAE;IACF,MAAM,CAAC,KAAK,EAAE,WAAW,CAAC,GAAG,QAAQ,CAAS,EAAE,CAAC,CAAA;IACjD,MAAM,KAAK,GAAG,KAAK,KAAK,UAAU,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAA;IACtD,MAAM,MAAM,GAAG,CAAC,CAAO,EAAE,EAAE;QACzB,MAAM,KAAK,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;QAC/C,KAAK,CAAC,GAAG,CAAC,IAAI,EAAE,KAAK,CAAC,CAAA;QACtB,WAAW,CAAC,KAAK,CAAC,CAAA;IACpB,CAAC,CAAA;IAED,MAAM,YAAY,GAAG,GAAG,EAAE,CAAC,WAAW,CAAC,CAAC,GAAG,IAAI,CAAC,cAAc,CAAC,CAAC,CAAA;IAEhE,UAAU,CACR,OAAO,CAAC,EAAE;QACR,IAAI,KAAK,KAAK,QAAQ,EAAE;YACtB,OAAO,CAAC,IAAI,CACV,aAAa,CAAC,IAAI,EAAE,cAAc,EAAE,YAAY,CAAC,CAClD,CAAA;YACD,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,YAAY,EAAE,YAAY,CAAC,CAAC,CAAA;SAC9D;aAAM;YACL,OAAO,CAAC,IAAI,CACV,aAAa,CAAC,IAAI,EAAE,UAAU,EAAE,GAAG,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAC1D,CAAA;YACD,OAAO,CAAC,IAAI,CACV,aAAa,CACX,IAAI,EACJ,KAAK,KAAK,KAAK,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,YAAY,EAC/C,MAAM,CACP,CACF,CAAA;SACF;IACH,CAAC,EACD,CAAC,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC,CACrB,CAAA;IACD,OAAO,KAAK,CAAA;AACd,CAAC,CAAA","sourcesContent":["import { Base, TestBase } from '@tapjs/core'\nimport { useState } from 'react'\nimport { listenCleanup } from '../listen-cleanup.js'\nimport { useCleanup } from './use-cleanup.js'\n\nconst ALLSUBS = new Map<Base, Base[]>()\nconst FINSUBS = new Map<Base, Base[]>()\n\nexport const useSubtests = (\n  test: TestBase,\n  which: 'active' | 'finished' | 'all' = 'all'\n) => {\n  const [tests, updateTests] = useState<Base[]>([])\n  const cache = which === 'finished' ? FINSUBS : ALLSUBS\n  const addSub = (t: Base) => {\n    const tests = (cache.get(test) || []).concat(t)\n    cache.set(test, tests)\n    updateTests(tests)\n  }\n\n  const updateActive = () => updateTests([...test.activeSubtests])\n\n  useCleanup(\n    cleanup => {\n      if (which === 'active') {\n        cleanup.push(\n          listenCleanup(test, 'subtestStart', updateActive)\n        )\n        cleanup.push(listenCleanup(test, 'subtestEnd', updateActive))\n      } else {\n        cleanup.push(\n          listenCleanup(test, 'complete', () => cache.delete(test))\n        )\n        cleanup.push(\n          listenCleanup(\n            test,\n            which === 'all' ? 'subtestStart' : 'subtestEnd',\n            addSub\n          )\n        )\n      }\n    },\n    [test, tests, which]\n  )\n  return tests\n}\n"]}