{"version":3,"file":"test-summary.js","sourceRoot":"","sources":["../../src/test-summary.tsx"],"names":[],"mappings":"AACA,OAAO,EAAE,GAAG,EAAE,IAAI,EAAE,MAAM,KAAK,CAAA;AAC/B,OAAO,KAAa,MAAM,OAAO,CAAA;AACjC,OAAO,EAAE,cAAc,EAAE,MAAM,6BAA6B,CAAA;AAC5D,OAAO,EAAE,WAAW,EAAE,MAAM,0BAA0B,CAAA;AACtD,OAAO,EAAE,EAAE,EAAE,MAAM,SAAS,CAAA;AAC5B,OAAO,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAA;AAC3C,OAAO,EAAE,eAAe,EAAE,MAAM,wBAAwB,CAAA;AAgBxD,MAAM,CAAC,MAAM,WAAW,GAAwB,CAAC,EAC/C,IAAI,EACJ,OAAO,GAAG,KAAK,GAChB,EAAE,EAAE;IACH,MAAM,CAAC,MAAM,CAAC,GAAG,cAAc,CAAC,IAAI,CAAC,CAAA;IACrC,MAAM,IAAI,GAAG,WAAW,CAAC,IAAI,CAAC,CAAA;IAE9B,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,MAAM,CAAA;IAC1C,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC,OAAO,CAAA;IACzC,MAAM,EAAE,GAAG,CAAC,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,QAAQ,IAAI,CAAC,MAAM,CAAA;IAE1D,OAAO,CACL,oBAAC,GAAG,IAAC,aAAa,EAAC,QAAQ;QACzB,oBAAC,GAAG,IAAC,GAAG,EAAE,CAAC;YACT,oBAAC,SAAS,IAAC,IAAI,EAAE,IAAI,GAAI;YACzB,oBAAC,IAAI,QAAE,IAAI,CAAC,IAAI,CAAQ;YACvB,CAAC,CAAC,IAAI,IAAI,oBAAC,IAAI,IAAC,KAAK,EAAC,KAAK;gBAAE,IAAI;0BAAe;YAChD,CAAC,CAAC,IAAI,IAAI,oBAAC,IAAI,IAAC,KAAK,EAAC,SAAS;gBAAE,IAAI;wBAAa;YAClD,CAAC,CAAC,IAAI,IAAI,oBAAC,IAAI,IAAC,KAAK,EAAC,MAAM;gBAAE,IAAI;wBAAa;YAC/C,CAAC,CAAC,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,CAAC,IAAI,oBAAC,IAAI,aAAU;YAC5C,oBAAC,IAAI,IAAC,IAAI,UAAE,KAAK,CAAQ;YACxB,EAAE,IAAI,oBAAC,IAAI,IAAC,KAAK,EAAC,OAAO,SAAU;YACnC,IAAI,KAAK,CAAC,IAAI,CACb,oBAAC,IAAI,IAAC,IAAI,QAAC,QAAQ,UAChB,EAAE,CAAC,IAAI,CAAC,CACJ,CACR,CACG;QACN,oBAAC,eAAe,IAAC,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,GAAI,CAC7C,CACP,CAAA;AACH,CAAC,CAAA","sourcesContent":["import { Base } from '@tapjs/core'\nimport { Box, Text } from 'ink'\nimport React, { FC } from 'react'\nimport { useCountsLists } from './hooks/use-counts-lists.js'\nimport { useTestTime } from './hooks/use-test-time.js'\nimport { ms } from './ms.js'\nimport { TestBadge } from './test-badge.js'\nimport { TestResultsList } from './test-results-list.js'\n\nexport interface TestSummaryOpts {\n  /**\n   * The test being summarized\n   */\n  test: Base\n  /**\n   * Set to show assertion details.\n   *\n   * This is left unset in the log component, then set to true when\n   * summarizing at the end of the run.\n   */\n  details?: boolean\n}\n\nexport const TestSummary: FC<TestSummaryOpts> = ({\n  test,\n  details = false,\n}) => {\n  const [counts] = useCountsLists(test)\n  const time = useTestTime(test)\n\n  const { total, todo, skip, fail } = counts\n  const { exitCode, signal } = test.options\n  const ok = !todo && !skip && !fail && !exitCode && !signal\n\n  return (\n    <Box flexDirection=\"column\">\n      <Box gap={1}>\n        <TestBadge test={test} />\n        <Text>{test.name}</Text>\n        {!!fail && <Text color=\"red\">{fail} failed</Text>}\n        {!!todo && <Text color=\"magenta\">{todo} todo</Text>}\n        {!!skip && <Text color=\"cyan\">{skip} skip</Text>}\n        {!!(fail || todo || skip) && <Text>of</Text>}\n        <Text bold>{total}</Text>\n        {ok && <Text color=\"green\">OK</Text>}\n        {time !== 0 && (\n          <Text bold dimColor>\n            {ms(time)}\n          </Text>\n        )}\n      </Box>\n      <TestResultsList test={test} details={details} />\n    </Box>\n  )\n}\n"]}