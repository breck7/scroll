import chalk from 'chalk';
import { Box, Text } from 'ink';
import React from 'react';
import { stringify } from 'tap-yaml';
import { same } from 'tcompare';
import { Diff } from './diff.js';
import { Source } from './source.js';
import { Stack } from './stack.js';
export const ResultDetails = ({ result }) => {
    if (!result.diag || typeof result.diag !== 'object')
        return React.createElement(React.Fragment, null);
    const { test, stack, at, source, location, errorOrigin, error, code, ...otherDiags } = result.diag;
    if ('expected' in otherDiags &&
        'actual' in otherDiags &&
        !('found' in otherDiags) &&
        !('wanted' in otherDiags)) {
        otherDiags.found = otherDiags.actual;
        otherDiags.wanted = otherDiags.expected;
        delete otherDiags.actual;
        delete otherDiags.expected;
    }
    if ('found' in otherDiags &&
        'wanted' in otherDiags &&
        !('diff' in otherDiags)) {
        const { diff } = same(otherDiags.found, otherDiags.wanted);
        otherDiags.diff = diff;
    }
    // if we have a diff, don't show found/wanted, as it is frequently huge.
    if (otherDiags.diff?.trimEnd()) {
        delete otherDiags.found;
        delete otherDiags.wanted;
    }
    const { diff } = otherDiags;
    delete otherDiags.diff;
    return (React.createElement(Box, { paddingLeft: 4, flexDirection: "column" },
        React.createElement(Source, { stack: stack, location: location, at: at, source: source, errorOrigin: errorOrigin }),
        React.createElement(Diff, { diff: diff }),
        error ? (React.createElement(Text, null, stringify({ error })
            .trimEnd()
            .replace(/^error:([^\n]*\n)?/, chalk.dim('error:$1')))) : (React.createElement(React.Fragment, null)),
        code ? (React.createElement(Text, null, stringify({ code })
            .trimEnd()
            .replace(/^code:([^\n]*\n)?/, chalk.dim('code:$1')))) : (React.createElement(React.Fragment, null)),
        !!Object.keys(otherDiags).length && (React.createElement(Text, { dimColor: true }, stringify(otherDiags).trimEnd())),
        React.createElement(Stack, { stack: stack })));
};
//# sourceMappingURL=result-details.js.map