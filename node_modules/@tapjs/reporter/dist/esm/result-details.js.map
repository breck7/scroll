{"version":3,"file":"result-details.js","sourceRoot":"","sources":["../../src/result-details.tsx"],"names":[],"mappings":"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","sourcesContent":["import chalk from 'chalk'\nimport { Box, Text } from 'ink'\nimport React, { FC } from 'react'\nimport { Result } from 'tap-parser'\nimport { stringify } from 'tap-yaml'\nimport { same } from 'tcompare'\nimport { Diff } from './diff.js'\nimport { Source } from './source.js'\nimport { Stack } from './stack.js'\n\nexport const ResultDetails: FC<{ result: Result }> = ({ result }) => {\n  if (!result.diag || typeof result.diag !== 'object') return <></>\n  const {\n    test,\n    stack,\n    at,\n    source,\n    location,\n    errorOrigin,\n    error,\n    code,\n    ...otherDiags\n  } = result.diag\n\n  if (\n    'expected' in otherDiags &&\n    'actual' in otherDiags &&\n    !('found' in otherDiags) &&\n    !('wanted' in otherDiags)\n  ) {\n    otherDiags.found = otherDiags.actual\n    otherDiags.wanted = otherDiags.expected\n    delete otherDiags.actual\n    delete otherDiags.expected\n  }\n\n  if (\n    'found' in otherDiags &&\n    'wanted' in otherDiags &&\n    !('diff' in otherDiags)\n  ) {\n    const { diff } = same(otherDiags.found, otherDiags.wanted)\n    otherDiags.diff = diff\n  }\n\n  // if we have a diff, don't show found/wanted, as it is frequently huge.\n  if (otherDiags.diff?.trimEnd()) {\n    delete otherDiags.found\n    delete otherDiags.wanted\n  }\n  const { diff } = otherDiags\n  delete otherDiags.diff\n\n  return (\n    <Box paddingLeft={4} flexDirection=\"column\">\n      <Source\n        stack={stack}\n        location={location}\n        at={at}\n        source={source}\n        errorOrigin={errorOrigin}\n      />\n      <Diff diff={diff} />\n      {error ? (\n        <Text>\n          {stringify({ error })\n            .trimEnd()\n            .replace(/^error:([^\\n]*\\n)?/, chalk.dim('error:$1'))}\n        </Text>\n      ) : (\n        <></>\n      )}\n      {code ? (\n        <Text>\n          {stringify({ code })\n            .trimEnd()\n            .replace(/^code:([^\\n]*\\n)?/, chalk.dim('code:$1'))}\n        </Text>\n      ) : (\n        <></>\n      )}\n      {!!Object.keys(otherDiags).length && (\n        <Text dimColor>{stringify(otherDiags).trimEnd()}</Text>\n      )}\n      <Stack stack={stack} />\n    </Box>\n  )\n}\n"]}