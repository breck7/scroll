{"version":3,"file":"source.js","sourceRoot":"","sources":["../../src/source.tsx"],"names":[],"mappings":"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","sourcesContent":["// Syntax-highlighted source code tag\n\nimport { CallSiteLike, parseStack } from '@tapjs/stack'\nimport { highlightFileSync } from 'prismjs-terminal'\n\nimport chalk from 'chalk'\nimport { Box, Text } from 'ink'\nimport React, { FC } from 'react'\nimport stringLength from 'string-length'\n\nexport interface SourceOpts {\n  source?: string\n  stack?: string\n  location?: string\n  at?:\n    | CallSiteLike\n    | {\n        lineNumber?: number\n        fileName?: string\n        columnNumber?: number\n      }\n  errorOrigin?: {\n    source?: string\n    at?:\n      | CallSiteLike\n      | {\n          lineNumber?: number\n          fileName?: string\n          columnNumber?: number\n        }\n  }\n  isErrorOrigin?: boolean\n}\n\n/**\n * Pass in a test result.diag that has a source and callsite,\n * and it'll return a prettied up source line with the callsite\n * highlighted\n */\nexport const Source: FC<SourceOpts> = ({\n  source,\n  at,\n  errorOrigin,\n  stack,\n  location,\n  isErrorOrigin = false,\n}) => {\n  if (errorOrigin && typeof errorOrigin === 'object') {\n    return (\n      <>\n        <Source source={source} at={at} />\n        <Source {...errorOrigin} isErrorOrigin={true} />\n      </>\n    )\n  }\n  if (location && !stack) {\n    return (\n      <Source\n        {...{\n          source,\n          at,\n          errorOrigin,\n          stack: location,\n          isErrorOrigin,\n        }}\n      />\n    )\n  }\n  if (stack && !at) {\n    if (location) {\n      return (\n        <>\n          <Source stack={location} />\n          <Source stack={stack} isErrorOrigin={true} />\n        </>\n      )\n    }\n    const parsed = parseStack(stack)\n    for (const p of parsed) {\n      if (p.fileName) {\n        at = p\n        break\n      }\n    }\n  }\n  if (at && at.lineNumber && at.columnNumber && at.fileName) {\n    try {\n      const lines: string[] = highlightFileSync(at.fileName, {\n        lineNumbers: true,\n        theme: 'moria',\n        padding: 0,\n        /* c8 ignore start */\n        maxWidth:\n          process.stdout.columns && process.stdout.columns - 5,\n        /* c8 ignore stop */\n      }).split('\\n')\n      const lastLine = lines[lines.length - 1]\n      if (lastLine && stringLength(lastLine) === 0) lines.pop()\n      const ctx = 4\n      const startLine = Math.max(at.lineNumber - ctx, 0)\n      const endLine = Math.min(at.lineNumber + ctx, lines.length)\n      const numLen = at.lineNumber.toString().length\n      const maxNumLen = lines.length.toString().length\n      const excess = maxNumLen - numLen\n      const atLine = lines[at.lineNumber - 1] as string\n      const before = lines.slice(startLine, at.lineNumber - 1)\n      const after = lines.slice(at.lineNumber, endLine)\n      const len = Math.min(...before.map(l => stringLength(l)))\n      const msg =\n        (isErrorOrigin ? 'error origin: ' : '') + at.fileName\n      const title = chalk.bgAnsi256(234).dim(msg.padEnd(len))\n      const caret =\n        at.columnNumber &&\n        at.columnNumber < stringLength(atLine) &&\n        at.columnNumber > 0\n          ? chalk.ansi256(252).bgAnsi256(234)(\n              chalk.red(\n                ' '.repeat(excess) +\n                  '━'.repeat(numLen + at.columnNumber) +\n                  chalk.bold('┛') +\n                  ' '.repeat(len - (numLen + at.columnNumber) - 1)\n              )\n            )\n          : ''\n      const context = [title]\n      if (!caret) {\n        context.push(\n          ...before.map(b => ' ' + b),\n          chalk.bold.red('▶') + atLine,\n          ...after.map(l => ' ' + l)\n        )\n      } else {\n        context.push(...before, atLine, caret, ...after)\n      }\n      return (\n        <Box flexDirection=\"column\">\n          {context.map((l, key) => (\n            <Text key={key}>{l}</Text>\n          ))}\n        </Box>\n      )\n    } catch {}\n  }\n  return source ? (\n    <Box>\n      <Text>{source}</Text>\n    </Box>\n  ) : (\n    <></>\n  )\n}\n"]}