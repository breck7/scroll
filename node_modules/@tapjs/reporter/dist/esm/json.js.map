{"version":3,"file":"json.js","sourceRoot":"","sources":["../../src/json.ts"],"names":[],"mappings":"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","sourcesContent":["// json representation of the test run\n\nimport EventEmitter from 'events'\nimport { Minipass } from 'minipass'\nimport { Parser, Result } from 'tap-parser'\n\nconst trimResult = (\n  o: Record<string, any>\n): Record<string, any> | undefined => {\n  const entries = Object.entries(o)\n    .map(([k, v]) => [\n      k,\n      !!v && typeof v === 'object' && !Array.isArray(v)\n        ? trimResult(v)\n        : v,\n    ])\n    .filter(\n      ([k, v]) =>\n        k === 'ok' ||\n        k === 'id' ||\n        (v !== false &&\n          v !== null &&\n          v !== undefined &&\n          v !== '' &&\n          !(Array.isArray(v) && !v.length))\n    )\n  return Object.fromEntries(entries)\n}\n\nexport class Case {\n  result: Result\n  constructor(result: Result) {\n    this.result = result\n  }\n  get failures() {\n    return this.result.ok && !this.result.skip && !this.result.todo\n      ? 0\n      : 1\n  }\n  get skipped() {\n    return this.result.skip || this.result.todo ? 1 : 0\n  }\n  get tests() {\n    return 1\n  }\n  toJSON() {\n    return trimResult(this.result)\n  }\n}\n\nexport class Suite extends EventEmitter {\n  parser: Parser\n  suites: Suite[] = []\n  cases: Case[] = []\n  name: string\n  results?: Record<string, any>\n  summary?: Record<string, any>\n  constructor(parser: Parser) {\n    super()\n    this.parser = parser\n    this.name = parser.name\n    this.parser.on('complete', res => (this.results = res))\n    this.parser.on('child', p => {\n      const s = new Suite(p)\n      this.suites.push(s)\n      this.emit('suite', s)\n      s.on('suite', s => this.emit('suite', s))\n      s.on('suiteEnd', s => this.emit('suiteEnd', s))\n      s.on('case', c => this.emit('case', c))\n    })\n    this.parser.on('assert', a => this.onAssert(a))\n  }\n  onAssert(a: Result) {\n    // check to see if it's the summary test point for a suite\n    const s = this.suites[this.suites.length - 1]\n    if (s && !s.summary && a.name === s.name) {\n      s.summary = trimResult(a)\n      this.emit('suiteEnd', s)\n    } else {\n      const c = new Case(a)\n      this.cases.push(c)\n      this.emit('case', c)\n    }\n  }\n  toJSON() {\n    const { tests, failures, assertions, skipped } = this\n    return trimResult({\n      name: this.name,\n      level: this.parser.level,\n      ...(this.summary || {}),\n      plan: this.results?.plan,\n      bailout: this.results?.bailout,\n      tests,\n      failures,\n      assertions,\n      skipped,\n      suites: this.suites,\n      cases: this.cases,\n    })\n  }\n  get tests(): number {\n    return [...this.suites, ...this.cases]\n      .map(s => s.tests)\n      .reduce((a, b) => a + b, this.suites.length)\n  }\n  get failures(): number {\n    return [...this.suites, ...this.cases]\n      .map(s => s.failures)\n      .reduce((a, b) => a + b, 0)\n  }\n  get assertions(): number {\n    return this.suites\n      .map(s => s.assertions)\n      .reduce((a, b) => a + b, this.cases.length)\n  }\n  get skipped(): number {\n    return [...this.suites, ...this.cases]\n      .map(s => s.skipped)\n      .reduce(\n        (a, b) => a + b,\n        this.results?.plan.skipAll ||\n          this.summary?.skip ||\n          this.summary?.todo\n          ? 1\n          : 0\n      )\n  }\n}\n\nexport class Suites extends Suite {\n  constructor(p: Parser) {\n    super(p)\n    this.name ||= 'TAP Tests'\n  }\n}\n\nexport class JSONReport extends Minipass<string> {\n  parser: Parser = new Parser()\n  constructor() {\n    super({ encoding: 'utf8' })\n    const suites = new Suites(this.parser)\n    this.parser.on('complete', () => {\n      super.write(JSON.stringify(suites, null, 2))\n      super.end()\n    })\n  }\n\n  write(\n    chunk: Minipass.ContiguousData,\n    cb?: (() => void) | undefined\n  ): boolean\n  write(\n    chunk: Minipass.ContiguousData,\n    encoding?: Minipass.Encoding | undefined,\n    cb?: (() => void) | undefined\n  ): boolean\n  write(chunk: any, encoding?: any, cb?: any): boolean {\n    return this.parser.write(chunk, encoding, cb)\n  }\n\n  end(cb?: (() => void) | undefined): this\n  end(\n    chunk: Minipass.ContiguousData,\n    cb?: (() => void) | undefined\n  ): this\n  end(\n    chunk: Minipass.ContiguousData,\n    encoding?: Minipass.Encoding | undefined,\n    cb?: (() => void) | undefined\n  ): this\n  end(chunk?: any, encoding?: any, cb?: any): this {\n    this.parser.end(chunk, encoding, cb)\n    return this\n  }\n}\n\nexport class JSONStream extends Minipass<string> {\n  parser: Parser = new Parser()\n  constructor() {\n    super({ encoding: 'utf8' })\n    const suites = new Suites(this.parser)\n    suites.on('suite', s => this.suiteStart(s))\n    suites.on('case', c => this.onCase(c))\n    suites.on('suiteEnd', s => this.suiteEnd(s))\n    this.suiteStart(suites)\n    this.parser.on('complete', () => {\n      this.suiteEnd(suites)\n      super.end()\n    })\n  }\n\n  onCase(c: Case) {\n    super.write(\n      JSON.stringify([\n        c.result.skip\n          ? 'skip'\n          : c.result.todo\n          ? 'todo'\n          : c.result.ok\n          ? 'pass'\n          : 'fail',\n        c,\n      ]) + '\\n'\n    )\n  }\n\n  suiteStart(s: Suite) {\n    super.write(\n      JSON.stringify([\n        'start',\n        { name: s.name, level: s.parser.level },\n      ]) + '\\n'\n    )\n  }\n\n  suiteEnd(s: Suite) {\n    super.write(\n      JSON.stringify([\n        'end',\n        {\n          ...s.toJSON(),\n          suites: undefined,\n          cases: undefined,\n        },\n      ]) + '\\n'\n    )\n  }\n\n  write(\n    chunk: Minipass.ContiguousData,\n    cb?: (() => void) | undefined\n  ): boolean\n  write(\n    chunk: Minipass.ContiguousData,\n    encoding?: Minipass.Encoding | undefined,\n    cb?: (() => void) | undefined\n  ): boolean\n  write(chunk: any, encoding?: any, cb?: any): boolean {\n    return this.parser.write(chunk, encoding, cb)\n  }\n\n  end(cb?: (() => void) | undefined): this\n  end(\n    chunk: Minipass.ContiguousData,\n    cb?: (() => void) | undefined\n  ): this\n  end(\n    chunk: Minipass.ContiguousData,\n    encoding?: Minipass.Encoding | undefined,\n    cb?: (() => void) | undefined\n  ): this\n  end(chunk?: any, encoding?: any, cb?: any): this {\n    this.parser.end(chunk, encoding, cb)\n    return this\n  }\n}\n"]}