{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.tsx"],"names":[],"mappings":"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","sourcesContent":["import { LoadedConfig } from '@tapjs/config'\nimport { TAP, TestBase } from '@tapjs/core'\nimport { render } from 'ink'\nimport { isStream, Minipass } from 'minipass'\nimport React, { FC } from 'react'\nimport { Writable } from 'stream'\nimport { WriteStream } from 'tty'\nimport { Base } from './base.js'\nimport * as components from './components.js'\nimport { Dot } from './dot.js'\nimport * as hooks from './hooks.js'\nimport { JSONReport, JSONStream } from './json.js'\nimport { JUnit } from './junit.js'\nimport { MarkdownStream } from './markdown.js'\nimport { Min } from './min.js'\nimport { Terse } from './terse.js'\nimport * as utils from './utils.js'\n\nexport {\n  Base,\n  Terse,\n  Min,\n  Dot,\n  JSONReport,\n  JSONStream,\n  MarkdownStream,\n  JUnit,\n  hooks,\n  components,\n  utils,\n}\n\nexport interface TapReportOpts {\n  test: TestBase\n  config: LoadedConfig\n}\n\nexport type Reporter = FC<TapReportOpts>\nexport const types: Record<\n  string,\n  Reporter | typeof Minipass<string>\n> = {}\nexport const addType = (\n  name: string,\n  report: Reporter | typeof Minipass<string>\n) => {\n  types[name] = report\n}\naddType('base', Base)\naddType('terse', Terse)\naddType('min', Min)\naddType('dot', Dot)\naddType('jsonstream', JSONStream)\naddType('json', JSONReport)\naddType('junit', JUnit)\naddType('markdown', MarkdownStream)\n\nexport const report = async (\n  Type: string | Reporter | typeof Minipass<string>,\n  tap: TAP,\n  config: LoadedConfig,\n  stdout: Writable = process.stdout\n) => {\n  if (typeof Type === 'string') {\n    if (types.hasOwnProperty(Type)) {\n      Type = types[Type] as Reporter | typeof Minipass<string>\n    } else {\n      throw new TypeError(`unknown report type: ${Type}`)\n    }\n  }\n  tap.register()\n  if (isStream(Type.prototype)) {\n    const reporter = new (Type as typeof Minipass)()\n    tap.pipe(reporter).pipe(stdout)\n  } else {\n    // always show the cursor when we finish\n    tap.on('complete', () => process.stdout.write('\\x1b[?25h'))\n    const T = Type as Reporter\n    const opts =\n      stdout === process.stdout\n        ? { patchConsole: false }\n        : (stdout as WriteStream)\n    render(<T test={tap} config={config}></T>, opts)\n  }\n  return true\n}\n"]}