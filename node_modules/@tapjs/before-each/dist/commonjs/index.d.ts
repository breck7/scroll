/**
 * Plugin class providing
 * {@link @tapjs/before-each!BeforeEach#beforeEach} on the
 * {@link @tapjs/test!index.Test} class.
 *
 * @module
 */
import type { Test } from '@tapjs/test';
import { TestBase } from '@tapjs/core';
/**
 * Implementation class returned by plugin
 */
export declare class BeforeEach {
    #private;
    constructor(t: TestBase);
    /**
     * Run the supplied function before any child tests, and all of their
     * children, and so on.
     *
     * The test about to run is an argument to the function. While its test
     * method has not yet run, it is safe to call test methods on it, but note
     * that this may potentially be confusing if for example you call `t.plan()`
     * and this conflicts with the `t.plan()` called in the test method.
     *
     * @group Test Lifecycle Management
     */
    beforeEach(fn: (t: Test) => any): void;
}
/**
 * plugin method that instantiates the {@link @tapjs/before-each!BeforeEach} object
 */
export declare const plugin: (t: TestBase) => BeforeEach;
//# sourceMappingURL=index.d.ts.map