"use strict";
/**
 * Heuristic to find a nice ergonomic number of jobs to do in parallel by
 * default.
 *
 * If we use ALL the available CPUs, then that can actually make tests more
 * flaky in some cases, because things will start to drag.
 *
 * Especially, if there's a ton of CPUs, like on a hosted CI system, we don't
 * want to flood the system too aggressively, since memory may be constrained.
 * But, we do want to parallelize tests quite a bit by default, as this can
 * speed things up considerably.
 *
 * @module
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.jobs = void 0;
const os = __importStar(require("node:os"));
const max = Math.max(1, typeof os.availableParallelism === 'function'
    ? os.availableParallelism()
    : os.cpus().length);
// If we only have a few CPUs, ok, use em all
exports.jobs = 
// it's the only one, we have to use it.
max <= 1
    ? 1
    : // leave one CPU free
        max <= 4
            ? max - 1
            : // if we have up to 16, use 3/4 of them
                max <= 16
                    ? Math.ceil(max * 0.75)
                    : // if we have up to 32, use 1/2 of them
                        max <= 32
                            ? Math.max(12, Math.ceil(max * 0.5))
                            : // top out at 16
                                16;
//# sourceMappingURL=jobs.js.map