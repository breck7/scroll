{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Module that handles all TAP configuration needs\n *\n * @module\n */\n\nimport { argv, cwd, env } from '@tapjs/core'\nimport {\n  config as pluginConfig,\n  defaultPlugins,\n  testFileExtensions,\n} from '@tapjs/test'\nimport { lstat, readdir, readFile, writeFile } from 'fs/promises'\nimport { ConfigSet, Jack, OptionsResults, Unwrap } from 'jackspeak'\nimport { relative, resolve } from 'node:path'\nimport { basename, dirname } from 'path'\nimport {\n  kIndent,\n  parse as jsonParse,\n  stringify as jsonStringify,\n} from 'polite-json'\nimport {\n  parse as yamlParse,\n  stringify as yamlStringify,\n} from 'tap-yaml'\nimport { walkUp } from 'walk-up-path'\nimport baseConfig from './jack.js'\n\nexport type { baseConfig }\n\nconst exists = async (f: string) =>\n  lstat(f).then(\n    () => true,\n    () => false\n  )\n\n/**\n * The base config set (before any plugins) that TAP responds to\n */\nexport type BaseConfigSet = Unwrap<typeof baseConfig>\n\n/**\n * Class that handles configuration for TAP.\n *\n * Typically, {@link @tapjs/config!index.TapConfig.load} is the way to get one of\n * these.\n */\nexport class TapConfig<C extends ConfigSet = BaseConfigSet> {\n  /**\n   * The {@link https://npmjs.com/jackspeak | JackSpeak} object\n   * representing TAP's configuration\n   */\n  jack: Jack<C>\n  /**\n   * Parsed values in effect\n   */\n  values?: OptionsResults<C>\n  /**\n   * positional arguments to the TAP process\n   */\n  positionals?: string[]\n  /**\n   * The effective current working directory for various globbing actions.\n   * The root of the project where a .taprc, package.json, or .git was\n   * found.\n   */\n  globCwd: string = cwd\n  /**\n   * The file providing configuration, either a package.json or .taprc.\n   * If undefined, it means that we don't have a config file.\n   */\n  configFile?: string\n  /**\n   * values read from the config file, if loaded\n   */\n  valuesFromConfigFile?: OptionsResults<C>\n\n  /**\n   * The file extensions that tap knows how to load, updated by plugins\n   */\n  testFileExtensions: Set<string> = testFileExtensions\n\n  constructor(jack: Jack<C> = baseConfig) {\n    this.jack = jack\n  }\n\n  /**\n   * Parse the arguments and set configuration and positionals accordingly.\n   */\n  parse(args: string[] = argv): this & {\n    values: OptionsResults<C>\n    positionals: string[]\n  } {\n    const v = this.values\n    const p = this.positionals\n    if (v && p) {\n      return this as this & {\n        values: OptionsResults<C>\n        positionals: string[]\n      }\n    }\n    const { values, positionals } = this.jack.parse(args)\n    const { include } = values as unknown as { include: string[] }\n    for (let i = 0; i < include.length; i++) {\n      const inc = include[i]\n      if (inc && inc.includes('__EXTENSIONS__')) {\n        include[i] = this.expandInclude(inc)\n      }\n    }\n\n    return Object.assign(this, { values, positionals })\n  }\n\n  /**\n   * replace __EXTENSIONS__ in a glob with the actual testFileExtensions\n   */\n  expandInclude(inc: string) {\n    return inc.replace(\n      /__EXTENSIONS__/g,\n      `@(${[...this.testFileExtensions].join('|')})`\n    )\n  }\n\n  /**\n   * Get a configuration value, as we currently know it\n   */\n  get<K extends keyof OptionsResults<C>>(k: K): OptionsResults<C>[K] {\n    const value = this.parse().values[k]\n    // special case: if --disable-coverage is set, then default\n    // --allow-empty-coverage to true, so we don't get unuseful failures.\n    if (k === 'allow-empty-coverage' && value === undefined) {\n      const disabled = this.get('disable-coverage')\n      if (disabled) return true as OptionsResults<C>[K]\n    }\n    return value\n  }\n\n  /**\n   * Add fields to the config set. Used when loading plugins that export\n   * a `config` object.\n   */\n  addFields<F extends ConfigSet>(fields: F) {\n    return new TapConfig(this.jack.addFields(fields))\n  }\n\n  /**\n   * Load configuration fields exported by active plugins\n   */\n  loadPluginConfigFields() {\n    return new TapConfig(pluginConfig(this.jack))\n  }\n\n  /**\n   * load the file, and write the fields in data. If the file is not present,\n   * create it.\n   */\n  async editConfigFile(\n    data: OptionsResults<C>,\n    configFile = this.configFile,\n    overwrite: boolean = false\n  ) {\n    // we'll always have a config file by the time we get here\n    /* c8 ignore start */\n    if (!configFile)\n      throw new Error('cannot edit without a configFile')\n    /* c8 ignore stop */\n    // also set the fields\n    await this.loadConfigData(data, configFile)\n    if (this.values) Object.assign(this.values, data)\n    const b = basename(configFile)\n    if (b === '.taprc') {\n      return this.editYAMLConfig(data, configFile, overwrite)\n    } else if (b === 'package.json') {\n      return this.editPackageJsonConfig(data, configFile, overwrite)\n    } else {\n      throw new Error(\n        'unrecognized config file type, must be ' +\n          'named .taprc or package.json: ' +\n          configFile\n      )\n    }\n  }\n\n  /**\n   * Edit a yaml .taprc file\n   */\n  async editYAMLConfig(\n    data: OptionsResults<C>,\n    configFile: string,\n    overwrite: boolean = false\n  ) {\n    const src: OptionsResults<C> =\n      (await this.readYAMLConfig(configFile, true)) || {}\n    return writeFile(\n      configFile,\n      // split up to un-confuse vim\n      '# vi' +\n        'm: set filetype=yaml :\\n' +\n        yamlStringify(overwrite ? data : Object.assign(src, data))\n    )\n  }\n\n  /**\n   * Edit the `\"tap\"` section of a package.json file\n   */\n  async editPackageJsonConfig(\n    data: OptionsResults<C>,\n    configFile: string,\n    overwrite: boolean = false\n  ) {\n    const pj: any =\n      (await this.readPackageJson(configFile, true)) || {}\n    const { tap = {} } = pj\n    const src = (\n      tap && typeof tap === 'object' && !Array.isArray(tap) ? tap : {}\n    ) as OptionsResults<C>\n    pj.tap = overwrite ? data : Object.assign(src, data)\n    if (undefined === pj[kIndent]) pj[kIndent] = 2\n    return writeFile(configFile, jsonStringify(pj))\n  }\n\n  /**\n   * Read configuration from a yaml .taprc file\n   */\n  async readYAMLConfig(\n    rc: string,\n    silent: boolean = false\n  ): Promise<OptionsResults<C> | undefined> {\n    try {\n      return yamlParse(\n        await readFile(rc, 'utf8')\n      ) as OptionsResults<C>\n    } catch (er) {\n      if (!silent) console.error('Error loading .taprc:', rc, er)\n      return undefined\n    }\n  }\n\n  /**\n   * Read a package.json file\n   */\n  async readPackageJson(\n    pj: string,\n    silent: boolean = false\n  ): Promise<{ tap?: OptionsResults<C> } | undefined> {\n    try {\n      const res = jsonParse(await readFile(pj, 'utf8'))\n      if (res && typeof res === 'object' && !Array.isArray(res)) {\n        return res as { tap?: OptionsResults<C> }\n      }\n    } catch (er) {\n      if (!silent)\n        console.error('Error loading package.json:', pj, er)\n    }\n    return undefined\n  }\n\n  /**\n   * Read the configuration from the `\"tap\"` object in a package.json file\n   */\n  async readPackageJsonConfig(\n    pj: string\n  ): Promise<OptionsResults<C> | undefined> {\n    return (await this.readPackageJson(pj))?.tap as\n      | OptionsResults<C>\n      | undefined\n  }\n\n  /**\n   * Read the configuration from a dependency\n   */\n  async readDepConfig(file: string) {\n    // people like yaml files to end in .yaml or .yml, but package.json\n    // should always be a file named 'package.json'\n    return basename(file) === 'package.json'\n      ? this.readPackageJsonConfig(file)\n      : this.readYAMLConfig(file)\n  }\n\n  /**\n   * Resolve the source of an `extends` field in TAP configs\n   */\n  async resolveExtension(ext: string, file: string) {\n    const asFile = resolve(dirname(file), ext)\n    if (await exists(asFile)) {\n      return asFile\n    }\n    // the dep might ONLY have a package.json or .taprc, so we cannot\n    // use require.resolve or resolveImport for this.\n    // Just walk up the paths ourselves.\n    for (const path of walkUp(dirname(file))) {\n      const pkgRoot = resolve(path, `node_modules/${ext}`)\n      const pj = resolve(pkgRoot, 'package.json')\n      // pj MUST exist, but we prefer .taprc\n      if (!(await exists(pj))) continue\n      const rc = resolve(pkgRoot, '.taprc')\n      return (await exists(rc)) ? rc : pj\n    }\n    throw new Error(\n      `Could not read TAP config from package ${ext}, ` +\n        `via the config file at ${file}. ` +\n        `Maybe try: npm install --save-dev ${ext}`\n    )\n  }\n\n  /**\n   * Load some configuration fields from a config file\n   */\n  async loadConfigData(\n    data: any,\n    configFile: string\n  ): Promise<\n    this & {\n      configFile: string\n      valuesFromConfigFile: OptionsResults<C>\n    }\n  > {\n    if (!!data && typeof data === 'object') {\n      await this.extendConfigData(data, configFile)\n      this.jack.setConfigValues(data, configFile)\n    }\n    return Object.assign(this, {\n      configFile,\n      valuesFromConfigFile: data || {},\n    })\n  }\n\n  /**\n   * Apply the extension from a resolved `extends` field in the config.\n   */\n  async extendConfigData(data: Record<string, any>, file: string) {\n    const seen = new Set<string>([file])\n    // config, extension, resolved extension\n    const stack: [Record<string, any>, string, string][] = [\n      [data, file, file],\n    ]\n    while (\n      typeof data.extends === 'string' &&\n      !seen.has(data.extends)\n    ) {\n      const { extends: ext } = data\n      delete data.extends\n      try {\n        const resolved = await this.resolveExtension(ext, file)\n        const extension = await this.readDepConfig(resolved)\n        if (!extension) break\n        seen.add(ext)\n        stack.unshift([extension, ext, resolved])\n        file = resolved\n        data = extension\n      } catch (er) {\n        throw Object.assign(er as Error, {\n          extendedFrom: [ext, ...stack.map(([_, ext]) => ext)],\n        })\n      }\n    }\n\n    // now we have a stack of all the configs, apply in reverse order so the\n    // nearest overrides the furthest\n    while (stack.length && stack[0]) {\n      const [data, _, resolved] = stack[0]\n      const { extends: ext, ...rest } = data\n      try {\n        this.jack.setConfigValues(rest as OptionsResults<C>, resolved)\n        stack.shift()\n      } catch (er) {\n        throw Object.assign(er as Error, {\n          extendedFrom: stack.map(([_, ext]) => ext),\n        })\n      }\n    }\n  }\n\n  /**\n   * Load configuration from a file\n   */\n  async loadConfigFile(): Promise<\n    this & {\n      configFile: string\n      valuesFromConfigFile: OptionsResults<C>\n    }\n  > {\n    // start from cwd, walk up until we find a .git\n    // or package.json, or env.HOME\n    const home = env.HOME || cwd\n    const envRC = env.TAP_RCFILE\n    const isPJ = envRC && basename(envRC) === 'package.json'\n\n    for (const p of walkUp(cwd)) {\n      const entries = await readdir(p).catch(() => null)\n      if (!entries) break\n      if (entries.includes('.taprc')) {\n        this.globCwd = p\n        env.TAP_CWD = p\n        if (envRC) break\n        const file = resolve(p, '.taprc')\n        return this.loadConfigData(\n          await this.readYAMLConfig(file),\n          file\n        )\n      } else if (entries.includes('package.json')) {\n        this.globCwd = p\n        env.TAP_CWD = p\n        if (envRC) break\n        const file = resolve(p, 'package.json')\n        return this.loadConfigData(\n          await this.readPackageJsonConfig(file),\n          file\n        )\n      } else if (entries.includes('.git')) {\n        // this just sets the default config file, even though we didn't\n        // get anything from it, so `tap plugin <add|rm>` knows where to\n        // write the resulting config to.\n        env.TAP_CWD = p\n        this.globCwd = p\n        if (envRC) break\n        return Object.assign(this, {\n          configFile: resolve(p, '.taprc'),\n          valuesFromConfigFile: {},\n        })\n      } else if (relative(home, p) === '') {\n        env.TAP_CWD = cwd\n        this.globCwd = cwd\n        // got to ~, just use cwd\n        break\n      }\n    }\n\n    return envRC\n      ? this.loadConfigData(\n          await (isPJ\n            ? this.readPackageJsonConfig(envRC)\n            : this.readYAMLConfig(envRC)),\n          envRC\n        )\n      : Object.assign(this, {\n          configFile: resolve(cwd, '.taprc'),\n          valuesFromConfigFile: {},\n        })\n  }\n\n  /**\n   * The signature of all plugin modules that ought to be loaded.\n   */\n  get pluginSignature() {\n    return this.pluginList\n      .sort((a, b) => a.localeCompare(b, 'en'))\n      .join('\\n')\n      .trim()\n  }\n\n  /**\n   * The list of all plugins that ought to be loaded.\n   */\n  get pluginList() {\n    const {\n      values: { plugin = [] },\n    } = this.parse()\n    const pluginSet = new Set<string>(defaultPlugins)\n    for (const p of plugin as string[]) {\n      if (p.startsWith('!')) {\n        pluginSet.delete(p.substring(1))\n      } else {\n        pluginSet.add(p)\n      }\n    }\n    return [...pluginSet]\n  }\n\n  /**\n   * Determine whether the TAP process should show colors. Update chalk\n   * accordingly.\n   */\n  async loadColor() {\n    let c = this.get('color')\n    const chalk = (await import('chalk')).default\n    let color: boolean\n    if (\n      env.TAP !== '1' &&\n      env.NO_COLOR !== '1' &&\n      (c === true || (c === undefined && chalk.level > 0))\n    ) {\n      color = true\n      chalk.level = Math.max(chalk.level, 1) as 0 | 1 | 2 | 3\n      env.FORCE_COLOR = String(chalk.level)\n      delete env.NO_COLOR\n    } else {\n      color = false\n      chalk.level = 0\n      env.FORCE_COLOR = '0'\n      env.NO_COLOR = '1'\n    }\n    const { values } = this.parse()\n    ;(values as OptionsResults<C> & { color: boolean }).color = color\n    return this\n  }\n\n  /**\n   * Load the reporter that ought to be used, based on the configured\n   * value, the `TAP` environment variable, and whether or not we have\n   * colors enabled.\n   */\n  loadReporter() {\n    const r = this.get('reporter')\n    if (r !== undefined && env.TAP !== '1') return this\n    const { values } = this.parse()\n    const reporter = env.TAP === '1' || !values.color ? 'tap' : 'base'\n    ;(values as OptionsResults<C> & { reporter: string }).reporter =\n      reporter\n    return this\n  }\n\n  /**\n   * cache of the loaded config\n   */\n  static #loaded: LoadedConfig | undefined\n  /**\n   * Load the configuration and return a Promise to a\n   * {@link @tapjs/config!index.TapConfig} object\n   */\n  static async load(): Promise<LoadedConfig> {\n    if (this.#loaded) return this.#loaded\n    const a = new TapConfig()\n    const b = a.loadPluginConfigFields()\n    const c = await b.loadConfigFile()\n    const d = await c.loadColor()\n    const e = d.loadReporter()\n    const f = e.parse()\n    return (this.#loaded = f)\n  }\n}\n\n/**\n * A fully loaded {@link @tapjs/config!index.TapConfig} object\n */\nexport interface LoadedConfig\n  extends ReturnType<\n    ReturnType<\n      Awaited<\n        ReturnType<\n          Awaited<\n            ReturnType<\n              ReturnType<\n                TapConfig['loadPluginConfigFields']\n              >['loadConfigFile']\n            >\n          >['loadColor']\n        >\n      >['loadReporter']\n    >['parse']\n  > {}\n"]}