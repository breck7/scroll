/**
 * Module that handles all TAP configuration needs
 *
 * @module
 */
import { ConfigSet, Jack, OptionsResults, Unwrap } from 'jackspeak';
import baseConfig from './jack.js';
export type { baseConfig };
/**
 * The base config set (before any plugins) that TAP responds to
 */
export type BaseConfigSet = Unwrap<typeof baseConfig>;
/**
 * Class that handles configuration for TAP.
 *
 * Typically, {@link @tapjs/config!index.TapConfig.load} is the way to get one of
 * these.
 */
export declare class TapConfig<C extends ConfigSet = BaseConfigSet> {
    #private;
    /**
     * The {@link https://npmjs.com/jackspeak | JackSpeak} object
     * representing TAP's configuration
     */
    jack: Jack<C>;
    /**
     * Parsed values in effect
     */
    values?: OptionsResults<C>;
    /**
     * positional arguments to the TAP process
     */
    positionals?: string[];
    /**
     * The effective current working directory for various globbing actions.
     * The root of the project where a .taprc, package.json, or .git was
     * found.
     */
    globCwd: string;
    /**
     * The file providing configuration, either a package.json or .taprc.
     * If undefined, it means that we don't have a config file.
     */
    configFile?: string;
    /**
     * values read from the config file, if loaded
     */
    valuesFromConfigFile?: OptionsResults<C>;
    /**
     * The file extensions that tap knows how to load, updated by plugins
     */
    testFileExtensions: Set<string>;
    constructor(jack?: Jack<C>);
    /**
     * Parse the arguments and set configuration and positionals accordingly.
     */
    parse(args?: string[]): this & {
        values: OptionsResults<C>;
        positionals: string[];
    };
    /**
     * replace __EXTENSIONS__ in a glob with the actual testFileExtensions
     */
    expandInclude(inc: string): string;
    /**
     * Get a configuration value, as we currently know it
     */
    get<K extends keyof OptionsResults<C>>(k: K): OptionsResults<C>[K];
    /**
     * Add fields to the config set. Used when loading plugins that export
     * a `config` object.
     */
    addFields<F extends ConfigSet>(fields: F): TapConfig<C & F>;
    /**
     * Load configuration fields exported by active plugins
     */
    loadPluginConfigFields(): TapConfig<C & import("jackspeak").ConfigSetFromMetaSet<"boolean", false, {
        only: {
            type: string;
            short: string;
            description: string;
            nodeArgs: (v: boolean) => string[];
        } & {
            type: "boolean";
            short?: string | undefined;
            default?: boolean | undefined;
            description?: string | undefined;
            hint?: undefined;
            validate?: ((v: any) => v is boolean) | undefined;
        } & {
            multiple?: false | undefined;
            delim?: undefined;
        };
    }> & import("jackspeak").ConfigSetFromMetaSet<"string", true, {
        grep: {
            type: string;
            multiple: boolean;
            hint: string;
            short: string;
            description: string;
            nodeArgs: (value: string[]) => string[];
        } & {
            type: "string";
            short?: string | undefined;
            default?: string[] | undefined;
            description?: string | undefined;
            hint?: string | undefined;
            validate?: ((v: any) => v is string[]) | undefined;
        } & {
            multiple: true;
            delim?: string | undefined;
        };
    }> & import("jackspeak").ConfigSetFromMetaSet<"boolean", false, {
        invert: {
            type: string;
            short: string;
            description: string;
        } & {
            type: "boolean";
            short?: string | undefined;
            default?: boolean | undefined;
            description?: string | undefined;
            hint?: undefined;
            validate?: ((v: any) => v is boolean) | undefined;
        } & {
            multiple?: false | undefined;
            delim?: undefined;
        };
    }> & import("jackspeak").ConfigSetFromMetaSet<"boolean", false, {
        "no-invert": {
            type: string;
            short: string;
            description: string;
        } & {
            type: "boolean";
            short?: string | undefined;
            default?: boolean | undefined;
            description?: string | undefined;
            hint?: undefined;
            validate?: ((v: any) => v is boolean) | undefined;
        } & {
            multiple?: false | undefined;
            delim?: undefined;
        };
    }> & import("jackspeak").ConfigSetFromMetaSet<"boolean", false, {
        "filter-quietly": {
            type: string;
            description: string;
        } & {
            type: "boolean";
            short?: string | undefined;
            default?: boolean | undefined;
            description?: string | undefined;
            hint?: undefined;
            validate?: ((v: any) => v is boolean) | undefined;
        } & {
            multiple?: false | undefined;
            delim?: undefined;
        };
    }> & import("jackspeak").ConfigSetFromMetaSet<"boolean", false, {
        "no-filter-quietly": {
            type: string;
            description: string;
        } & {
            type: "boolean";
            short?: string | undefined;
            default?: boolean | undefined;
            description?: string | undefined;
            hint?: undefined;
            validate?: ((v: any) => v is boolean) | undefined;
        } & {
            multiple?: false | undefined;
            delim?: undefined;
        };
    }> & import("jackspeak").ConfigSetFromMetaSet<"boolean", false, {
        "save-fixture": {
            type: string;
            short: string;
            description: string;
        } & {
            type: "boolean";
            short?: string | undefined;
            default?: boolean | undefined;
            description?: string | undefined;
            hint?: undefined;
            validate?: ((v: any) => v is boolean) | undefined;
        } & {
            multiple?: false | undefined;
            delim?: undefined;
        };
    }> & import("jackspeak").ConfigSetFromMetaSet<"boolean", false, {
        snapshot: {
            type: string;
            short: string;
            description: string;
        } & {
            type: "boolean";
            short?: string | undefined;
            default?: boolean | undefined;
            description?: string | undefined;
            hint?: undefined;
            validate?: ((v: any) => v is boolean) | undefined;
        } & {
            multiple?: false | undefined;
            delim?: undefined;
        };
    }> & import("jackspeak").ConfigSetFromMetaSet<"boolean", false, {
        "snapshot-clean-cwd": {
            type: string;
            default: boolean;
            description: string;
        } & {
            type: "boolean";
            short?: string | undefined;
            default?: boolean | undefined;
            description?: string | undefined;
            hint?: undefined;
            validate?: ((v: any) => v is boolean) | undefined;
        } & {
            multiple?: false | undefined;
            delim?: undefined;
        };
    }> & import("jackspeak").ConfigSetFromMetaSet<"boolean", false, {
        "no-snapshot-clean-cwd": {
            type: string;
            description: string;
        } & {
            type: "boolean";
            short?: string | undefined;
            default?: boolean | undefined;
            description?: string | undefined;
            hint?: undefined;
            validate?: ((v: any) => v is boolean) | undefined;
        } & {
            multiple?: false | undefined;
            delim?: undefined;
        };
    }> & import("jackspeak").ConfigSetFromMetaSet<"boolean", false, {
        typecheck: {
            type: string;
            description: string;
        } & {
            type: "boolean";
            short?: string | undefined;
            default?: boolean | undefined;
            description?: string | undefined;
            hint?: undefined;
            validate?: ((v: any) => v is boolean) | undefined;
        } & {
            multiple?: false | undefined;
            delim?: undefined;
        };
    }> & import("jackspeak").ConfigSetFromMetaSet<"string", false, {
        tsconfig: {
            type: string;
            description: string;
        } & {
            type: "string";
            short?: string | undefined;
            default?: string | undefined;
            description?: string | undefined;
            hint?: string | undefined;
            validate?: ((v: any) => v is string) | undefined;
        } & {
            multiple?: false | undefined;
            delim?: undefined;
        };
    }>>;
    /**
     * load the file, and write the fields in data. If the file is not present,
     * create it.
     */
    editConfigFile(data: OptionsResults<C>, configFile?: string | undefined, overwrite?: boolean): Promise<void>;
    /**
     * Edit a yaml .taprc file
     */
    editYAMLConfig(data: OptionsResults<C>, configFile: string, overwrite?: boolean): Promise<void>;
    /**
     * Edit the `"tap"` section of a package.json file
     */
    editPackageJsonConfig(data: OptionsResults<C>, configFile: string, overwrite?: boolean): Promise<void>;
    /**
     * Read configuration from a yaml .taprc file
     */
    readYAMLConfig(rc: string, silent?: boolean): Promise<OptionsResults<C> | undefined>;
    /**
     * Read a package.json file
     */
    readPackageJson(pj: string, silent?: boolean): Promise<{
        tap?: OptionsResults<C>;
    } | undefined>;
    /**
     * Read the configuration from the `"tap"` object in a package.json file
     */
    readPackageJsonConfig(pj: string): Promise<OptionsResults<C> | undefined>;
    /**
     * Read the configuration from a dependency
     */
    readDepConfig(file: string): Promise<OptionsResults<C> | undefined>;
    /**
     * Resolve the source of an `extends` field in TAP configs
     */
    resolveExtension(ext: string, file: string): Promise<string>;
    /**
     * Load some configuration fields from a config file
     */
    loadConfigData(data: any, configFile: string): Promise<this & {
        configFile: string;
        valuesFromConfigFile: OptionsResults<C>;
    }>;
    /**
     * Apply the extension from a resolved `extends` field in the config.
     */
    extendConfigData(data: Record<string, any>, file: string): Promise<void>;
    /**
     * Load configuration from a file
     */
    loadConfigFile(): Promise<this & {
        configFile: string;
        valuesFromConfigFile: OptionsResults<C>;
    }>;
    /**
     * The signature of all plugin modules that ought to be loaded.
     */
    get pluginSignature(): string;
    /**
     * The list of all plugins that ought to be loaded.
     */
    get pluginList(): string[];
    /**
     * Determine whether the TAP process should show colors. Update chalk
     * accordingly.
     */
    loadColor(): Promise<this>;
    /**
     * Load the reporter that ought to be used, based on the configured
     * value, the `TAP` environment variable, and whether or not we have
     * colors enabled.
     */
    loadReporter(): this;
    /**
     * Load the configuration and return a Promise to a
     * {@link @tapjs/config!index.TapConfig} object
     */
    static load(): Promise<LoadedConfig>;
}
/**
 * A fully loaded {@link @tapjs/config!index.TapConfig} object
 */
export interface LoadedConfig extends ReturnType<ReturnType<Awaited<ReturnType<Awaited<ReturnType<ReturnType<TapConfig['loadPluginConfigFields']>['loadConfigFile']>>['loadColor']>>['loadReporter']>['parse']> {
}
//# sourceMappingURL=index.d.ts.map