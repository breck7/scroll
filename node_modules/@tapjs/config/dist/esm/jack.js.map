{"version":3,"file":"jack.js","sourceRoot":"","sources":["../../src/jack.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * The definition for all TAP configuration that is not provided by plugins\n *\n * @module\n */\nimport { env } from '@tapjs/core'\nimport { defaultPlugins } from '@tapjs/test'\nimport { jack } from 'jackspeak'\n\nimport { jobs } from './jobs.js'\n\nconst coverageReporters = [\n  'clover',\n  'cobertura',\n  'html',\n  'json',\n  'json-summary',\n  'lcov',\n  'lcovonly',\n  'none',\n  'teamcity',\n  'text',\n  'text-lcov',\n  'text-summary',\n]\n\n// Can't pull this directly out of @tapjs/reporter because\n// reporter is ESM only because ink is ESM only.\nconst testReporters = [\n  'base',\n  'terse',\n  'min',\n  'dot',\n  'silent',\n  'json',\n  'jsonstream',\n  'markdown',\n  'junit',\n  'tap',\n]\n\n/**\n * Configuration options for TAP core.\n *\n * Documentation available via `tap -h`\n *\n * @see {@link https://npmjs.com/jackspeak}\n */\nexport default jack({\n  envPrefix: 'TAP',\n  allowPositionals: true,\n  env,\n  usage: 'tap [<options>] [<cmd> [<args> ...]]',\n})\n  .heading('TAP - Test Anything Protocol library for JavaScript')\n  .description(\n    `Short options are parsed gnu-style, so for example \\`-bCRterse\\` would be\n     equivalent to \\`--bail --no-color --reporter=terse\\`\n\n     Much more documentation available at: <https://www.node-tap.org/>`\n  )\n\n  .heading('Subcommands')\n  .heading('tap run [test files...]', 3, { pre: true })\n  .description(\n    `(default) Run the files if specified, or search for test files\n    according to the \\`include\\` and \\`exclude\\` glob expressions.\n\n    If the first argument to the tap cli is not one of these subcommands,\n    then it will be treated as a test file to run.`\n  )\n\n  .heading('tap plugin [add <plugin> | rm <plugin> | list]', 3, {\n    pre: true,\n  })\n  .description(`Manage plugins`)\n  .heading('tap plugin add <plugin>', 4, { pre: true })\n  .description(\n    `Add the specified plugin to the tap project config.\n\n    If the plugin is one of tap's builtin plugins that was previously\n    disabled, then it will simply be re-enabled.\n\n    If the plugin is not a module on disk, then tap will attempt to install\n    the plugin package as a dev dependency by running\n    \\`npm install --save-dev <plugin>\\`.\n\n    Specifying a version or range is supported. For example,\n    \\`tap plugin add my-plugin@1.x\\` will try to install a version that\n    satisfies the semver range. It will be saved in the configuration without\n    the version. If the plugin is updated in node_modules, it _may_ require\n    running \\`tap build\\`, if the types or interfaces change between versions.`\n  )\n  .heading('tap plugin rm <plugin>', 4, { pre: true })\n  .description(\n    `Remove the specified plugin.\n\n    If the plugin is one of tap's builtin plugins, then it will be disabled\n    by adding \\`!<plugin>\\` to the \\`plugin\\` tap config.\n\n    Node-tap will *not* automatically uninstall plugin dependencies when\n    removed.`\n  )\n  .heading('tap plugin list', 4, { pre: true })\n  .description('List the plugins in use')\n\n  .heading('tap report', 3, { pre: true })\n  .description(\n    `Print a coverage report using the \\`coverage-report\\` config.\n\n    Coverage reporters can also be specified as positional arguments,\n    for example \\`tap report html\\`.\n    `\n  )\n\n  .heading('tap replay', 3, { pre: true })\n  .description(\n    `Replay the results of the last test run, optionally specifying\n    reporter, test files to filter, and so on.\n\n    This does *not* run the actual tests again, it just pipes their\n    TAP standard output through the reporter, but it can be useful to\n    view the results of the previous test run.`\n  )\n\n  .heading('tap repl', 3, { pre: true })\n  .description(\n    `Open a REPL for interacting with the test suite. This can be used to\n    watch files for changes, print coverage reports, or interact with the\n    saved process info of past runs.\n\n    Run \\`tap repl help\\` for a list of REPL commands, or run \\`help\\` in\n    the REPL itself.`\n  )\n\n  .heading('tap build', 3, { pre: true })\n  .description(\n    `Rebuild tap with the configured plugins. This is done automatically when\n    running tests if the set of plugins does not match what tap was previously\n    built with.`\n  )\n\n  .heading('tap version', 3, { pre: true })\n  .description(\n    `Print the version of tap in use\n\n    This is also run if the -v --version flag is set`\n  )\n  .heading('tap versions', 3, { pre: true })\n  .description(\n    `Print the versions of tap and its components and plugins.\n\n    This is also run if the -V --versions flag is set`\n  )\n\n  .heading('tap config [get | list | dump | set | edit]', 3, {\n    pre: true,\n  })\n  .description('Print or edit configuration in YAML format.')\n\n  .heading('tap config get <key> [<key> ...]', 4, { pre: true })\n  .description(\n    `Print the resolved values of the keys specified.\n\n    If any keys are undefined (because they have no default and are not\n    set), they are omitted.`\n  )\n\n  .heading('tap config list [<key> ...]', 4, { pre: true })\n  .description(\n    `Print the configuration from the config file, and from all environment\n    variables, command-line options, and defaults.\n\n    Items are sorted, and keys are highlighted.\n\n    If one or more key names are provided, then the results will be filtered\n    to only show those configuration keys.`\n  )\n\n  .heading('tap config dump', 4, { pre: true })\n  .description(\n    `Current effect configuration is dumped in YAML format, without\n    any highlighting or sorting.`\n  )\n\n  .heading('tap config set <key=val> [<key=val> ...]', 4, {\n    pre: true,\n  })\n  .description(\n    `Set the specified keys and values.\n\n    Boolean values must be set to literal 'true' or 'false'.\n\n    Array values can be set multiple times.\n\n    To delete a value, set it with \\`key=\\` (ie, provide an empty value).\n    This can be used for example to clear out an array field and then\n    fill it, rather than appending to it.`\n  )\n\n  .heading('tap config edit', 4, { pre: true })\n  .description(\n    `Open the tap configuration in YAML format in your editor. Upon\n    saving and quitting, if the configuration has changed, and is valid,\n    then it will be written to the relevant config file. That is, if your\n    tap configs are coming from a \"tap\" section in package.json, then\n    they'll be written there, in JSON format. If they're coming from a\n    .taprc file in the project root, then they'll be written there in\n    YAML format.\n\n    All comments and empty lines in the file will be removed.`\n  )\n\n  .heading('tap list', 3, { pre: true })\n  .description(\n    `Print the test files that will be run, according to the configuration\n    and positional arguments.`\n  )\n\n  .heading('tap debug', 3, { pre: true })\n  .description(\n    `Output various debugging information, useful when posting issues\n    on <https://github.com/tapjs/tapjs/issues>.`\n  )\n\n  .heading('tap help', 3, { pre: true })\n  .description(\n    `Print usage information\n\n    This is also run if the -h --help flag is set.`\n  )\n\n  .heading('Configuration')\n  .description(\n    `If a \\`TAP_RCFILE\\` value is set in the process environment, then that\n     will be the initial location that tap looks for configuration values.\n\n     If that's not set, then tap will look for configuration data first in a\n     .taprc file in the project root, and then in the \"tap\" object in the\n     project package.json file. ('Project root' means the nearest folder at or\n     above the current working directory containing package.json, .taprc, or\n     .git.)\n\n     The config object may set any of the following fields, as well as the\n     special \"extends\" field, which may specify either a package name or\n     file name, relative to the config file that references it.\n\n     If the \"extends\" field resolves to a file on disk, then that will be read\n     as the base configuration object. (It may also extend yet another config\n     file, and so on.)\n\n     If the \"extends\" field specifies a package name, then it must be\n     resolveable in the node_modules folder of the file extending it. That\n     package must contain either a .taprc file, or a package.json file\n     with a \"tap\" object.\n\n     To see the format used in a .taprc file, run the \\`tap dump-config\\`\n     command with the desired options specified on the command line.\n\n     Additionally, all config options that are modified from their defaults\n     will be set in the environment with the \\`TAP_\\` prefix, and will be read\n     from the environment if so specified. For example, specifying\n     \\`--omit-version\\` on the command line, or \\`omit-version: true\\` in a\n     .taprc file, will set \\`TAP_OMIT_VERSION=1\\` in the environment.\n\n     Environment and CLI options take priority over any config files.\n    `\n  )\n\n  .heading('Basic Options')\n  .optList({\n    plugin: {\n      hint: 'module',\n      description: `Configure the tap Test class with the specified plugin.\n\n                    Typically this is set in a .taprc file, not on the command\n                    line, and can be managed using the \\`tap plugin <add|rm>\\`\n                    command.\n\n                    If the set of plugins does not match that which tap was\n                    built with previously, then it will rebuild the Test class\n                    prior to running tests.\n\n                    To *exclude* a plugin which has been previously included\n                    (perhaps by being part of tap's default set), add it to\n                    this list prefixed by a \\`!\\` character.\n\n                    The default plugin set that ships with tap is:\n\n                    ${defaultPlugins\n                      .sort((a, b) => a.localeCompare(b, 'en'))\n                      .map(s => `- ${s}`)\n                      .join('\\n')}\n\n                    Even if excluded, the runner will use some of these plugins\n                    in its own operation.\n  `,\n      default: [] as string[],\n    },\n  })\n\n  .opt({\n    reporter: {\n      short: 'R',\n      hint: 'reporter',\n      description: `Use the specified reporter. Defaults to \\`base\\` when\n                    colors are in use, or \\`tap\\` when colors are disabled.\n\n                    In addition to the built-in reporters provided by\n                    the \\`@tapjs/reporter\\` module, the reporter option can\n                    also specify a command-line program or a module to load\n                    via \\`import()\\`.\n\n                    Command-line programs receive the raw TAP output on their\n                    stdin.\n\n                    Modules loaded via import() must default export a writable\n                    stream class, \\`React\\` function component, or a\n                    \\`React.Component\\` subclass.\n\n                    Writable streams are instantiated and piped into.\n\n                    React components are rendered using Ink, with \\`tap={tap}\\`\n                    and \\`config={loadedConfig}\\` as their properties.\n\n                    Built-in test reporters:\n\n                    ${testReporters.map(r => `- ${r}`).join('\\n')}`,\n    },\n\n    'reporter-file': {\n      short: 'f',\n      hint: 'file',\n      description: `Write the test report to the specified file, instead of\n                    stdout. Useful for reports such as junit, json, etc.\n\n                    To save the raw TAP data to a file, the\n                    \\`--output-file\\` or \\`--output-dir\\` options are usually\n                    more appropriate.\n\n                    If \\`TAP=1\\` is set in the environment, then raw TAP\n                    output is always written to stdout, because this is how\n                    test files communicate with the runner.`,\n    },\n  })\n\n  .optList({\n    'reporter-arg': {\n      hint: 'arg',\n      short: 'r',\n      description: `Args to pass to command-line reporters. Ignored when using\n                    built-in reporters or module reporters.`,\n    },\n  })\n\n  .optList({\n    'coverage-report': {\n      hint: 'type',\n      default: ['text'],\n      description: `Output coverage information using the specified\n                    istanbul coverage reporter type.\n\n                    Default is \\`text\\`.\n\n                    If \\`html\\` or \\`lcov\\` is used, then the HTML report will\n                    be opened in a web browser after running.\n\n                    This can be run on its own at any time after a test run\n                    that included coverage.\n\n                    Built-in coverage reporters:\n\n                    ${coverageReporters\n                      .map(r => `- ${r}`)\n                      .join('\\n')}`,\n    },\n  })\n\n  .flag({\n    'show-full-coverage': {\n      description: `Show the \\`100\\` lines in the default \\`text\\` coverage\n                    reporter for every file that has full coverage. Defaults to\n                    false for all commands other than \\`tap report\\`. Has no\n                    effect on any other coverage report styles.\n\n                    If not set, and the test suite has full coverage, then no\n                    text coverage report will be generated when running tests.\n                    It can be assumed in this case that no news is good news,\n                    and a zero-exit test process means full coverage was\n                    generated. When generating any other test report styles,\n                    files with full coverage are still reported.\n\n                    When running \\`tap report\\`, this defaults to true, because\n                    presumably you do want to see something if explicitly\n                    requesting a coverage report, even if it's just a list of\n                    green 100s.\n\n                    When running \\`tap report --no-show-full-coverage\\`, with\n                    this config explicitly set false, it will omit the default\n                    text report on full coverage, and behave like running \\`tap\n                    report none\\` (ie, print nothing).\n\n                    When running \\`tap report text --no-show-full-coverage\\`,\n                    explicitly requesting a text report and also explicitly\n                    requesting that full coverage text report *not* be shown,\n                    then a summary report will be printed instead of the full\n                    text report.`,\n    },\n  })\n\n  .opt({\n    'coverage-map': {\n      hint: 'module',\n      description: `Provide a path to a node module (esm or cjs) that default\n                    exports a single function. That function takes a test\n                    file as an argument, and returns an array of files to\n                    instrument with coverage when that file is run.\n\n                    This is useful in cases where a unit test should cover a\n                    single portion of the system under test, or where you wish\n                    to avoid tracking \"accidental coverage\" by integration\n                    tests.\n\n                    Return \\`null\\` to not cover any files by this test.\n\n                    Return an empty array [] to cover the set that would be\n                    pulled in by default. Ie, returning [] is equivalent to\n                    not using a coverage map at all.`,\n    },\n  })\n\n  .flag({\n    'allow-empty-coverage': {\n      description: `Suppress the error exit if the test run produces no\n                    coverage whatsoever.\n\n                    The \\`# No coverage generated\\` message will still be\n                    printed.\n\n                    If coverage is generated, but incomplete, then the process\n                    will exit in error, unless \\`allow-incomplete-coverage\\`\n                    is also set.\n\n                    WARNING: tests that do not produce coverage are\n                    untrustworthy. This should only be used when coverage is\n                    being generated and tracked by some other mechanism.`,\n    },\n    'allow-incomplete-coverage': {\n      description: `Suppress the error exit if the test run produces incomplete\n                    coverage information.\n\n                    The coverage report showing missing coverage will still be\n                    generated.\n\n                    If no coverage is generated, then the process will exit in\n                    error, unless \\`allow-empty-coverage\\` is also set.\n\n                    WARNING: tests that produce incomplete coverage are\n                    untrustworthy. This should only be used when coverage is\n                    being generated and tracked by some other mechanism.`,\n    },\n    'disable-coverage': {\n      description: `Do not generate code coverage information for the test run.\n\n                    This will always result in a \\`# No coverage generated\\`\n                    message being printed. If this flag is set, then\n                    \\`--allow-empty-coverage\\` will default to \\`true\\`,\n                    because we do not expect to get any coverage.\n\n                    WARNING: tests that do not produce coverage are\n                    untrustworthy. This should only be used when coverage is\n                    being generated and tracked by some other mechanism.`,\n    },\n  })\n\n  .flag({\n    bail: {\n      short: 'b',\n      description: 'Bail out on first failure',\n    },\n    'no-bail': {\n      short: 'B',\n      description: 'Do not bail out on first failure (default)',\n    },\n\n    comments: {\n      description: 'Print all tap comments to process.stderr',\n    },\n\n    passes: {\n      description: `Include passing tests in assertion summary reports.\n\n      Has no effect on TAP output if a reporter is not used, but will\n      cause passing assertions to be included in the \\`Test.lists\\` collection\n      by default.\n\n      Note: this usually makes test output QUITE noisy.`,\n    },\n\n    'fail-todo': {\n      description: `Treat \\`# TODO\\` tests as failures`,\n    },\n\n    'fail-skip': {\n      description: `Treat \\`# SKIP\\` assertions as failures`,\n    },\n\n    color: {\n      short: 'c',\n      description: 'Use colors (Default for TTY)',\n    },\n    'no-color': {\n      short: 'C',\n      description: 'Do not use colors (Default for non-TTY)',\n    },\n\n    changed: {\n      short: 'n',\n      description: `Only run tests for files that have changed since the last\n                    run.\n\n                    If no prior test run data exists, then all default files\n                    are run, as if --changed was not specified.`,\n    },\n  })\n\n  .opt({\n    save: {\n      short: 's',\n      hint: 'file',\n      description: `If <file> exists, then it should be a line- delimited list\n                    of test files to run. If <file> is not present, then all\n                    command-line positional arguments are run.\n\n                    After the set of test files are run, any failed test files\n                    are written back to the save file.\n\n                    This way, repeated runs with -s<file> will re-run failures\n                    until all the failures are passing, and then once again run\n                    all tests.\n\n                    Its a good idea to .gitignore the file used for this\n                    purpose, as it will churn a lot.`,\n    },\n  })\n\n  .flag({\n    diag: {\n      description: `Set to show diagnostics by default for both passing and\n                    failing tests. If not set, then diagnostics are printed by\n                    default for failing tests, and not for passing tests.`,\n    },\n    'no-diag': {\n      description: `Do not show diagnostics by default for passing or failing\n                    tests. If not set, then diagnostics are printed by default\n                    for failing tests, and not for passing tests.`,\n    },\n  })\n\n  .num({\n    timeout: {\n      hint: 'n',\n      short: 't',\n      default: 30,\n      description: `Time out test files after <n> seconds. Defaults to 30.\n                    Setting to 0 allows tests to run forever.\n\n                    When a test process calls t.setTimeout(n) on the top-level\n                    tap object, it also updates this value for that specific\n                    process.`,\n    },\n  })\n\n  .optList({\n    files: {\n      hint: 'filename',\n      description: `Alternative way to specify test set rather than using\n                    positional arguments. Supported as an option so that\n                    test file arguments can be specified in .taprc and\n                    package.json files.`,\n    },\n  })\n\n  .heading('Test Running Options')\n  .description(\n    `Tap runs multiple test files in parallel. This generally\n     results in a speedier test run, but can also cause problems if\n     your test files are not designed to be independent from one\n     another.\n\n     The \\`before\\` module, if specified, will always run before any tests,\n     and the \\`after\\` module will be loaded after the entire test run is\n     complete.\n    `\n  )\n\n  .num({\n    jobs: {\n      hint: 'n',\n      short: 'j',\n      default: jobs,\n      description: `Run up to \\`n\\` test files in parallel.\n\n                    By default, this will be set based on the number of CPUs\n                    on the system.\n\n                    Set --jobs=1 to disable parallelization entirely.`,\n    },\n  })\n\n  .opt({\n    before: {\n      hint: 'module',\n      description: `A node program to be run before test files are executed.\n\n                    Exiting with a non-zero status code or a signal will fail\n                    the test run and exit the process in error.\n\n                    Relative \\`before\\` paths are resolved against the project\n                    config root, even if specified on the cli.`,\n    },\n\n    after: {\n      hint: 'module',\n      description: `A node program to be executed after tests are finished.\n\n                    This will be run even if a test in the series fails with\n                    a bailout, but it will *not* be run if a --before script\n                    fails.\n\n                    Exiting with a non-zero status code or a signal will fail\n                    the test run and exit the process in error.\n\n                    Relative \\`after\\` paths are resolved against the project\n                    config root, even if specified on the cli.`,\n    },\n\n    'output-file': {\n      hint: 'filename',\n      short: 'o',\n      description: `Send the raw TAP output to the specified file. Reporter\n                    output will still be printed to stdout, but the file will\n                    contain the raw TAP for later replay or analysis.`,\n    },\n\n    'output-dir': {\n      hint: 'dir',\n      short: 'd',\n      description: `Send the raw TAP output to the specified directory. A\n                    separate .tap file will be created for each test file that\n                    is run. Reporter output will still be printed to stdout,\n                    but the files will contain the raw TAP for later replay or\n                    analysis.\n\n                    Files will be created to match the folder structure and\n                    filenames of test files run, but with \\`.tap\\` appended to\n                    the filenames.`,\n    },\n  })\n\n  .optList({\n    include: {\n      hint: 'pattern',\n      default: [\n        // any js/ts/jsx program in a test folder\n        '**/@(test?(s)|__test?(s)__)/**/*.__EXTENSIONS__',\n        // any js/ts/jsx file named .test.ext or .spec.ext\n        '**/*.@(test?(s)|spec).__EXTENSIONS__',\n        // any js/ts/jsx file named test.ext or tests.ext\n        '**/test?(s).__EXTENSIONS__',\n      ],\n      description: `A glob expression pattern indicating tests to run if no\n                    positional arguments are provided to the \\`tap run\\`\n                    command.\n\n                    The special token \\`__EXTENSIONS__\\` will expand to the\n                    list of known file type extensions that tap knows how to\n                    process. When the \\`@tapjs/typescript\\` plugin is loaded\n                    (default), this will be:\n\n                    - js\n                    - cjs\n                    - mjs\n                    - jsx\n                    - ts\n                    - cts\n                    - mts\n                    - tsx\n\n                    Without the typescript plugin, this will be just the file\n                    extensions known to Node:\n\n                    - js\n                    - cjs\n                    - mjs\n\n                    By default, tap will search for all files ending in these\n                    known file type extensions in the following ways:\n\n                    - a top-level folder named \\`test\\`, \\`tests\\`, or\n                      \\`__tests__\\`\n                    - any file ending in \\`.spec.\\` or \\`.test.\\` before a\n                      supported extension, or\n                    - a top-level file named \\`test.(js,jsx,...)\\` or\n                      \\`tests.(js,jsx,...)\\`\n\n                    No files excluded by the \\`exclude\\` option will be loaded,\n                    meaning that dependencies, build artifacts in \\`dist\\`,\n                    test fixtures, snapshots, and source control metadata will\n                    be ignored.\n\n                    The glob patterns are expanded without the \\`dot\\` option,\n                    so any file starting with a . will be ignored.`,\n    },\n\n    exclude: {\n      hint: 'pattern',\n      default: ['**/@(fixture*(s)|dist)/**'],\n      description: `A glob pattern indicating which filenames should NEVER\n                    be run as tests. This overrides the \\`include\\` option.\n\n                    Defaults to excluding any folders named dist, fixture, or\n                    fixtures.\n\n                    Note: folders named tap-snapshots, node_modules, or .git\n                    are ALWAYS excluded from the default test file set. If you\n                    wish to run tests in these folders, then name the test\n                    files on the command line as positional arguments.`,\n    },\n\n    serial: {\n      hint: 'dir',\n      description: `Mark all test files anywhere within the specified\n                    directory as serial tests, not to be run in parallel with\n                    any other test files.`,\n    },\n\n    'test-arg': {\n      hint: 'arg',\n      description: `Pass an argument to test files spawned by the tap command\n                    line executable. This can be specified multiple times to\n                    pass multiple args to test scripts.`,\n      default: [],\n    },\n\n    'test-env': {\n      hint: 'key=value',\n      description: `Pass a key=value (ie, --test-env=key=value) to set an\n                    environment variable in the process where tests are run.\n\n                    If a value is not provided, such as \\`--test-env=key\\`,\n                    then the key is ensured to not be set in the environment.\n                    To set a key to the empty string, use --test-env=key=`,\n      default: [],\n    },\n\n    'node-arg': {\n      hint: 'arg',\n      default: [],\n      description: `Pass an argument to Node binary in all child processes.\n                    Run \\`node --help\\` to see a list of all relevant arguments.\n                    This can be specified multiple times to pass multiple args\n                    to Node.`,\n    },\n  })\n\n  .heading('Other Options')\n  .flag({\n    debug: { description: 'Turn on debug mode (very noisy)' },\n\n    'omit-version': {\n      description: `Do not print the \\`TAP version 14\\` line. (This may be\n                    needed for compapatibility with some older TAP parsers.)`,\n    },\n\n    'omit-whitespace': {\n      description:\n        'Prune empty lines out of the output from child tests',\n    },\n    'no-omit-whitespace': {\n      description: `Preserve extra empty lines in the output.`,\n    },\n\n    versions: {\n      short: 'V',\n      description:\n        'Show the version of tap and relevant tap libraries in use.',\n    },\n\n    version: {\n      short: 'v',\n      description: 'Show the version of this program.',\n    },\n\n    help: {\n      short: 'h',\n      type: 'boolean',\n      description: 'show this help banner',\n    },\n  })\n"]}