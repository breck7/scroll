{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["// module code goes here\nimport {\n  argv,\n  cwd,\n  env,\n  mainScript,\n  TapPlugin,\n  TestBase,\n} from '@tapjs/core'\nimport { basename, dirname, relative, resolve } from 'node:path'\nimport { rimraf, rimrafSync } from 'rimraf'\nimport {\n  Fixture,\n  FixtureContent,\n  FixtureDirContent,\n  FixtureType,\n} from './fixture.js'\nexport * from './fixture.js'\n\nexport interface TestFixturesOptions {\n  /**\n   * Directory to store test fixtures.\n   * Defaults to `./.tap/fixtures/${test name}`\n   */\n  testdir?: string\n\n  /**\n   * Set to true to keep the fixture dir after the test ends.\n   * Otherwise, any `t.testdir()` directories are deleted when the\n   * test is done.\n   */\n  saveFixture?: boolean\n}\n\nexport class TestFixtures {\n  #t: TestBase\n  static #refs: Map<TestBase, TestFixtures> = new Map()\n  #testdir: string\n  #didOnEOF: boolean = false\n  #createdTestdir: boolean = false\n  #saveFixture: boolean = false\n\n  constructor(t: TestBase, opts: TestFixturesOptions) {\n    TestFixtures.#refs.set(t, this)\n    this.#testdir = opts.testdir || TestFixtures.#getTestdir(t)\n    if (opts.saveFixture !== undefined) {\n      this.#saveFixture = !!opts.saveFixture\n    } else {\n      this.#saveFixture = env.TAP_SAVE_FIXTURE === '1'\n    }\n    this.#t = t\n  }\n\n  /**\n   * Create a fixture object for use in a\n   * {@link @tapjs/fixture!index.TestFixtures#testdir} method.\n   *\n   * @group Spies, Mocks, and Fixtures\n   */\n  fixture<T extends FixtureType>(\n    type: T,\n    content: FixtureContent<T>\n  ) {\n    return new Fixture(type, content)\n  }\n\n  /**\n   * Set whether the fixture should be saved or not\n   *\n   * Must be set *BEFORE* calling\n   * {@link @tapjs/fixture!index.TestFixtures#testdir}, or it will not have any\n   * effect.\n   */\n  set saveFixture(save: boolean) {\n    this.#saveFixture = save\n  }\n  get saveFixture() {\n    return this.#saveFixture\n  }\n\n  /**\n   * Create a test directory, optionally filling it up with contents\n   *\n   * If the `@tapjs/after` plugin is loaded, the testdir will be automatically\n   * deleted at the end of the test.\n   *\n   * To _not_ delete the directory after the test, use the\n   * `saveFixture: true` option when creating the test, or specify\n   * `--save-fixture` on the command line or in the tap configuration.\n   *\n   * @group Spies, Mocks, and Fixtures\n   */\n  testdir(content?: FixtureDirContent) {\n    const dir = resolve(this.testdirName)\n    rimrafSync(dir)\n    Fixture.make(dir, content || {})\n    this.#createdTestdir = true\n    if (!this.#didOnEOF && !this.#saveFixture) {\n      this.#didOnEOF = true\n      const { onEOF } = this.#t\n      this.#t.onEOF = async () => {\n        this.#t.onEOF = onEOF\n        if (relative(process.cwd(), dir) === '') {\n          // cd out of it first, or else Windows fails with EBUSY every time\n          process.chdir(dirname(dir))\n        }\n        await rimraf(dir)\n        await onEOF()\n      }\n    }\n    return dir\n  }\n\n  /**\n   * The name of the folder that this test will use with\n   * {@link @tapjs/fixture!index.TestFixtures#testdir}.\n   *\n   * By default, it uses a folder name based on the name of the test file\n   * and subtest, within \\`.tap/fixtures\\` in the root of the project.\n   *\n   * @group Spies, Mocks, and Fixtures\n   */\n  get testdirName() {\n    return this.#testdir\n  }\n\n  set testdirName(td: string) {\n    if (this.#createdTestdir && td !== this.#testdir) {\n      this.#didOnEOF = false\n    }\n    this.#testdir = td\n  }\n\n  static #getTestdir(t: TestBase) {\n    const re = /[^a-zA-Z0-9\\._\\-]+/gi\n    const p = t.parent && TestFixtures.#refs.get(t.parent)\n    if (!p) {\n      const main = mainScript()\n      /* c8 ignore start */\n      const root = env.TAP_CWD || cwd\n      /* c8 ignore stop */\n      const name = [\n        dirname(relative(root, main)),\n        basename(main),\n        ...argv.slice(2),\n      ]\n        .join(' ')\n        .trim()\n        .replace(re, '-')\n      return resolve(root, '.tap/fixtures', name)\n    }\n\n    /* c8 ignore start */\n    const name = t.name || 'unnamed test'\n    /* c8 ignore stop */\n\n    return `${p.testdirName}-${name.replace(re, '-')}`\n  }\n}\n\nexport const plugin: TapPlugin<TestFixtures, TestFixturesOptions> = (\n  t: TestBase,\n  opts: TestFixturesOptions\n) => new TestFixtures(t, opts)\n\n/**\n * Options added by this plugin\n *\n * @group Configuration\n */\nexport const config = {\n  /**\n   * flag\n   *\n   * Do not clean up fixtures created with `t.testdir()`\n   *\n   * @group Configuration\n   */\n  'save-fixture': {\n    type: 'boolean',\n    short: 'F',\n    description:\n      'Do not clean up fixtures created with `t.testdir()`',\n  },\n}\n"]}