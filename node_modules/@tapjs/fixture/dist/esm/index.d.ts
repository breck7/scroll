import { TapPlugin, TestBase } from '@tapjs/core';
import { Fixture, FixtureContent, FixtureDirContent, FixtureType } from './fixture.js';
export * from './fixture.js';
export interface TestFixturesOptions {
    /**
     * Directory to store test fixtures.
     * Defaults to `./.tap/fixtures/${test name}`
     */
    testdir?: string;
    /**
     * Set to true to keep the fixture dir after the test ends.
     * Otherwise, any `t.testdir()` directories are deleted when the
     * test is done.
     */
    saveFixture?: boolean;
}
export declare class TestFixtures {
    #private;
    constructor(t: TestBase, opts: TestFixturesOptions);
    /**
     * Create a fixture object for use in a
     * {@link @tapjs/fixture!index.TestFixtures#testdir} method.
     *
     * @group Spies, Mocks, and Fixtures
     */
    fixture<T extends FixtureType>(type: T, content: FixtureContent<T>): Fixture<T>;
    /**
     * Set whether the fixture should be saved or not
     *
     * Must be set *BEFORE* calling
     * {@link @tapjs/fixture!index.TestFixtures#testdir}, or it will not have any
     * effect.
     */
    set saveFixture(save: boolean);
    get saveFixture(): boolean;
    /**
     * Create a test directory, optionally filling it up with contents
     *
     * If the `@tapjs/after` plugin is loaded, the testdir will be automatically
     * deleted at the end of the test.
     *
     * To _not_ delete the directory after the test, use the
     * `saveFixture: true` option when creating the test, or specify
     * `--save-fixture` on the command line or in the tap configuration.
     *
     * @group Spies, Mocks, and Fixtures
     */
    testdir(content?: FixtureDirContent): string;
    /**
     * The name of the folder that this test will use with
     * {@link @tapjs/fixture!index.TestFixtures#testdir}.
     *
     * By default, it uses a folder name based on the name of the test file
     * and subtest, within \`.tap/fixtures\` in the root of the project.
     *
     * @group Spies, Mocks, and Fixtures
     */
    get testdirName(): string;
    set testdirName(td: string);
}
export declare const plugin: TapPlugin<TestFixtures, TestFixturesOptions>;
/**
 * Options added by this plugin
 *
 * @group Configuration
 */
export declare const config: {
    /**
     * flag
     *
     * Do not clean up fixtures created with `t.testdir()`
     *
     * @group Configuration
     */
    'save-fixture': {
        type: string;
        short: string;
        description: string;
    };
};
//# sourceMappingURL=index.d.ts.map