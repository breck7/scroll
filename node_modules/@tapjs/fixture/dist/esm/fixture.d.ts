/// <reference types="node" resolution-mode="require"/>
export type FixtureType = 'file' | 'dir' | 'link' | 'symlink';
export interface FixtureDir {
    [entry: string]: FixtureDirContent;
}
export type FixtureDirContent = string | Buffer | Uint8Array | FixtureDir | Fixture<'file'> | Fixture<'dir'> | Fixture<'link'> | Fixture<'symlink'>;
export type FixtureContent<T> = T extends 'file' ? string | Buffer | Uint8Array : T extends 'link' | 'symlink' ? string : T extends 'dir' ? FixtureDir : never;
export declare class Fixture<T extends FixtureType> {
    type: T;
    content: FixtureContent<T>;
    constructor(type: T, content: FixtureContent<T>);
    get [Symbol.toStringTag](): string;
    static make(abs: string, content: FixtureDirContent, symlinks?: null | {
        [k: string]: string;
    }): void;
}
//# sourceMappingURL=fixture.d.ts.map