/// <reference types="node" />
import { BaseOpts, PromiseWithSubtest, Spawn, TapPlugin, TestBase } from '@tapjs/core';
import { StdioOptions } from 'child_process';
/**
 * Options for `t.spawn()`
 *
 * All of the normal Base and Extra options are also allowed.
 */
export interface SpawnOpts extends BaseOpts {
    /**
     * the current working directory of the subprocess
     */
    cwd?: string;
    /**
     * the command to run (set by first argument to t.spawn)
     *
     * @internal
     */
    command?: string;
    /**
     * arguments to subprocess (set by second argument to t.spawn)
     *
     * @internal
     */
    args?: string[];
    /**
     * ChildProcess `stdio` option.
     * Standard output is always set to `'pipe'`, because that's how it
     * communicates test results, and file descriptor 3 is set to an IPC
     * channel for sending timeout signals.
     */
    stdio?: StdioOptions;
    /**
     * Environment variables for the subprocess
     * Defaults to `process.env`
     */
    env?: {
        [k: string]: string;
    } | typeof process.env;
    /**
     * Set on exit. The exit code of the process, or null if terminated
     * with a signal.
     *
     * @internal
     */
    exitCode?: number | null;
    /**
     * Set on exit. Terminating signal, or null of not terminated with a
     * signal.
     *
     * @internal
     */
    signal?: string | null;
}
export type PromiseWithSpawn = PromiseWithSubtest<Spawn>;
export declare class SpawnPlugin {
    #private;
    constructor(t: TestBase);
    /**
     * Spawn a child process and parse its standard output as a subtest
     *
     * @group Subtest Methods
     */
    spawn(cmd: string): PromiseWithSpawn;
    spawn(cmd: string, options: SpawnOpts, name?: string): PromiseWithSpawn;
    spawn(cmd: string, args: string | string[], name?: string): PromiseWithSpawn;
    spawn(cmd: string, args: string | string[], options: SpawnOpts, name?: string): PromiseWithSpawn;
}
export declare const plugin: TapPlugin<SpawnPlugin>;
//# sourceMappingURL=index.d.ts.map