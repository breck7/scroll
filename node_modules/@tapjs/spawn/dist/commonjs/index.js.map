{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":";;;AAAA,sCAMoB;AAuDpB,MAAa,WAAW;IACtB,EAAE,CAAU;IACZ,YAAY,CAAW;QACrB,IAAI,CAAC,EAAE,GAAG,CAAC,CAAA;IACb,CAAC;IAuBD,KAAK,CACH,GAAW,EACX,IAAoC,EACpC,OAA4B,EAC5B,IAAa;QAEb,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;YAC5B,IAAI,GAAG,CAAC,IAAI,CAAC,CAAA;SACd;QACD,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;YAC/B,IAAI,GAAG,OAAO,CAAA;YACd,OAAO,GAAG,EAAE,CAAA;SACb;QACD,IAAI,OAAO,IAAI,KAAK,QAAQ,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YACpD,OAAO,GAAG,IAAI,CAAA;YACd,IAAI,GAAG,EAAE,CAAA;SACV;QACD,OAAO,GAAG,OAAO,IAAI,EAAE,CAAA;QACvB,IAAI,OAAO,CAAC,IAAI,KAAK,SAAS,IAAI,IAAI,KAAK,SAAS,EAAE;YACpD,OAAO,CAAC,IAAI,GAAG,IAAI,CAAA;SACpB;QACD,OAAO,CAAC,OAAO,GAAG,GAAG,CAAA;QACrB,OAAO,CAAC,IAAI,GAAG,IAAI,KAAK,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAA;QAC7C,OAAO,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,YAAK,EAAE,OAAO,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAA;IACrD,CAAC;CACF;AApDD,kCAoDC;AAEM,MAAM,MAAM,GAA2B,CAAC,CAAW,EAAE,EAAE,CAC5D,IAAI,WAAW,CAAC,CAAC,CAAC,CAAA;AADP,QAAA,MAAM,UACC","sourcesContent":["import {\n  BaseOpts,\n  PromiseWithSubtest,\n  Spawn,\n  TapPlugin,\n  TestBase,\n} from '@tapjs/core'\nimport { StdioOptions } from 'child_process'\n\n/**\n * Options for `t.spawn()`\n *\n * All of the normal Base and Extra options are also allowed.\n */\nexport interface SpawnOpts extends BaseOpts {\n  /**\n   * the current working directory of the subprocess\n   */\n  cwd?: string\n  /**\n   * the command to run (set by first argument to t.spawn)\n   *\n   * @internal\n   */\n  command?: string\n  /**\n   * arguments to subprocess (set by second argument to t.spawn)\n   *\n   * @internal\n   */\n  args?: string[]\n  /**\n   * ChildProcess `stdio` option.\n   * Standard output is always set to `'pipe'`, because that's how it\n   * communicates test results, and file descriptor 3 is set to an IPC\n   * channel for sending timeout signals.\n   */\n  stdio?: StdioOptions\n  /**\n   * Environment variables for the subprocess\n   * Defaults to `process.env`\n   */\n  env?: { [k: string]: string } | typeof process.env\n  /**\n   * Set on exit. The exit code of the process, or null if terminated\n   * with a signal.\n   *\n   * @internal\n   */\n  exitCode?: number | null\n  /**\n   * Set on exit. Terminating signal, or null of not terminated with a\n   * signal.\n   *\n   * @internal\n   */\n  signal?: string | null\n}\n\nexport type PromiseWithSpawn = PromiseWithSubtest<Spawn>\n\nexport class SpawnPlugin {\n  #t: TestBase\n  constructor(t: TestBase) {\n    this.#t = t\n  }\n  /**\n   * Spawn a child process and parse its standard output as a subtest\n   *\n   * @group Subtest Methods\n   */\n  spawn(cmd: string): PromiseWithSpawn\n  spawn(\n    cmd: string,\n    options: SpawnOpts,\n    name?: string\n  ): PromiseWithSpawn\n  spawn(\n    cmd: string,\n    args: string | string[],\n    name?: string\n  ): PromiseWithSpawn\n  spawn(\n    cmd: string,\n    args: string | string[],\n    options: SpawnOpts,\n    name?: string\n  ): PromiseWithSpawn\n  spawn(\n    cmd: string,\n    args?: string | string[] | SpawnOpts,\n    options?: SpawnOpts | string,\n    name?: string\n  ): PromiseWithSpawn {\n    if (typeof args === 'string') {\n      args = [args]\n    }\n    if (typeof options === 'string') {\n      name = options\n      options = {}\n    }\n    if (typeof args === 'object' && !Array.isArray(args)) {\n      options = args\n      args = []\n    }\n    options = options || {}\n    if (options.name === undefined && name !== undefined) {\n      options.name = name\n    }\n    options.command = cmd\n    options.args = args !== undefined ? args : []\n    return this.#t.sub(Spawn, options, this.#t.t.spawn)\n  }\n}\n\nexport const plugin: TapPlugin<SpawnPlugin> = (t: TestBase) =>\n  new SpawnPlugin(t)\n"]}