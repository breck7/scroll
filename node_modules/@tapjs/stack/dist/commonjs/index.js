"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.expandStack = exports.parseStack = exports.captureErrorString = exports.captureError = exports.captureString = exports.at = exports.capture = exports.getFilterIgnoredPackages = exports.setFilterIgnoredPackages = exports.getIgnoredPackagesRE = exports.getIgnoredPackages = exports.removeIgnoredPackage = exports.addIgnoredPackage = exports.setFilterNodeInternals = exports.getFilterNodeInternals = exports.getCwd = exports.setCwd = exports.CallSiteLike = void 0;
const node_module_1 = require("node:module");
const node_path_1 = require("node:path");
const call_site_like_js_1 = require("./call-site-like.js");
const require_resolve_js_1 = require("./require-resolve.js");
var call_site_like_js_2 = require("./call-site-like.js");
Object.defineProperty(exports, "CallSiteLike", { enumerable: true, get: function () { return call_site_like_js_2.CallSiteLike; } });
const regExpEscape = (s) => s.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&');
// platform portability accommodation
/* c8 ignore start */
let cwd = typeof process === 'object' &&
    process &&
    typeof process.cwd === 'function'
    ? process.cwd()
    : undefined;
/* c8 ignore stop */
/**
 * Set the effective cwd for shortening filenames in stack traces
 * Set to `undefined` to show full absolute paths.
 */
const setCwd = (c) => (cwd = c);
exports.setCwd = setCwd;
/**
 * Get the effective cwd for shortening filenames in stack traces
 * If set to `undefined`, then will show full absolute paths.
 */
const getCwd = () => cwd;
exports.getCwd = getCwd;
let filterNodeInternals = true;
/**
 * Get the current value indicating whether node internals should be
 * filtered out. (Defaults to true)
 */
const getFilterNodeInternals = () => filterNodeInternals;
exports.getFilterNodeInternals = getFilterNodeInternals;
/**
 * Set whether node internals should be filtered out.
 */
const setFilterNodeInternals = (s) => (filterNodeInternals = s);
exports.setFilterNodeInternals = setFilterNodeInternals;
// these are packages that function somewhat like node internals,
// for tap's purposes, and `@tapjs` packages themselves, when loaded
// from node_modules.
const ignoredPackages = [
    '@tapjs',
    '@isaacs/ts-node-temp-fork-for-pr-2009',
    'pirates',
    'function-loop',
    '@cspotcode/source-map-support',
    'signal-exit',
    'async-hook-domain',
];
let dirty = false;
/**
 * Add a package name to the list of deps that should be excluded
 * from stack traces.
 */
const addIgnoredPackage = (s) => {
    const i = ignoredPackages.indexOf(s);
    if (i === -1) {
        ignoredPackages.push(s);
        dirty = true;
    }
};
exports.addIgnoredPackage = addIgnoredPackage;
/**
 * Remove a package name from the list of deps that should be excluded
 * from stack traces.
 */
const removeIgnoredPackage = (s) => {
    const i = ignoredPackages.indexOf(s);
    if (i !== -1) {
        ignoredPackages.splice(i, 1);
        dirty = true;
    }
};
exports.removeIgnoredPackage = removeIgnoredPackage;
/**
 * Get a read-only copy of the list of deps that should be excluded
 * from stack traces.
 */
const getIgnoredPackages = () => Object.freeze(ignoredPackages.slice(0));
exports.getIgnoredPackages = getIgnoredPackages;
const getTestBuiltPath = () => {
    const p = (0, require_resolve_js_1.requireResolve)('@tapjs/test');
    // we'll always find the test class in this project
    /* c8 ignore start */
    if (!p)
        return '';
    /* c8 ignore stop */
    return (0, node_path_1.resolve)(p, '../../../test-built');
};
const buildIgnoredPackages = () => {
    // just a safety precaution, no reason to ever do this
    /* c8 ignore start */
    if (!ignoredPackages.length)
        return undefined;
    /* c8 ignore stop */
    const p = ignoredPackages.map(s => regExpEscape(s)).join('|');
    const nm = `[/\\\\]node_modules[/\\\\](?:${p})([/\\\\]|$)`;
    // if we are ignoring @tapjs/test, then also ignore its built
    // plugged-in implementation. This is only relevant when developing
    // this project, or other cases where @tapjs/test may be linked,
    // because when it's loaded from node_modules, it'll be excluded
    // by virtue of being in that folder anyhow.
    const built = ignoredPackages.includes('@tapjs') ||
        ignoredPackages.includes('@tapjs/test')
        ? getTestBuiltPath()
        : '';
    const re = built ? `${built}([/\\\\].*|$)|${nm}` : nm;
    return new RegExp(re);
};
/**
 * exported for testing, no real purpose, but also no harm in looking
 */
const getIgnoredPackagesRE = () => !dirty
    ? ignoredPackagesRE
    : (ignoredPackagesRE = buildIgnoredPackages());
exports.getIgnoredPackagesRE = getIgnoredPackagesRE;
let ignoredPackagesRE = buildIgnoredPackages();
let filterIgnoredPackages = true;
/**
 * Set whether or not the list of ignored packages should
 * be excluded from stack traces.
 */
const setFilterIgnoredPackages = (s) => (filterIgnoredPackages = s);
exports.setFilterIgnoredPackages = setFilterIgnoredPackages;
/**
 * Get whether or not the list of ignored packages should
 * be excluded from stack traces.
 */
const getFilterIgnoredPackages = () => filterIgnoredPackages;
exports.getFilterIgnoredPackages = getFilterIgnoredPackages;
// detect the first line of Error.stack, 'Error: blah'
const isErrorStackHead = (c) => !!c &&
    c.lineNumber === null &&
    c.columnNumber === null &&
    c.this === undefined &&
    c.evalOrigin === undefined &&
    c.function === undefined &&
    c.typeName === null &&
    c.methodName === null &&
    (typeof c.functionName === 'string' || !c.functionName) &&
    c.isEval === false &&
    c.isNative === false &&
    c.isToplevel === false &&
    c.isConstructor === false &&
    c.generated === undefined;
const filter = (c) => {
    const s = c.fileName;
    // technically this is possible, but super unlikely
    /* c8 ignore start */
    if (!s)
        return true;
    /* c8 ignore stop */
    if (dirty && filterIgnoredPackages) {
        ignoredPackagesRE = buildIgnoredPackages();
        dirty = false;
    }
    return ((!filterNodeInternals ||
        !(s.startsWith('node:') || node_module_1.builtinModules.includes(s))) &&
        (!filterIgnoredPackages || !ignoredPackagesRE?.test(s)));
};
const clean = (c) => {
    const filtered = c.filter(filter);
    while (isErrorStackHead(filtered[0]))
        filtered.shift();
    if (cwd !== undefined) {
        for (const c of filtered) {
            c.cwd = cwd;
        }
    }
    return filtered;
};
let capturing = false;
function capture(limit = 0, fn = capture) {
    // should be impossible to hit, but can if we have to look up
    // a sourcemap for a file we haven't seen before, and the filename
    // happens to come through as a url or relative path.
    /* c8 ignore start */
    if (capturing)
        return [];
    /* c8 ignore stop */
    capturing = true;
    if (typeof limit === 'function') {
        fn = limit;
        limit = 0;
    }
    const { prepareStackTrace, stackTraceLimit } = Error;
    Error.prepareStackTrace = call_site_like_js_1.CallSiteLike.prepareStackTrace;
    if (limit) {
        // we always get an extra few frames to account for internals
        // or proxy frames that might be filtered out of the top.
        Error.stackTraceLimit = limit + 10;
    }
    const obj = { stack: [] };
    Error.captureStackTrace(obj, fn);
    const { stack } = obj;
    Object.assign(Error, { prepareStackTrace, stackTraceLimit });
    const st = clean(stack);
    capturing = false;
    return limit === 0 ? st : st.slice(0, limit);
}
exports.capture = capture;
/**
 * Get the call site in the stack either where `at()` is called, or
 * where the supplied `fn` function is called.
 *
 * If `fn` is provided, and is not in the current call stack, then
 * `undefined` will be returned.
 */
const at = (fn = exports.at) => {
    const [site] = capture(1, fn);
    return site;
};
exports.at = at;
function captureString(limit = Infinity, fn = captureString) {
    if (typeof limit === 'function') {
        fn = limit;
        limit = 0;
    }
    const stack = capture(limit, fn);
    return (limit === 0 ? stack : stack.slice(0, limit))
        .map(c => String(c) + '\n')
        .join('');
}
exports.captureString = captureString;
/**
 * Get an array of {@link CallSiteLike} objects corresponding to the stack
 * trace of the Error object provided.
 *
 * This does _not_ actually look at the current call site, or do anything
 * magical with the V8 engine. It's just parsing a string.
 *
 * While some effort is made to interpret stacks correctly when an Error
 * contains a `name` and `message`, remember that the `Error.stack` property in
 * JavaScript is remarkably sloppy. In some cases, if the `Error.message`
 * contains `\n` and some lines after the first look like stack trace lines,
 * incorrect data may result. It's only as good as the stack you pass to it.
 */
const captureError = (e) => {
    // errors almost always have these fields
    const { message = '', name = '', code } = e;
    const stack = typeof e.stack === 'string' ? e.stack : '';
    const head = name && message ? `${name}: ${message}\n` : '';
    const errnoHead = name && message && code ? `${name} [${code}]: ${message}` : '';
    const cleanHead = !!head && stack.startsWith(head);
    const cleanErrnoHead = !!errnoHead && stack.startsWith(errnoHead);
    const s = cleanHead
        ? stack.substring(head.length)
        : cleanErrnoHead
            ? stack.substring(errnoHead.length)
            : stack;
    const cleaned = clean(s
        .trimEnd()
        .split('\n')
        .filter(l => !!l)
        .map(line => new call_site_like_js_1.CallSiteLike(e, line)));
    // if we didn't clean the header cleanly, then sweep the stack for
    // any weird junk it might contain
    return cleanHead
        ? cleaned
        : cleaned.filter(c => !isErrorStackHead(c));
};
exports.captureError = captureError;
/**
 * Get a processed string stack corresponding to the stack trace of the Error
 * object provided.
 *
 * This method has all the same caveats as {@link captureError}. If the
 * object provided has a weird looking `stack` property, then you might get
 * weird results.
 */
const captureErrorString = (e) => (0, exports.captureError)(e)
    .map(c => String(c) + '\n')
    .join('');
exports.captureErrorString = captureErrorString;
/**
 * Parse a stack string and return an array of CallSiteLike objects
 *
 * We use this to get the `at` diagnostic callsite when all we have is
 * a stack, either from a native Error object, or a stringified CallSiteLike
 * stack.
 */
const parseStack = (s) => clean(s
    .trimEnd()
    .split('\n')
    .filter(l => !!l.trim())
    .map(line => new call_site_like_js_1.CallSiteLike(null, line)));
exports.parseStack = parseStack;
const expandStack = (s) => {
    if (!s)
        return '';
    if (typeof s === 'string')
        return (0, exports.expandStack)((0, exports.parseStack)(s));
    return clean(s)
        .map(c => c.toString(true) + '\n')
        .join('');
};
exports.expandStack = expandStack;
//# sourceMappingURL=index.js.map