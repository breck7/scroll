/// <reference types="node" />
import { Compiled } from './parse.js';
export interface CallSiteLikeJSON {
    fileName?: string;
    lineNumber?: number;
    columnNumber?: number;
    evalOrigin?: CallSiteLikeJSON;
    typeName?: string;
    methodName?: string;
    functionName?: string;
    isEval?: true;
    isNative?: true;
    isToplevel?: true;
    isConstructor?: true;
    generated?: {
        fileName?: string;
        lineNumber?: number;
        columnNumber?: number;
    };
}
export interface GeneratedResult {
    fileName?: string | null;
    lineNumber?: number | null;
    columnNumber?: number | null;
}
export declare class CallSiteLike {
    #private;
    static prepareStackTrace(e: Error, c: NodeJS.CallSite[]): CallSiteLike[];
    lineNumber: ReturnType<NodeJS.CallSite['getLineNumber']>;
    columnNumber: ReturnType<NodeJS.CallSite['getColumnNumber']>;
    this: ReturnType<NodeJS.CallSite['getThis']>;
    evalOrigin?: CallSiteLike;
    function: ReturnType<NodeJS.CallSite['getFunction']>;
    typeName: ReturnType<NodeJS.CallSite['getTypeName']>;
    methodName: ReturnType<NodeJS.CallSite['getMethodName']>;
    functionName: ReturnType<NodeJS.CallSite['getFunctionName']>;
    isEval: ReturnType<NodeJS.CallSite['isEval']>;
    isNative: ReturnType<NodeJS.CallSite['isNative']>;
    isToplevel: ReturnType<NodeJS.CallSite['isToplevel']>;
    isConstructor: ReturnType<NodeJS.CallSite['isConstructor']>;
    generated?: GeneratedResult;
    get fileName(): string | null | undefined;
    get absoluteFileName(): string | null | undefined;
    get cwd(): string | undefined;
    set cwd(cwd: string | undefined);
    constructor(e: Error | null, c: NodeJS.CallSite | string | Compiled);
    toString(jsStyle?: boolean): string;
    toJSON(): CallSiteLikeJSON;
}
//# sourceMappingURL=call-site-like.d.ts.map