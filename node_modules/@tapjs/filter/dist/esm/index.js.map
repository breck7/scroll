{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  BaseOpts,\n  env,\n  Extra,\n  parseTestArgs,\n  PromiseWithSubtest,\n  TapPlugin,\n  TestArgs,\n  TestBase,\n  TestBaseOpts,\n} from '@tapjs/core'\nimport type { Test, TestOpts } from '@tapjs/test'\n\nconst reRegExpLiteral = /^\\/(.*)\\/([a-z]*)$/\n\n/**\n * Options added by this plugin\n *\n * @group Test Options\n */\nexport interface FilterOptions extends TestBaseOpts {\n  /**\n   * Set to true to run in contexts where `runOnly` is set\n   */\n  only?: boolean\n\n  /**\n   * Only run subtests marked with { only: true }\n   */\n  runOnly?: boolean\n\n  /**\n   * only run subtests whose name matches the supplied pattern.\n   * Provide an array of strings/regexps to match down the test\n   * heirarchy.\n   */\n  grep?: string | RegExp | (string | RegExp)[]\n\n  /**\n   * only run tests that DON'T match the pattern provided in `grep`\n   */\n  grepInvert?: boolean\n}\n\n/**\n * Class that provides the {@link @tapjs/filter!Filter#only} method, and\n * extends the {@link @tapjs/core!test-base.TestBase#shouldSkipChild} method to\n * respect the grep option\n */\nexport class Filter {\n  #t: TestBase\n  #grep: (string | RegExp)[] = []\n  #grepInvert: boolean\n  #runOnly: boolean\n  #filterQuietly: boolean\n\n  get runOnly() {\n    return this.#runOnly\n  }\n  set runOnly(o: boolean) {\n    this.#runOnly = o\n  }\n\n  constructor(t: TestBase, opts: FilterOptions) {\n    this.#t = t\n    const eq = env?.TAP_FILTER_QUIETLY\n    this.#filterQuietly =\n      eq === '1' || (!!t.options.failSkip && eq !== '0')\n\n    // don't filter test files when we're the cli test runner\n    const { grep, grepInvert, runOnly } =\n      opts.context === Symbol.for('tap.isRunner')\n        ? ({\n            grep: [],\n            grepInvert: false,\n            runOnly: false,\n          } as FilterOptions)\n        : opts\n\n    if (grep !== undefined) {\n      this.#grep = !Array.isArray(grep) ? [grep] : grep\n    } else if (env.TAP_GREP !== undefined) {\n      this.#grep = env.TAP_GREP.split('\\n').map(g => {\n        const p = g.match(reRegExpLiteral)\n        g = p && p[1] ? p[1] : g\n        const flags = p ? p[2] : ''\n        return new RegExp(g, flags)\n      })\n    }\n    if (grepInvert !== undefined) {\n      this.#grepInvert = !!grepInvert\n    } else {\n      this.#grepInvert = env.TAP_INVERT === '1'\n    }\n    if (runOnly !== undefined) {\n      this.#runOnly = !!runOnly\n    } else {\n      this.#runOnly = env.TAP_ONLY === '1'\n    }\n    if (this.#grep?.length) t.options.grep = this.#grep\n\n    const { shouldSkipChild } = t\n    t.shouldSkipChild = extra =>\n      this.#shouldSkipChild(extra, shouldSkipChild)\n  }\n\n  #shouldSkipChild(\n    extra: TestBaseOpts | BaseOpts | TestOpts,\n    shouldSkipChild: (\n      extra: TestBaseOpts | BaseOpts | TestOpts\n    ) => boolean\n  ) {\n    const opts = extra as FilterOptions & Extra & TestBaseOpts\n    const [pattern, ...rest] = this.#grep\n    if (pattern !== undefined) {\n      /* c8 ignore start */\n      const name = opts.name || ''\n      /* c8 ignore stop */\n      const m =\n        typeof pattern === 'string'\n          ? name.includes(pattern)\n          : pattern.test(name)\n      const match = this.#grepInvert ? !m : m\n      if (!match) {\n        if (!this.#filterQuietly) {\n          opts.skip = `filter${\n            this.#grepInvert ? ' out' : ''\n          }: ${pattern}`\n        }\n        shouldSkipChild(opts)\n        return true\n      } else {\n        opts.grep = rest\n      }\n    } else if (this.#grep) {\n      // just set to an empty array so it doesn't try to load from the\n      // env once we've exhausted the pattern parts.\n      opts.grep = []\n    }\n    if (this.#runOnly && !opts.only) {\n      if (!this.#filterQuietly) {\n        opts.skip = 'filter: only'\n      }\n      shouldSkipChild(opts)\n      return true\n    }\n    if (opts.only && !this.#runOnly) {\n      this.#t.comment(\n        '%j has `only` set but all tests run',\n        extra.name\n      )\n    }\n    if (typeof opts.runOnly === 'undefined') {\n      opts.runOnly = this.#runOnly\n    }\n    return shouldSkipChild(opts)\n  }\n\n  /**\n   * Run a child test that will run when the `--only` config is set,\n   * or `{ runOnly: true }` is set in the parent test options.\n   *\n   * @group Subtest Methods\n   */\n  only(\n    name: string,\n    extra: TestOpts,\n    cb: (t: Test) => any\n  ): PromiseWithSubtest<Test>\n  only(name: string, cb: (t: Test) => any): PromiseWithSubtest<Test>\n  only(\n    extra: TestOpts,\n    cb: (t: Test) => any\n  ): PromiseWithSubtest<Test>\n  only(cb: (t: Test) => any): PromiseWithSubtest<Test>\n  only(...args: TestArgs<Test>): PromiseWithSubtest<Test> {\n    const extra = parseTestArgs(...args)\n    /* c8 ignore start */\n    const name = extra.name || ''\n    /* c8 ignore stop */\n    return this.#t.t.test(name, { ...extra, only: true }, extra.cb)\n  }\n}\n\n/**\n * plugin method that instantiates a {@link @tapjs/filter!Filter} object\n */\nexport const plugin: TapPlugin<Filter, FilterOptions> = (t, opts) =>\n  new Filter(t, opts)\n\n/**\n * Configuration options added by this plugin\n *\n * @group Configuration\n */\nexport const config = {\n  /**\n   * flag\n   *\n   * Only run tests with `{only: true}` option, or created with the\n   * `t.only(...)` function.\n   *\n   * @group Configuration\n   */\n  only: {\n    type: 'boolean',\n    short: 'O',\n    description: `Only run tests with \\`{only: true}\\` option, or created with\n                  the \\`t.only(...)\\` function.`,\n    nodeArgs: (v: boolean) => (v ? ['--test-only'] : []),\n  },\n\n  /**\n   * string option\n   *\n   * Only run subtests tests matching the specified pattern.\n   *\n   * Patterns are matched against top-level subtests in each\n   * file.  To filter tests at subsequent levels, specify this\n   * option multiple times.\n   *\n   * To specify regular expression flags, format pattern like a\n   * JavaScript RegExp literal.  For example: `/xyz/i` for\n   * case-insensitive matching.\n   *\n   * @group Configuration\n   */\n  grep: {\n    type: 'string',\n    multiple: true,\n    hint: 'pattern',\n    short: 'g',\n    description: `Only run subtests tests matching the specified pattern.\n\n                  Patterns are matched against top-level subtests in each\n                  file.  To filter tests at subsequent levels, specify this\n                  option multiple times.\n\n                  To specify regular expression flags, format pattern like a\n                  JavaScript RegExp literal.  For example: \\`/xyz/i\\` for\n                  case-insensitive matching.`,\n    nodeArgs: (value: string[]) =>\n      value.map(g => `--test-name-pattern=${g}`),\n  },\n\n  /**\n   * flag\n   *\n   * Invert the matches to --grep patterns. (Like grep -v)\n   *\n   * @group Configuration\n   */\n  invert: {\n    type: 'boolean',\n    short: 'i',\n    description:\n      'Invert the matches to --grep patterns. (Like grep -v)',\n  },\n\n  /**\n   * flag\n   *\n   * Do not invert the matches to --grep patterns. (default)\n   *\n   * @group Configuration\n   */\n  'no-invert': {\n    type: 'boolean',\n    short: 'I',\n    description:\n      'Do not invert the matches to --grep patterns. (default)',\n  },\n\n  /**\n   * flag\n   *\n   * Do not apply a skip message to tests filtered using `--grep`\n   * and `--only`.\n   *\n   * Enabled by default if `--fail-skip` is set.\n   */\n  'filter-quietly': {\n    type: 'boolean',\n    description: `\n       Do not apply a skip message to tests filtered using \\`--grep\\`\n       and \\`--only\\`.\n\n       Defaults to true if \\`--fail-skip\\` is set.\n   `,\n  },\n  'no-filter-quietly': {\n    type: 'boolean',\n    description: `\n       Always set a skip message on filtered tests, even if \\`--fail-skip\\`\n       is enabled.\n   `,\n  },\n}\n"]}