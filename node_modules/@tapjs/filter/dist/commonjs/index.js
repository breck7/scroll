"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.config = exports.plugin = exports.Filter = void 0;
const core_1 = require("@tapjs/core");
const reRegExpLiteral = /^\/(.*)\/([a-z]*)$/;
/**
 * Class that provides the {@link @tapjs/filter!Filter#only} method, and
 * extends the {@link @tapjs/core!test-base.TestBase#shouldSkipChild} method to
 * respect the grep option
 */
class Filter {
    #t;
    #grep = [];
    #grepInvert;
    #runOnly;
    #filterQuietly;
    get runOnly() {
        return this.#runOnly;
    }
    set runOnly(o) {
        this.#runOnly = o;
    }
    constructor(t, opts) {
        this.#t = t;
        const eq = core_1.env?.TAP_FILTER_QUIETLY;
        this.#filterQuietly =
            eq === '1' || (!!t.options.failSkip && eq !== '0');
        // don't filter test files when we're the cli test runner
        const { grep, grepInvert, runOnly } = opts.context === Symbol.for('tap.isRunner')
            ? {
                grep: [],
                grepInvert: false,
                runOnly: false,
            }
            : opts;
        if (grep !== undefined) {
            this.#grep = !Array.isArray(grep) ? [grep] : grep;
        }
        else if (core_1.env.TAP_GREP !== undefined) {
            this.#grep = core_1.env.TAP_GREP.split('\n').map(g => {
                const p = g.match(reRegExpLiteral);
                g = p && p[1] ? p[1] : g;
                const flags = p ? p[2] : '';
                return new RegExp(g, flags);
            });
        }
        if (grepInvert !== undefined) {
            this.#grepInvert = !!grepInvert;
        }
        else {
            this.#grepInvert = core_1.env.TAP_INVERT === '1';
        }
        if (runOnly !== undefined) {
            this.#runOnly = !!runOnly;
        }
        else {
            this.#runOnly = core_1.env.TAP_ONLY === '1';
        }
        if (this.#grep?.length)
            t.options.grep = this.#grep;
        const { shouldSkipChild } = t;
        t.shouldSkipChild = extra => this.#shouldSkipChild(extra, shouldSkipChild);
    }
    #shouldSkipChild(extra, shouldSkipChild) {
        const opts = extra;
        const [pattern, ...rest] = this.#grep;
        if (pattern !== undefined) {
            /* c8 ignore start */
            const name = opts.name || '';
            /* c8 ignore stop */
            const m = typeof pattern === 'string'
                ? name.includes(pattern)
                : pattern.test(name);
            const match = this.#grepInvert ? !m : m;
            if (!match) {
                if (!this.#filterQuietly) {
                    opts.skip = `filter${this.#grepInvert ? ' out' : ''}: ${pattern}`;
                }
                shouldSkipChild(opts);
                return true;
            }
            else {
                opts.grep = rest;
            }
        }
        else if (this.#grep) {
            // just set to an empty array so it doesn't try to load from the
            // env once we've exhausted the pattern parts.
            opts.grep = [];
        }
        if (this.#runOnly && !opts.only) {
            if (!this.#filterQuietly) {
                opts.skip = 'filter: only';
            }
            shouldSkipChild(opts);
            return true;
        }
        if (opts.only && !this.#runOnly) {
            this.#t.comment('%j has `only` set but all tests run', extra.name);
        }
        if (typeof opts.runOnly === 'undefined') {
            opts.runOnly = this.#runOnly;
        }
        return shouldSkipChild(opts);
    }
    only(...args) {
        const extra = (0, core_1.parseTestArgs)(...args);
        /* c8 ignore start */
        const name = extra.name || '';
        /* c8 ignore stop */
        return this.#t.t.test(name, { ...extra, only: true }, extra.cb);
    }
}
exports.Filter = Filter;
/**
 * plugin method that instantiates a {@link @tapjs/filter!Filter} object
 */
const plugin = (t, opts) => new Filter(t, opts);
exports.plugin = plugin;
/**
 * Configuration options added by this plugin
 *
 * @group Configuration
 */
exports.config = {
    /**
     * flag
     *
     * Only run tests with `{only: true}` option, or created with the
     * `t.only(...)` function.
     *
     * @group Configuration
     */
    only: {
        type: 'boolean',
        short: 'O',
        description: `Only run tests with \`{only: true}\` option, or created with
                  the \`t.only(...)\` function.`,
        nodeArgs: (v) => (v ? ['--test-only'] : []),
    },
    /**
     * string option
     *
     * Only run subtests tests matching the specified pattern.
     *
     * Patterns are matched against top-level subtests in each
     * file.  To filter tests at subsequent levels, specify this
     * option multiple times.
     *
     * To specify regular expression flags, format pattern like a
     * JavaScript RegExp literal.  For example: `/xyz/i` for
     * case-insensitive matching.
     *
     * @group Configuration
     */
    grep: {
        type: 'string',
        multiple: true,
        hint: 'pattern',
        short: 'g',
        description: `Only run subtests tests matching the specified pattern.

                  Patterns are matched against top-level subtests in each
                  file.  To filter tests at subsequent levels, specify this
                  option multiple times.

                  To specify regular expression flags, format pattern like a
                  JavaScript RegExp literal.  For example: \`/xyz/i\` for
                  case-insensitive matching.`,
        nodeArgs: (value) => value.map(g => `--test-name-pattern=${g}`),
    },
    /**
     * flag
     *
     * Invert the matches to --grep patterns. (Like grep -v)
     *
     * @group Configuration
     */
    invert: {
        type: 'boolean',
        short: 'i',
        description: 'Invert the matches to --grep patterns. (Like grep -v)',
    },
    /**
     * flag
     *
     * Do not invert the matches to --grep patterns. (default)
     *
     * @group Configuration
     */
    'no-invert': {
        type: 'boolean',
        short: 'I',
        description: 'Do not invert the matches to --grep patterns. (default)',
    },
    /**
     * flag
     *
     * Do not apply a skip message to tests filtered using `--grep`
     * and `--only`.
     *
     * Enabled by default if `--fail-skip` is set.
     */
    'filter-quietly': {
        type: 'boolean',
        description: `
       Do not apply a skip message to tests filtered using \`--grep\`
       and \`--only\`.

       Defaults to true if \`--fail-skip\` is set.
   `,
    },
    'no-filter-quietly': {
        type: 'boolean',
        description: `
       Always set a skip message on filtered tests, even if \`--fail-skip\`
       is enabled.
   `,
    },
};
//# sourceMappingURL=index.js.map