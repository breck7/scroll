import { PromiseWithSubtest, TapPlugin, TestBase, TestBaseOpts } from '@tapjs/core';
import type { Test, TestOpts } from '@tapjs/test';
/**
 * Options added by this plugin
 *
 * @group Test Options
 */
export interface FilterOptions extends TestBaseOpts {
    /**
     * Set to true to run in contexts where `runOnly` is set
     */
    only?: boolean;
    /**
     * Only run subtests marked with { only: true }
     */
    runOnly?: boolean;
    /**
     * only run subtests whose name matches the supplied pattern.
     * Provide an array of strings/regexps to match down the test
     * heirarchy.
     */
    grep?: string | RegExp | (string | RegExp)[];
    /**
     * only run tests that DON'T match the pattern provided in `grep`
     */
    grepInvert?: boolean;
}
/**
 * Class that provides the {@link @tapjs/filter!Filter#only} method, and
 * extends the {@link @tapjs/core!test-base.TestBase#shouldSkipChild} method to
 * respect the grep option
 */
export declare class Filter {
    #private;
    get runOnly(): boolean;
    set runOnly(o: boolean);
    constructor(t: TestBase, opts: FilterOptions);
    /**
     * Run a child test that will run when the `--only` config is set,
     * or `{ runOnly: true }` is set in the parent test options.
     *
     * @group Subtest Methods
     */
    only(name: string, extra: TestOpts, cb: (t: Test) => any): PromiseWithSubtest<Test>;
    only(name: string, cb: (t: Test) => any): PromiseWithSubtest<Test>;
    only(extra: TestOpts, cb: (t: Test) => any): PromiseWithSubtest<Test>;
    only(cb: (t: Test) => any): PromiseWithSubtest<Test>;
}
/**
 * plugin method that instantiates a {@link @tapjs/filter!Filter} object
 */
export declare const plugin: TapPlugin<Filter, FilterOptions>;
/**
 * Configuration options added by this plugin
 *
 * @group Configuration
 */
export declare const config: {
    /**
     * flag
     *
     * Only run tests with `{only: true}` option, or created with the
     * `t.only(...)` function.
     *
     * @group Configuration
     */
    only: {
        type: string;
        short: string;
        description: string;
        nodeArgs: (v: boolean) => string[];
    };
    /**
     * string option
     *
     * Only run subtests tests matching the specified pattern.
     *
     * Patterns are matched against top-level subtests in each
     * file.  To filter tests at subsequent levels, specify this
     * option multiple times.
     *
     * To specify regular expression flags, format pattern like a
     * JavaScript RegExp literal.  For example: `/xyz/i` for
     * case-insensitive matching.
     *
     * @group Configuration
     */
    grep: {
        type: string;
        multiple: boolean;
        hint: string;
        short: string;
        description: string;
        nodeArgs: (value: string[]) => string[];
    };
    /**
     * flag
     *
     * Invert the matches to --grep patterns. (Like grep -v)
     *
     * @group Configuration
     */
    invert: {
        type: string;
        short: string;
        description: string;
    };
    /**
     * flag
     *
     * Do not invert the matches to --grep patterns. (default)
     *
     * @group Configuration
     */
    'no-invert': {
        type: string;
        short: string;
        description: string;
    };
    /**
     * flag
     *
     * Do not apply a skip message to tests filtered using `--grep`
     * and `--only`.
     *
     * Enabled by default if `--fail-skip` is set.
     */
    'filter-quietly': {
        type: string;
        description: string;
    };
    'no-filter-quietly': {
        type: string;
        description: string;
    };
};
//# sourceMappingURL=index.d.ts.map