{"version":3,"file":"clean-cwd.js","sourceRoot":"","sources":["../../src/clean-cwd.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,GAAG,EAAE,MAAM,aAAa,CAAA;AACjC,OAAO,EAAE,aAAa,EAAE,MAAM,UAAU,CAAA;AAExC,6CAA6C;AAC7C,yBAAyB;AACzB,MAAM,GAAG,GAAG,CAAC,CAAS,EAAE,EAAE;IACxB,MAAM,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAA;IAC3B,OAAO,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAA;AACrC,CAAC,CAAA;AACD,MAAM,MAAM,GAAG,MAAM,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC,SAAS,CAAC,SAAS,CAAC,MAAM,CAAC,CAAA;AACrE,MAAM,QAAQ,GAAG,GAAG,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAA;AACxC,MAAM,QAAQ,GAAG,GAAG,CAAC,WAAW,EAAE,CAAA;AAClC,MAAM,aAAa,GAAG,QAAQ,CAAC,WAAW,EAAE,CAAA;AAC5C,MAAM,IAAI,GAAG,IAAI,GAAG,CAAC,CAAC,MAAM,EAAE,GAAG,EAAE,QAAQ,EAAE,QAAQ,EAAE,aAAa,CAAC,CAAC,CAAA;AACtE,KAAK,MAAM,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,EAAE;IACzB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;IAChB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;IACrB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;IAC1B,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;CAChC;AAED,MAAM,SAAS,GAAG,wBAAwB,CAAA;AAC1C,MAAM,WAAW,GAAG,CAAC,CAAS,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,EAAE,MAAM,CAAC,CAAA;AAE/D,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAC,IAAY,EAAE,EAAE;IACvC,MAAM,GAAG,GAAG,OAAO,CAAA;IACnB,KAAK,MAAM,CAAC,IAAI,IAAI,EAAE;QACpB,MAAM,CAAC,GAAG,IAAI,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAA;QAC1C,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,EAAE,GAAG,CAAC,CAAA;KAC5B;IACD,OAAO,IAAI,CAAA;AACb,CAAC,CAAA","sourcesContent":["import { cwd } from '@tapjs/core'\nimport { pathToFileURL } from 'node:url'\n\n// escape a string to json, then unwrap the \"\n// used for cwd detection\nconst esc = (s: string) => {\n  const j = JSON.stringify(s)\n  return j.substring(1, j.length - 1)\n}\nconst cwdURL = String(pathToFileURL(cwd)).substring('file://'.length)\nconst cwdPosix = cwd.replace(/\\\\/g, '/')\nconst cwdLcase = cwd.toLowerCase()\nconst cwdPosixLcase = cwdPosix.toLowerCase()\nconst cwds = new Set([cwdURL, cwd, cwdPosix, cwdLcase, cwdPosixLcase])\nfor (const c of [...cwds]) {\n  cwds.add(esc(c))\n  cwds.add(esc(esc(c)))\n  cwds.add(esc(esc(esc(c))))\n  cwds.add(esc(esc(esc(esc(c)))))\n}\n\nconst reSpecial = /[/\\-\\\\^$*+?.()|[\\]{}]/g\nconst escapeRegex = (s: string) => s.replace(reSpecial, '\\\\$&')\n\nexport const cleanCWD = (snap: string) => {\n  const tag = '{CWD}'\n  for (const c of cwds) {\n    const r = new RegExp(escapeRegex(c), 'gi')\n    snap = snap.replace(r, tag)\n  }\n  return snap\n}\n"]}