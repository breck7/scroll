import { mkdirSync, statSync, unlinkSync, writeFileSync } from 'fs';
import { dirname } from 'path';
import { req } from './require.js';
const envMsg = `
Run with TAP_SNAPSHOT=1 in the environment to create snapshots`;
const snapshotHeading = `/* IMPORTANT
 * This snapshot file is auto-generated, but designed for humans.
 * It should be checked into source control and tracked carefully.
 * Re-generate by setting TAP_SNAPSHOT=1 and running tests.
 * Make sure to inspect the output below.  Do not ignore changes!
 */
'use strict'`;
const snapshotExport = (k, v) => `exports[\`${escape(k)}\`] = \`\n${escape(v)}\n\`\n`;
const snapshotData = (data) => `${snapshotHeading}
${Object.entries(data)
    .sort(([a], [b]) => a.localeCompare(b, 'en'))
    .map(([k, v]) => snapshotExport(k, v))
    .join('\n')}`;
const escape = (s) => s
    .replace(/\\/g, '\\\\')
    .replace(/\`/g, '\\`')
    .replace(/\$\{/g, '\\${');
/**
 * This is the default snapshot provider that ships with the plugin.
 * It can be overridden by providing a `snapshotProvider` option to
 * the test options.
 */
export class SnapshotProviderDefault {
    #indexes = new Map();
    #snapshot;
    file;
    constructor(file) {
        this.file = file;
    }
    read(msg) {
        if (!this.#snapshot) {
            this.#load();
        }
        // bump the index if this one gets used again
        const index = this.#indexes.get(msg) || 1;
        const entry = msg + ' ' + index;
        const s = this.#snapshot?.[entry];
        if (s === undefined) {
            throw new Error(`Snapshot entry not found: "${msg}"${envMsg}`);
        }
        this.#indexes.set(msg, index + 1);
        return s.replace(/^\n|\n$/g, '');
    }
    snap(data, msg) {
        const index = this.#indexes.get(msg) || 1;
        this.#indexes.set(msg, index + 1);
        this.#snapshot = this.#snapshot || {};
        this.#snapshot[msg + ' ' + index] = data;
    }
    save() {
        if (!this.#snapshot) {
            try {
                unlinkSync(this.file);
            }
            catch (err) {
                const er = err;
                if (er.code !== 'ENOENT')
                    throw er;
            }
            return;
        }
        mkdirSync(dirname(this.file), { recursive: true });
        writeFileSync(this.file, snapshotData(this.#snapshot));
    }
    #load() {
        try {
            if (!statSync(this.file).isFile()) {
                throw 'not a file';
            }
            this.#snapshot = req(this.file);
        }
        catch (er) {
            throw new Error(`Snapshot file not found: ${this.file}${envMsg}`);
        }
    }
}
//# sourceMappingURL=provider.js.map