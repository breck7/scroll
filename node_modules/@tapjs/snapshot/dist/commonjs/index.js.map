{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import type { TapPlugin, TestBase } from '@tapjs/core'\nimport {\n  argv,\n  cwd,\n  env,\n  mainScript,\n  MessageExtra,\n  normalizeMessageExtra,\n} from '@tapjs/core'\nimport { isPromise } from 'is-actual-promise'\nimport { relative, resolve } from 'path'\nimport { CompareOptions, format, strict } from 'tcompare'\nimport { Deferred } from 'trivial-deferred'\nimport { fileURLToPath } from 'url'\nimport { cleanCWD } from './clean-cwd.js'\nimport { SnapshotProviderDefault } from './provider.js'\n\nconst defaultFormatSnapshot =\n  (co: CompareOptions = {}) =>\n  (obj: any) =>\n    format(obj, { sort: true, ...co })\n\n/**\n * Interface provided by the class set in the `snapshotProvider` option.\n * `save()` may be an async method, but `read()` must be synchronous.\n */\nexport interface SnapshotProvider {\n  file: string\n  read(msg: string): string\n  snap(data: string, msg: string): void\n  save(): void | Promise<void>\n}\n\nexport interface SnapshotOptions {\n  compareOptions?: CompareOptions\n\n  /**\n   * Class to use to store and load snapshot data.\n   * Defaults to SnapshotProviderDefault, which writes\n   * to files in ./tap-snapshots\n   * There's no hard requirement that \"file\" be a file on\n   * disk of course. Could easily be in a database, localStorage,\n   * whatever.\n   */\n  snapshotProvider?: {\n    new (file: string): SnapshotProvider\n  }\n\n  /**\n   * the \"file\" used to store snapshots.\n   * Defaults to a filename based on the test file name and arguments,\n   * in ./tap-snapshots.  Specifying the same filename will result in\n   * getting the same SnapshotProvider.\n   */\n  snapshotFile?: string\n\n  /**\n   * whether or not to write the snapshot file.\n   * Defaults true if TAP_SNAPSHOT=1 in the environment.\n   */\n  writeSnapshot?: boolean\n\n  /**\n   * Function used to serialize snapshotted objects to a string.\n   * If a non-string is returned, then the default formatting will\n   * be used, so this can also transform the object, if needed.\n   */\n  formatSnapshot?: (obj: any) => any\n\n  /**\n   * Function called on the string snapshot result, can be used to\n   * remove changeable data, platform-specific stuff, etc.\n   */\n  cleanSnapshot?: (snapshotData: string) => string\n}\n\nexport const plugin: TapPlugin<SnapshotPlugin, SnapshotOptions> = (\n  t: TestBase,\n  opts: SnapshotOptions = {}\n) => new SnapshotPlugin(t, opts)\n\nexport class SnapshotPlugin {\n  static #refs = new Map<TestBase, SnapshotPlugin>()\n  #t: TestBase\n  #provider: Exclude<SnapshotOptions['snapshotProvider'], undefined>\n  #cleanSnapshot: SnapshotOptions['cleanSnapshot']\n  #formatSnapshot: SnapshotOptions['formatSnapshot']\n  #snapshot: SnapshotProvider\n  writeSnapshot: boolean = false\n  #compareOptions: CompareOptions\n\n  constructor(t: TestBase, opts: SnapshotOptions) {\n    SnapshotPlugin.#refs.set(t, this)\n    this.#compareOptions = opts.compareOptions || {}\n    this.#t = t\n    const snapshotFile = SnapshotPlugin.#getFilename(t, opts)\n    if (typeof opts.cleanSnapshot === 'function') {\n      this.#cleanSnapshot = opts.cleanSnapshot\n    }\n    if (typeof opts.formatSnapshot === 'function') {\n      this.#formatSnapshot = opts.formatSnapshot\n    }\n    // if the filename matches, and the provider type matches,\n    // use the parent's snapshot provider object.  Otherwise,\n    // create a new one.\n    const p = t.parent && SnapshotPlugin.#refs.get(t.parent)\n    const pp = p && p.#provider\n    const pf = p && p.snapshotFile\n    this.#provider =\n      opts.snapshotProvider || pp || SnapshotProviderDefault\n\n    if (typeof opts.writeSnapshot === 'boolean') {\n      this.writeSnapshot = opts.writeSnapshot\n    } else {\n      if (p) {\n        this.writeSnapshot = p.writeSnapshot\n      } else {\n        this.writeSnapshot =\n          env.TAP_SNAPSHOT === '1' ||\n          env.npm_lifecycle_event === 'snap' ||\n          env.npm_lifecycle_event === 'snapshot'\n      }\n    }\n\n    if (p && this.#provider === pp && snapshotFile === pf) {\n      this.#snapshot = p.#snapshot\n    } else {\n      this.#snapshot = this.#newSnapshot(snapshotFile)\n    }\n  }\n\n  #newSnapshot(f: string): SnapshotProvider {\n    const snapshot = new this.#provider(f)\n    if (this.writeSnapshot) {\n      const onEOF = this.#t.onEOF\n      this.#t.onEOF = () => {\n        onEOF.call(this.#t)\n        return snapshot.save()\n      }\n    }\n    return snapshot\n  }\n\n  /**\n   * Options that will be used when formatting snapshots and diffing/comparing\n   * objects using any assertion methods.\n   */\n  get compareOptions(): Exclude<\n    SnapshotOptions['compareOptions'],\n    undefined\n  > {\n    return this.#compareOptions\n  }\n  set compareOptions(\n    cmt: Exclude<SnapshotOptions['compareOptions'], undefined>\n  ) {\n    this.#compareOptions = cmt\n    this.#t.options.compareOptions = cmt\n  }\n\n  /**\n   * Method that will be called on snapshot strings. This can be used\n   * to remove transient run-specific data from snapshots using simple\n   * string transforms.\n   */\n  get cleanSnapshot(): SnapshotOptions['cleanSnapshot'] {\n    return this.#cleanSnapshot\n  }\n  set cleanSnapshot(clean: SnapshotOptions['cleanSnapshot']) {\n    this.#cleanSnapshot = clean\n    this.#t.options.cleanSnapshot = clean\n  }\n\n  /**\n   * Function that turns an object into a snapshot string.\n   *\n   * By default {@link tcompare!format} is used. If a string is returned,\n   * then that string is the snapshot string. If any other type is returned,\n   * then the returned value will be formatted using {@link tcompare!format}.\n   */\n  get formatSnapshot(): SnapshotOptions['formatSnapshot'] {\n    return this.#formatSnapshot\n  }\n  set formatSnapshot(\n    format: SnapshotOptions['formatSnapshot'] | undefined\n  ) {\n    format ??= defaultFormatSnapshot(this.#compareOptions)\n    this.#formatSnapshot = format\n    this.#t.options.formatSnapshot = format\n  }\n\n  /**\n   * The file where snapshots will be written to and read from\n   */\n  get snapshotFile(): string {\n    return this.#snapshot.file\n  }\n  set snapshotFile(f: string | URL) {\n    const p =\n      this.#t.parent && SnapshotPlugin.#refs.get(this.#t.parent)\n    if (f instanceof URL || f.startsWith('file://')) {\n      f = fileURLToPath(f)\n    }\n    if (p && this.#snapshot === p.#snapshot) {\n      this.#snapshot = this.#newSnapshot(f)\n    } else {\n      this.#snapshot.file = f\n    }\n  }\n\n  /**\n   * In `--snapshot` mode, takes a snapshot of the object provided, and writes\n   * to the snapshot file.\n   *\n   * Otherwise, reads the snapshot file, and verifies that a snapshot of the\n   * object provided matches the stored snapshot.\n   *\n   * @group Assertion Methods\n   */\n  matchSnapshot(found: any, ...[msg, extra]: MessageExtra): boolean {\n    this.#t.currentAssert = this.#t.t.matchSnapshot\n    const args = [msg, extra] as MessageExtra\n    const me = normalizeMessageExtra('must match snapshot', args)\n    const m = this.#t.fullname + ' > ' + me[0]\n    if (typeof found !== 'string') {\n      if (!this.#formatSnapshot) {\n        for (\n          let p = this.#t.parent;\n          p && p.t.pluginLoaded(plugin);\n          p = p.parent\n        ) {\n          const fs = p.t.formatSnapshot\n          if (fs) {\n            this.#formatSnapshot = fs\n            break\n          }\n        }\n      }\n      const format =\n        this.#formatSnapshot ||\n        defaultFormatSnapshot(this.#compareOptions)\n      found = format(found)\n      if (typeof found !== 'string') {\n        found = defaultFormatSnapshot(this.#compareOptions)(found)\n      }\n    }\n\n    // see if a parent had defined it if we don't.\n    // pretty common to define once on the root t for the whole test.\n    if (!this.#cleanSnapshot) {\n      for (\n        let p = this.#t.parent;\n        p && p.t.pluginLoaded(plugin);\n        p = p.parent\n      ) {\n        const cs = p.t.cleanSnapshot\n        if (cs) {\n          this.#cleanSnapshot = cs\n        }\n      }\n    }\n\n    if (this.#cleanSnapshot) {\n      found = this.#cleanSnapshot(found)\n    }\n\n    // \\r\\n line endings are annoying with git and other systems that\n    // will \"helpfully\" make them into \\n instead. Plus, when loaded\n    // as JavaScript, they're just turned into \\n anyway.\n    if (found.includes('\\r\\n')) {\n      found = defaultFormatSnapshot({\n        ...this.compareOptions,\n        bufferChunkSize: 16,\n      })(Buffer.from(found))\n    }\n\n    // for the cwd, probably the most common error in snapshot\n    // testing, see https://github.com/tapjs/tapjs/issues/885\n    if (process.env.TAP_SNAPSHOT_CLEAN_CWD !== '0') {\n      found = cleanCWD(found)\n    }\n\n    if (this.writeSnapshot) {\n      this.#snapshot.snap(found, m)\n      return this.#t.pass(...me)\n    }\n    const wanted = this.#snapshot.read(m)\n    if (found === wanted) {\n      return this.#t.pass(...me)\n    }\n    const { diff } = strict(found, wanted, this.#compareOptions)\n\n    Object.assign(me[1], {\n      found,\n      wanted,\n      diff,\n      compare: '===',\n    })\n    return this.#t.fail(...me)\n  }\n\n  /**\n   * Resolve a promise, and verify that the resulting value matches the\n   * snapshot.\n   *\n   * @group Assertion Methods\n   */\n  async resolveMatchSnapshot<T extends any = any>(\n    fnOrPromise: Promise<T> | (() => Promise<T>),\n    ...[msg, extra]: MessageExtra\n  ): Promise<boolean> {\n    const args = [msg, extra] as MessageExtra\n    const me = normalizeMessageExtra(\n      'promise must resolve to match snapshot',\n      args\n    )\n\n    let p!: Promise<T>\n    try {\n      p =\n        typeof fnOrPromise === 'function'\n          ? fnOrPromise()\n          : fnOrPromise\n    } catch (er) {\n      p = Promise.reject(er)\n    }\n\n    if (!isPromise(p)) {\n      return this.#t.fail(\n        'no promise or async function provided to t.resolveMatchSnapshot'\n      )\n    }\n\n    const d = new Deferred<boolean>()\n    this.#t.waitOn(d.promise)\n    this.#t.currentAssert = this.#t.t.resolveMatchSnapshot\n    try {\n      d.resolve(this.matchSnapshot(await p, ...me))\n    } catch (er) {\n      d.resolve(this.#t.fail(...me))\n    }\n    return d.promise\n  }\n\n  static #getFilename(t: TestBase, opts: SnapshotOptions): string {\n    if (opts.snapshotFile) {\n      return opts.snapshotFile\n    }\n    const p = t.parent && SnapshotPlugin.#refs.get(t.parent)\n    if (p) {\n      return p.snapshotFile\n    }\n    // get name from main file and args\n    const main = mainScript()\n    const args = argv.slice(2)\n    const head = relative(cwd, resolve(main))\n    const tail =\n      args.length === 0\n        ? ''\n        : '-' + args.join(' ').replace(/[^a-zA-Z0-9\\._\\-]/g, '-')\n    return resolve(cwd, 'tap-snapshots', head + tail + '.test.cjs')\n  }\n}\n\nexport const config = {\n  /**\n   * Generate snapshot files for `t.matchSnapshot()` assertions.\n   *\n   * Defaults to true if the `TAP_SNAPSHOT` environment variable is set to\n   * `1`, or if the `npm_lifecycle_event` environment variable is set to\n   * either `snap` or `snapshot`.\n   *\n   * That is, if you put `\"scripts\": { \"snap\": \"tap\" }` in your package.json\n   * file, then `npm run snap` will generate snapshots.\n   */\n  snapshot: {\n    type: 'boolean',\n    short: 'S',\n    description: `Generate snapshot files for \\`t.matchSnapshot()\\`\n                  assertions.\n\n                  Defaults to true if the \\`TAP_SNAPSHOT\\` environment variable\n                  is set to \\`1\\`, or if the \\`npm_lifecycle_event\\` environment\n                  variable is set to either \\`snap\\` or \\`snapshot\\`.\n\n                  That is, if you put \\`\"scripts\": { \"snap\": \"tap\" }\\` in your\n                  package.json file, then \\`npm run snap\\` will generate\n                  snapshots.\n    `,\n  },\n\n  /**\n   * Automatically clean the current working directory out of snapshot data,\n   * replacing it with a token.\n   *\n   * This helps prevent frustrating \"works on my machine\" when tests capture an\n   * error message or file path, but then fail when run on any other system,\n   * and so is enabled by default.`,\n   */\n  'snapshot-clean-cwd': {\n    type: 'boolean',\n    default: true,\n    description: `Automatically clean the current working directory out of\n                  snapshot data, replacing it with a token.\n\n                  This helps prevent frustrating \"works on my machine\" when\n                  tests capture an error message or file path, but then fail\n                  when run on any other system, and so is enabled by default.`,\n  },\n\n  /**\n   * Do not automatically clean the current working directory out of snapshot\n   * data, replacing it with a token.\n   *\n   * May be required when using fixtures or other snapshot data sources that\n   * intentionally include strings which happen to match the current working\n   * directory.\n   *\n   * Not recommended! It's better to leave this protection on, and edit your\n   * fixtures so that they do not include the cwd.\n   */\n  'no-snapshot-clean-cwd': {\n    type: 'boolean',\n    description: `Do not clean the current working directory out of snapshots\n\n                  May be required when using fixtures or other snapshot data\n                  sources that intentionally include strings which happen to\n                  match the current working directory.\n\n                  Not recommended! It's better to leave this protection on, and\n                  edit your fixtures so that they do not include the cwd.`,\n  },\n}\n"]}