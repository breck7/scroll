import { PromiseWithSubtest, TapPlugin, TestBase, Worker, WorkerOpts } from '@tapjs/core';
export type PromiseWithWorker = PromiseWithSubtest<Worker>;
export declare class WorkerPlugin {
    #private;
    /**
     * True if in the main thread. False when running in a worker thread
     * spawned by {@link @tapjs/worker!WorkerPlugin#worker | t.worker}
     *
     * @group Test Reflection
     */
    isMainThread: boolean;
    constructor(t: TestBase);
    /**
     * In the worker thread, the worker data that was provided to the
     * {@link @tapjs/worker!WorkerPlugin#worker | t.worker} method.
     *
     * In the main thread, this field is `undefined`.
     */
    get workerData(): any;
    /**
     * Start a Node Worker thread and parse its standard output as a child test
     *
     * @group Subtest Methods
     */
    worker(filename: string): PromiseWithWorker;
    worker(filename: string, name?: string): PromiseWithWorker;
    worker(filename: string, options: WorkerOpts, name?: string): PromiseWithWorker;
}
export declare const plugin: TapPlugin<WorkerPlugin>;
//# sourceMappingURL=index.d.ts.map