{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAIL,MAAM,GAEP,MAAM,aAAa,CAAA;AAEpB,OAAO,EAAE,YAAY,EAAE,UAAU,EAAE,MAAM,qBAAqB,CAAA;AAI9D,MAAM,OAAO,YAAY;IACvB,EAAE,CAAU;IACZ,WAAW,CAAM;IAEjB;;;;;OAKG;IACH,YAAY,CAAS;IAErB,YAAY,CAAW;QACrB,IAAI,CAAC,EAAE,GAAG,CAAC,CAAA;QACX,IAAI,CAAC,YAAY,GAAG,YAAY,CAAA;QAChC,qEAAqE;QACrE,qBAAqB;QACrB,IAAI,CAAC,YAAY;YAAE,IAAI,CAAC,WAAW,GAAG,UAAU,CAAA;QAChD,oBAAoB;IACtB,CAAC;IAED;;;;;OAKG;IACH,IAAI,UAAU;QACZ,OAAO,IAAI,CAAC,WAAW,CAAA;IACzB,CAAC;IAcD,MAAM,CACJ,QAAgB,EAChB,OAA6B,EAC7B,IAAa;QAEb,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;YAC/B,IAAI,GAAG,OAAO,CAAA;YACd,OAAO,GAAG,EAAE,CAAA;SACb;QACD,OAAO,GAAG,OAAO,IAAI,EAAE,CAAA;QACvB,IAAI,OAAO,CAAC,IAAI,KAAK,SAAS,IAAI,IAAI,KAAK,SAAS,EAAE;YACpD,OAAO,CAAC,IAAI,GAAG,IAAI,CAAA;SACpB;QACD,OAAO,CAAC,QAAQ,GAAG,QAAQ,CAAA;QAC3B,OAAO,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,MAAM,EAAE,OAAO,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAA;IACvD,CAAC;CACF;AAED,MAAM,CAAC,MAAM,MAAM,GAA4B,CAAC,CAAW,EAAE,EAAE,CAC7D,IAAI,YAAY,CAAC,CAAC,CAAC,CAAA","sourcesContent":["import {\n  PromiseWithSubtest,\n  TapPlugin,\n  TestBase,\n  Worker,\n  WorkerOpts,\n} from '@tapjs/core'\n\nimport { isMainThread, workerData } from 'node:worker_threads'\n\nexport type PromiseWithWorker = PromiseWithSubtest<Worker>\n\nexport class WorkerPlugin {\n  #t: TestBase\n  #workerData?: any\n\n  /**\n   * True if in the main thread. False when running in a worker thread\n   * spawned by {@link @tapjs/worker!WorkerPlugin#worker | t.worker}\n   *\n   * @group Test Reflection\n   */\n  isMainThread: boolean\n\n  constructor(t: TestBase) {\n    this.#t = t\n    this.isMainThread = isMainThread\n    // covered by tests, but V8 coverage doesn't extend to worker threads\n    /* c8 ignore start */\n    if (!isMainThread) this.#workerData = workerData\n    /* c8 ignore stop */\n  }\n\n  /**\n   * In the worker thread, the worker data that was provided to the\n   * {@link @tapjs/worker!WorkerPlugin#worker | t.worker} method.\n   *\n   * In the main thread, this field is `undefined`.\n   */\n  get workerData() {\n    return this.#workerData\n  }\n\n  /**\n   * Start a Node Worker thread and parse its standard output as a child test\n   *\n   * @group Subtest Methods\n   */\n  worker(filename: string): PromiseWithWorker\n  worker(filename: string, name?: string): PromiseWithWorker\n  worker(\n    filename: string,\n    options: WorkerOpts,\n    name?: string\n  ): PromiseWithWorker\n  worker(\n    filename: string,\n    options?: WorkerOpts | string,\n    name?: string\n  ): PromiseWithWorker {\n    if (typeof options === 'string') {\n      name = options\n      options = {}\n    }\n    options = options || {}\n    if (options.name === undefined && name !== undefined) {\n      options.name = name\n    }\n    options.filename = filename\n    return this.#t.sub(Worker, options, this.#t.t.worker)\n  }\n}\n\nexport const plugin: TapPlugin<WorkerPlugin> = (t: TestBase) =>\n  new WorkerPlugin(t)\n"]}