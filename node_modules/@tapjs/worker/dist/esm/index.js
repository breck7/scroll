import { Worker, } from '@tapjs/core';
import { isMainThread, workerData } from 'node:worker_threads';
export class WorkerPlugin {
    #t;
    #workerData;
    /**
     * True if in the main thread. False when running in a worker thread
     * spawned by {@link @tapjs/worker!WorkerPlugin#worker | t.worker}
     *
     * @group Test Reflection
     */
    isMainThread;
    constructor(t) {
        this.#t = t;
        this.isMainThread = isMainThread;
        // covered by tests, but V8 coverage doesn't extend to worker threads
        /* c8 ignore start */
        if (!isMainThread)
            this.#workerData = workerData;
        /* c8 ignore stop */
    }
    /**
     * In the worker thread, the worker data that was provided to the
     * {@link @tapjs/worker!WorkerPlugin#worker | t.worker} method.
     *
     * In the main thread, this field is `undefined`.
     */
    get workerData() {
        return this.#workerData;
    }
    worker(filename, options, name) {
        if (typeof options === 'string') {
            name = options;
            options = {};
        }
        options = options || {};
        if (options.name === undefined && name !== undefined) {
            options.name = name;
        }
        options.filename = filename;
        return this.#t.sub(Worker, options, this.#t.t.worker);
    }
}
export const plugin = (t) => new WorkerPlugin(t);
//# sourceMappingURL=index.js.map