"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.plugin = exports.WorkerPlugin = void 0;
const core_1 = require("@tapjs/core");
const node_worker_threads_1 = require("node:worker_threads");
class WorkerPlugin {
    #t;
    #workerData;
    /**
     * True if in the main thread. False when running in a worker thread
     * spawned by {@link @tapjs/worker!WorkerPlugin#worker | t.worker}
     *
     * @group Test Reflection
     */
    isMainThread;
    constructor(t) {
        this.#t = t;
        this.isMainThread = node_worker_threads_1.isMainThread;
        // covered by tests, but V8 coverage doesn't extend to worker threads
        /* c8 ignore start */
        if (!node_worker_threads_1.isMainThread)
            this.#workerData = node_worker_threads_1.workerData;
        /* c8 ignore stop */
    }
    /**
     * In the worker thread, the worker data that was provided to the
     * {@link @tapjs/worker!WorkerPlugin#worker | t.worker} method.
     *
     * In the main thread, this field is `undefined`.
     */
    get workerData() {
        return this.#workerData;
    }
    worker(filename, options, name) {
        if (typeof options === 'string') {
            name = options;
            options = {};
        }
        options = options || {};
        if (options.name === undefined && name !== undefined) {
            options.name = name;
        }
        options.filename = filename;
        return this.#t.sub(core_1.Worker, options, this.#t.t.worker);
    }
}
exports.WorkerPlugin = WorkerPlugin;
const plugin = (t) => new WorkerPlugin(t);
exports.plugin = plugin;
//# sourceMappingURL=index.js.map