{"version":3,"file":"print-messages.js","sourceRoot":"","sources":["../../src/print-messages.ts"],"names":[],"mappings":"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","sourcesContent":["import { Base, TAP } from '@tapjs/core'\nimport {\n  FailData,\n  PassData,\n  TestStreamSerialize,\n} from '@tapjs/error-serdes'\nimport { TestMap } from './test-map.js'\nimport { testMessageData } from './test-message-data.js'\nimport { testNestedLocation } from './test-nested-location.js'\nimport { testPointMessageData } from './test-point-message-data.js'\nimport { testPointResults } from './test-point-results.js'\nimport { testResults } from './test-results.js'\n\nconst isPass = (pf?: PassData | FailData): pf is PassData =>\n  !!pf?.details && !pf.details.error\nconst isFail = (pf?: PassData | FailData): pf is FailData =>\n  !!pf?.details.error\n\nexport const printMessagesFn = (\n  tap: TAP,\n  stream: TestStreamSerialize,\n  subsMap: TestMap<Base[]>,\n  diagsMap: TestMap<DiagnosticData[]>\n) => {\n  const printMessages = (t: Base, testNumber: number = 0) => {\n    // enqueue all my subs, then dequeue each one and print them\n    const subs = subsMap.get(t)\n    if (t.parent) {\n      stream.dequeue(testMessageData(t))\n      stream.start(testMessageData(t))\n    }\n    let count = 0\n\n    // print all the test points emitted directly on this test\n    const results = t.results\n    /* c8 ignore start */\n    if (!results)\n      throw new Error('printing results before test completion')\n    /* c8 ignore stop */\n    for (const type of [\n      'passes',\n      'skips',\n      'todos',\n      'failures',\n    ] as const) {\n      for (const res of results[type] ?? []) {\n        if (res.closingTestPoint) continue\n        stream.enqueue(testPointMessageData(res, t))\n        stream.dequeue(testPointMessageData(res, t))\n        stream.start(testPointMessageData(res, t))\n        const passFail = testPointResults(res, t, ++count)\n        if (isPass(passFail)) {\n          stream.pass(passFail)\n        } else {\n          stream.fail(passFail)\n        }\n      }\n    }\n\n    // recurse to all subtests\n    if (subs) {\n      // determine whether a suite or assertion based on subs.length\n      for (const t of subs) {\n        // console.error(t.parser)\n        stream.enqueue(testMessageData(t))\n      }\n      for (const t of subs) {\n        printMessages(t, ++count)\n      }\n    }\n\n    if (count && t !== tap) {\n      stream.plan({ ...testNestedLocation(t), count })\n    }\n\n    const passFail = testResults(t, count, testNumber)\n    if (isPass(passFail)) {\n      stream.pass(passFail)\n    } else if (isFail(passFail)) {\n      stream.fail(passFail)\n    }\n\n    /* c8 ignore start */\n    const diags = diagsMap.get(t) || []\n    /* c8 ignore stop */\n    for (const d of diags) {\n      stream.diagnostic(d)\n    }\n  }\n  return printMessages\n}\n"]}