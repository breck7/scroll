{"version":3,"file":"result-to-error.js","sourceRoot":"","sources":["../../src/result-to-error.ts"],"names":[],"mappings":"AAAA,gDAAgD;AAChD,0DAA0D;AAC1D,6DAA6D;AAG7D,OAAO,EAGL,WAAW,GACZ,MAAM,cAAc,CAAA;AAErB,OAAO,EAAE,eAAe,EAAE,MAAM,wBAAwB,CAAA;AACxD,OAAO,EAAE,UAAU,EAAE,MAAM,kBAAkB,CAAA;AAE7C,MAAM,CAAC,MAAM,aAAa,GAAG,CAC3B,MAQK,EACL,IAAW,EACJ,EAAE;IACT,MAAM,EACJ,KAAK,EAAE,SAAS,EAChB,IAAI,EAAE,OAAO,EACb,MAAM,EACN,MAAM,EAAE,CAAC,EACT,GAAG,IAAI,EACR,GAAG,MAAM,CAAC,IAAI,IAAI,EAAE,CAAA;IACrB,MAAM,EAAE,GACN,IAAI,CAAC,EAAE,IAAI,IAAI,EAAE,OAAO,CAAC,EAAE,CAAA;IAC7B,MAAM,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,SAAS,CAAA;IAClD,MAAM,KAAK,GACT,SAAS;QACT,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAA;IACnE,OAAO,IAAI,CAAC,EAAE,CAAA;IAEd,MAAM,IAAI,GAAG,UAAU,CAAC,OAAO,CAAC,CAAA;IAChC,IAAI,IAAI,EAAE;QACR,OAAO,IAAI,CAAC,MAAM,CAAA;QAClB,OAAO,IAAI,CAAC,QAAQ,CAAA;QACpB,OAAO,IAAI,CAAC,KAAK,CAAA;QACjB,OAAO,IAAI,CAAC,MAAM,CAAA;KACnB;SAAM,IAAI,MAAM,CAAC,IAAI,EAAE;QACtB,IAAI,OAAO,IAAI,IAAI,EAAE;YACnB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,KAAK,CAAA;SACzB;QACD,IAAI,QAAQ,IAAI,IAAI,EAAE;YACpB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAA;SAC5B;QACD,OAAO,IAAI,CAAC,KAAK,CAAA;QACjB,OAAO,IAAI,CAAC,MAAM,CAAA;KACnB;IAED,MAAM,IAAI,GACR,CAAC,MAAM,CAAC,IAAI,IAAI,MAAM,CAAC,QAAQ,IAAI,cAAc,CAAC;QAClD,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC;QACzB,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,GAAG,MAAM,CAAC,OAAO,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAA;IAEpE,OAAO,MAAM,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,EAAE;QACpC,GAAG,IAAI;QACP,KAAK,EAAE,UAAU,IAAI,IAAI,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC,OAAO,EAAE;KACzD,CAAC,CAAA;AACJ,CAAC,CAAA","sourcesContent":["// turn a tap-parser Result object into an Error\n// Put some of the diagnostic info into the error message,\n// because that is the string the node --test reporter shows.\n\nimport { Base } from '@tapjs/core'\nimport {\n  CallSiteLike,\n  CallSiteLikeJSON,\n  expandStack,\n} from '@tapjs/stack'\nimport { Result, TapError } from 'tap-parser'\nimport { locFromCallSite } from './loc-from-callsite.js'\nimport { prettyDiff } from './pretty-diff.js'\n\nexport const resultToError = (\n  result:\n    | Result\n    | TapError\n    | {\n        ok?: boolean\n        tapError?: string\n        name?: string\n        diag?: Result['diag']\n      },\n  test?: Base\n): Error => {\n  const {\n    stack: diagStack,\n    diff: rawDiff,\n    source,\n    passes: _,\n    ...diag\n  } = result.diag || {}\n  const at: CallSiteLike | CallSiteLikeJSON =\n    diag.at ?? test?.options.at\n  const lfa = !!at ? locFromCallSite(at) : undefined\n  const stack =\n    diagStack ||\n    (lfa?.file ? `${lfa.file}:${lfa.line}:${lfa.column}` : undefined)\n  delete diag.at\n\n  const diff = prettyDiff(rawDiff)\n  if (diff) {\n    delete diag.actual\n    delete diag.expected\n    delete diag.found\n    delete diag.wanted\n  } else if (result.diag) {\n    if ('found' in diag) {\n      diag.actual = diag.found\n    }\n    if ('wanted' in diag) {\n      diag.expected = diag.wanted\n    }\n    delete diag.found\n    delete diag.wanted\n  }\n\n  const name =\n    (result.name || result.tapError || 'unnamed test') +\n    (diff ? '\\n' + diff : '') +\n    (source ? '\\n| ' + source.trimEnd().split('\\n').join('\\n| ') : '')\n\n  return Object.assign(new Error(name), {\n    ...diag,\n    stack: `Error: ${name}\\n` + expandStack(stack).trimEnd(),\n  })\n}\n"]}