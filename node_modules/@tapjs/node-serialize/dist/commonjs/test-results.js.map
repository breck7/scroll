{"version":3,"file":"test-results.js","sourceRoot":"","sources":["../../src/test-results.ts"],"names":[],"mappings":";;;AAMA,wCAA0C;AAC1C,6DAAoD;AACpD,iEAAwD;AAEjD,MAAM,WAAW,GAAG,CACzB,CAAO,EACP,KAAa,EACb,UAAkB,EACe,EAAE;IACnC,IAAI,CAAC,CAAC,CAAC,MAAM;QAAE,OAAM;IAErB,MAAM,OAAO,GAAG,CAAC,CAAC,OAAO,CAAA;IACzB,qBAAqB;IACrB,IAAI,CAAC,OAAO,EAAE;QACZ,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAA;KAC9D;IACD,oBAAoB;IACpB,MAAM,KAAK,GAAG,KAAK,GAAG,CAAC,CAAA;IACvB,MAAM,CAAC,GAAa;QAClB,GAAG,IAAA,sCAAe,EAAC,CAAC,CAAC;QACrB,OAAO,EAAE;YACP,WAAW,EAAE,CAAC,CAAC,IAAI;SACpB;QACD,UAAU;KACX,CAAA;IAED,MAAM,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,OAAO;QAC/B,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,IAAI,IAAI;QACjC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAA;IAClB,IAAI,IAAI;QAAE,CAAC,CAAC,IAAI,GAAG,IAAI,CAAA;IACvB,MAAM,IAAI,GAAG,CAAC,CAAC,OAAO,CAAC,IAAI,CAAA;IAC3B,IAAI,IAAI;QAAE,CAAC,CAAC,IAAI,GAAG,IAAI,CAAA;IACvB,IAAI,KAAK;QAAE,CAAC,CAAC,OAAO,CAAC,IAAI,GAAG,OAAO,CAAA;IAEnC,IAAI,OAAO,CAAC,EAAE;QAAE,OAAO,CAAC,CAAA;IAExB,IAAI,KAAK,EAAE;QACT,MAAM,EAAE,GAAG,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAA;QAClC,MAAM,CAAC,GAAG,GAAG,EAAE,WAAW,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,SAAS,CAAA;QACtD,OAAO;YACL,GAAG,CAAC;YACJ,OAAO,EAAE;gBACP,GAAG,CAAC,CAAC,OAAO;gBACZ,KAAK,EAAE,MAAM,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,EAAE;oBACjC,IAAI,EAAE,kBAAkB;oBACxB,WAAW,EAAE,gBAAgB;oBAC7B,KAAK,EAAE,CAAC;oBACR,qBAAqB;oBACrB,QAAQ,EAAE,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,QAAQ,CAAC;oBACzD,KAAK,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK;wBACpB,CAAC,CAAC,IAAA,mBAAW,EAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC;wBAC9B,CAAC,CAAC,SAAS;oBACb,oBAAoB;iBACrB,CAAC;aACH;SACF,CAAA;KACF;IAED,2EAA2E;IAC3E,iCAAiC;IACjC,MAAM,EAAE,GAAG,IAAA,kCAAa,EACtB,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;QACb,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI;QACrB,EAAE,EAAE,KAAK;QACT,IAAI,EAAE,sBAAsB;QAC5B,IAAI,EAAE,EAAE;KACT,EACH,CAAC,CACF,CAAA;IAED,OAAO;QACL,GAAG,CAAC;QACJ,OAAO,EAAE;YACP,GAAG,CAAC,CAAC,OAAO;YACZ,KAAK,EAAE,MAAM,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE;gBAC1C,KAAK,EAAE,EAAE;gBACT,IAAI,EAAE,kBAAkB;gBACxB,WAAW,EAAE,iBAAiB;gBAC9B,qBAAqB;gBACrB,QAAQ,EAAE,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,QAAQ,CAAC;gBACzD,oBAAoB;gBACpB,KAAK,EAAE,IAAA,mBAAW,EAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,OAAO,EAAE;aAC9C,CAAC;SACH;KACF,CAAA;AACH,CAAC,CAAA;AAjFY,QAAA,WAAW,eAiFvB","sourcesContent":["// a bunch of lines are ignored for coverage in this file, because\n// the situations they cover ought to be impossible, but are covered\n// for type safety, and in case there's a bug in tapjs/core that allows\n// that incorrect behavior.\nimport { Base } from '@tapjs/core'\nimport { FailData, PassData } from '@tapjs/error-serdes'\nimport { expandStack } from '@tapjs/stack'\nimport { resultToError } from './result-to-error.js'\nimport { testMessageData } from './test-message-data.js'\n\nexport const testResults = (\n  t: Base,\n  count: number,\n  testNumber: number\n): PassData | FailData | undefined => {\n  if (!t.parent) return\n\n  const results = t.results\n  /* c8 ignore start */\n  if (!results) {\n    throw new Error('printing messages before results available')\n  }\n  /* c8 ignore stop */\n  const suite = count > 0\n  const p: PassData = {\n    ...testMessageData(t),\n    details: {\n      duration_ms: t.time,\n    },\n    testNumber,\n  }\n\n  const skip = results.plan.skipAll\n    ? results.plan.skipReason || true\n    : t.options.skip\n  if (skip) p.skip = skip\n  const todo = t.options.todo\n  if (todo) p.todo = todo\n  if (suite) p.details.type = 'suite'\n\n  if (results.ok) return p\n\n  if (suite) {\n    const nf = results.failures.length\n    const m = `${nf} subtest${nf === 1 ? '' : 's'} failed`\n    return {\n      ...p,\n      details: {\n        ...p.details,\n        error: Object.assign(new Error(m), {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'subtestsFailed',\n          cause: m,\n          /* c8 ignore start */\n          failures: results.failures.map(f => f.name || f.tapError),\n          stack: t.options.stack\n            ? expandStack(t.options.stack)\n            : undefined,\n          /* c8 ignore stop */\n        }),\n      },\n    }\n  }\n\n  // a failure here indicates a strange test that had no failing test points,\n  // but then was marked as not ok.\n  const fe = resultToError(\n    t.lists.fail[0] ??\n      results.failures[0] ?? {\n        ok: false,\n        name: 'Unknown test failure',\n        diag: {},\n      },\n    t\n  )\n\n  return {\n    ...p,\n    details: {\n      ...p.details,\n      error: Object.assign(new Error(fe.message), {\n        cause: fe,\n        code: 'ERR_TEST_FAILURE',\n        failureType: 'testCodeFailure',\n        /* c8 ignore start */\n        failures: results.failures.map(f => f.name || f.tapError),\n        /* c8 ignore stop */\n        stack: expandStack(t.options.stack).trimEnd(),\n      }),\n    },\n  }\n}\n"]}