{"version":3,"file":"test-map.js","sourceRoot":"","sources":["../../src/test-map.ts"],"names":[],"mappings":";AAAA,kEAAkE;AAClE,uDAAuD;;;AAIvD,MAAM,iBAAiB,GAAG,MAAM,CAAC,GAAG,CAAC,2BAA2B,CAAC,CAAA;AACjE,MAAM,MAAM,GAAG,CACb,CAA0C,EAClC,EAAE;IACV,MAAM,CAAC,GAAG,CAAC,CAAC,iBAAiB,CAAC,CAAA;IAC9B,IAAI,CAAC;QAAE,OAAO,CAAC,CAAA;IACf,MAAM,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAA;IAC/B,MAAM,CAAC,cAAc,CAAC,CAAC,EAAE,iBAAiB,EAAE;QAC1C,KAAK,EAAE,CAAC;QACR,QAAQ,EAAE,KAAK;QACf,YAAY,EAAE,IAAI;QAClB,UAAU,EAAE,KAAK;KAClB,CAAC,CAAA;IACF,OAAO,CAAC,CAAA;AACV,CAAC,CAAA;AAED,MAAa,OAAsB,SAAQ,GAAY;IACrD,YAAY,KAAmB;QAC7B,KAAK,EAAE,CAAA;QACP,IAAI,KAAK,EAAE;YACT,KAAK,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,KAAK,EAAE;gBAC1B,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;aACf;SACF;IACH,CAAC;IACD,GAAG,CAAC,CAAO;QACT,OAAO,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAoB,CAAC,CAAA;IAChD,CAAC;IACD,GAAG,CAAC,CAAO;QACT,OAAO,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAoB,CAAC,CAAA;IAChD,CAAC;IACD,GAAG,CAAC,CAAO,EAAE,CAAI;QACf,OAAO,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAoB,EAAE,CAAC,CAAC,CAAA;IACnD,CAAC;CACF;AAlBD,0BAkBC","sourcesContent":["// A map of test objects, but make sure that we don't get confused\n// if we get the Test proxy or the underlying TestBase.\n\nimport { Base } from '@tapjs/core'\n\nconst kSerializationKey = Symbol.for('@tapjs/node-serialize.key')\nconst getKey = (\n  t: Base & { [kSerializationKey]?: string }\n): string => {\n  const k = t[kSerializationKey]\n  if (k) return k\n  const n = String(Math.random())\n  Object.defineProperty(t, kSerializationKey, {\n    value: n,\n    writable: false,\n    configurable: true,\n    enumerable: false,\n  })\n  return n\n}\n\nexport class TestMap<T extends {}> extends Map<Base, T> {\n  constructor(items?: [Base, T][]) {\n    super()\n    if (items) {\n      for (const [t, v] of items) {\n        this.set(t, v)\n      }\n    }\n  }\n  get(t: Base): T | undefined {\n    return super.get(getKey(t) as unknown as Base)\n  }\n  has(t: Base) {\n    return super.has(getKey(t) as unknown as Base)\n  }\n  set(t: Base, v: T) {\n    return super.set(getKey(t) as unknown as Base, v)\n  }\n}\n"]}