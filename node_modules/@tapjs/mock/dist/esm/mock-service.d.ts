/// <reference types="node" resolution-mode="require"/>
import type { CallSiteLike, CallSiteLikeJSON } from '@tapjs/stack';
import { MessagePort } from 'worker_threads';
export type MockServiceLoadRequest = {
    action: 'load';
    url: string;
    id: string;
};
export type MockServiceResolveRequest = {
    action: 'resolve';
    url: string;
    parentURL: string;
    id: string;
};
export type MockServiceRequest = MockServiceLoadRequest | MockServiceResolveRequest;
export type MockServiceResponse = MockServiceRequest & {
    response: string | undefined;
};
export declare const isMockServiceResponse: (m: any) => m is MockServiceResponse;
export declare const isMockServiceRequest: (m: any) => m is MockServiceRequest;
declare const mockServiceCtorSymbol: unique symbol;
export declare class MockService {
    #private;
    key: string;
    module?: string | Promise<string>;
    mocks?: Record<string, Record<string, any>>;
    caller?: {
        path: string;
        dir: string;
        url: URL;
        at: CallSiteLike | CallSiteLikeJSON;
        stack?: string;
    };
    constructor(priv: typeof mockServiceCtorSymbol);
    static listen(port: MessagePort): Promise<void>;
    static handle(msg: any): Promise<string | undefined>;
    static resolve(req: MockServiceResolveRequest): Promise<string | undefined>;
    resolve({ url, parentURL }: MockServiceResolveRequest): Promise<string | undefined>;
    static load(req: MockServiceLoadRequest): Promise<string | undefined>;
    load({ url }: MockServiceLoadRequest): Promise<string | undefined>;
    static create(module: string, mocks?: Record<string, any>, caller?: Function | ((...a: any[]) => any)): Promise<MockService & {
        module: string | Promise<string>;
    }>;
    unmock(): void;
    static get(key: string): MockService;
}
export {};
//# sourceMappingURL=mock-service.d.ts.map