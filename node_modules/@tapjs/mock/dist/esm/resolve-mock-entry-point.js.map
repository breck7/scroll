{"version":3,"file":"resolve-mock-entry-point.js","sourceRoot":"","sources":["../../src/resolve-mock-entry-point.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,aAAa,EAAE,MAAM,gBAAgB,CAAA;AAE9C,MAAM,CAAC,MAAM,qBAAqB,GAAG,KAAK,EACxC,GAAQ,EACR,MAAc,EACd,UAAkB,EAClB,GAAW,EACX,MAAyC,EACxB,EAAE;IACnB,IAAI,eAAoB,CAAA;IACxB,IAAI,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE;QACvD,eAAe,GAAG,IAAI,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,CAAA;KACvC;SAAM;QACL,MAAM,GAAG,GAAG,CAAC,MAAM,aAAa,CAAC,MAAM,EAAE,GAAG,CAAC,CAAQ,CAAA;QACrD,mDAAmD;QACnD,qDAAqD;QACrD,qBAAqB;QACrB,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;YAC3B,MAAM,EAAE,GAAG,IAAI,SAAS,CACtB,uCAAuC,CACxC,CAAA;YACD,KAAK,CAAC,iBAAiB,CAAC,EAAE,EAAE,MAAM,CAAC,CAAA;YACnC,MAAM,EAAE,CAAA;SACT;QACD,oBAAoB;QACpB,eAAe,GAAG,GAAG,CAAA;KACtB;IACD,eAAe,CAAC,YAAY,CAAC,GAAG,CAAC,SAAS,EAAE,GAAG,UAAU,IAAI,GAAG,EAAE,CAAC,CAAA;IACnE,OAAO,MAAM,CAAC,eAAe,CAAC,CAAA;AAChC,CAAC,CAAA","sourcesContent":["import { resolveImport } from 'resolve-import'\n\nexport const resolveMockEntryPoint = async (\n  url: URL,\n  module: string,\n  serviceKey: string,\n  key: string,\n  caller: Function | ((...a: any[]) => any)\n): Promise<string> => {\n  let mockedModuleURL: URL\n  if (module.startsWith('./') || module.startsWith('../')) {\n    mockedModuleURL = new URL(module, url)\n  } else {\n    const res = (await resolveImport(module, url)) as URL\n    // caught at the exposed API, defense in depth only\n    // but the experience if it throws here is unhelpful.\n    /* c8 ignore start */\n    if (typeof res === 'string') {\n      const er = new TypeError(\n        'node builtins cannot be mock imported'\n      )\n      Error.captureStackTrace(er, caller)\n      throw er\n    }\n    /* c8 ignore stop */\n    mockedModuleURL = res\n  }\n  mockedModuleURL.searchParams.set('tapmock', `${serviceKey}.${key}`)\n  return String(mockedModuleURL)\n}\n"]}