{"version":3,"file":"hooks.mjs","sourceRoot":"","sources":["../../src/hooks.mts"],"names":[],"mappings":"AAAA,2CAA2C;AAG3C,OAAO,EAAE,aAAa,EAAE,MAAM,UAAU,CAAA;AAExC,OAAO,EAAE,iBAAiB,EAAE,MAAM,0BAA0B,CAAA;AAE5D,IAAI,MAAyB,CAAA;AAE7B,MAAM,CAAC,MAAM,aAAa,GAAsB,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE;IAC3D,gCAAgC;IAChC,MAAM,GAAG,IAAI,iBAAiB,CAAC,IAAI,CAAC,CAAA;IACpC,MAAM,gBAAgB,GAAG,IAAI,CAAC,SAAS,CACrC,aAAa,CACX,IAAI,GAAG,CAAC,6BAA6B,EAAE,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CACxD,CACF,CAAA;IACD,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAA;IAC3D,OAAO;;;gCAGuB,IAAI;;kCAEF,gBAAgB;;;CAGjD,CAAA;AACD,CAAC,CAAA;AAED,MAAM,CAAC,MAAM,UAAU,GAAG,CAAC,EAAE,IAAI,EAAyB,EAAQ,EAAE;IAClE,MAAM,GAAG,IAAI,iBAAiB,CAAC,IAAI,CAAC,CAAA;AACtC,CAAC,CAAA;AAED,MAAM,CAAC,MAAM,IAAI,GAAa,KAAK,EAAE,GAAG,EAAE,OAAO,EAAE,QAAQ,EAAE,EAAE;IAC7D,IAAI,CAAC,MAAM,EAAE;QACX,MAAM,IAAI,KAAK,CACb,uDAAuD;YACrD,2DAA2D;YAC3D,yBAAyB,CAC5B,CAAA;KACF;IACD,MAAM,MAAM,GAAG,MAAM,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;IACrC,OAAO,MAAM;QACX,CAAC,CAAC;YACE,MAAM,EAAE,QAAQ;YAChB,MAAM,EAAE,GAAG,MAAM,EAAE;YACnB,YAAY,EAAE,IAAI;SACnB;QACH,CAAC,CAAC,QAAQ,CAAC,GAAG,EAAE,OAAO,CAAC,CAAA;AAC5B,CAAC,CAAA;AAED,MAAM,CAAC,MAAM,OAAO,GAAgB,KAAK,EACvC,GAAG,EACH,OAAO,EACP,WAAW,EACX,EAAE;IACF,IAAI,CAAC,MAAM,EAAE;QACX,MAAM,IAAI,KAAK,CACb,uDAAuD;YACrD,8DAA8D;YAC9D,yBAAyB,CAC5B,CAAA;KACF;IACD,MAAM,QAAQ,GAAG,MAAM,MAAM,CAAC,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC,SAAS,CAAC,CAAA;IAC7D,OAAO,QAAQ,IAAI,QAAQ,CAAC,UAAU,CAAC,YAAY,CAAC;QAClD,CAAC,CAAC;YACE,GAAG,EAAE,QAAQ;YACb,MAAM,EAAE,QAAQ;YAChB,YAAY,EAAE,IAAI;SACnB;QACH,CAAC,CAAC,WAAW,CAAC,QAAQ,IAAI,GAAG,EAAE,OAAO,CAAC,CAAA;AAC3C,CAAC,CAAA","sourcesContent":["// hooks for legacy-loader.ts and loader.ts\n\nimport { GlobalPreloadHook, LoadHook, ResolveHook } from 'node:module'\nimport { fileURLToPath } from 'node:url'\nimport { MessagePort } from 'node:worker_threads'\nimport { MockServiceClient } from './mock-service-client.js'\n\nlet client: MockServiceClient\n\nexport const globalPreload: GlobalPreloadHook = ({ port }) => {\n  // loader thread. connect client\n  client = new MockServiceClient(port)\n  const serviceModuleCJS = JSON.stringify(\n    fileURLToPath(\n      new URL('../commonjs/mock-service.js', import.meta.url)\n    )\n  )\n  const base = JSON.stringify(fileURLToPath(import.meta.url))\n  return `\n// main thread, start service and listen for connections\nconst { createRequire } = getBuiltin('module')\nconst require = createRequire(${base})\nconst { fileURLToPath } = getBuiltin('url')\nconst { MockService } = require(${serviceModuleCJS})\nMockService.listen(port)\nport.unref()\n`\n}\n\nexport const initialize = ({ port }: { port: MessagePort }): void => {\n  client = new MockServiceClient(port)\n}\n\nexport const load: LoadHook = async (url, context, nextLoad) => {\n  if (!client) {\n    throw new Error(\n      'initialize() or globalPreload() must be run prior to ' +\n        'running the load() hook. Did you --loader when you meant ' +\n        '--import or vice versa?'\n    )\n  }\n  const source = await client.load(url)\n  return source\n    ? {\n        format: 'module',\n        source: `${source}`,\n        shortCircuit: true,\n      }\n    : nextLoad(url, context)\n}\n\nexport const resolve: ResolveHook = async (\n  url,\n  context,\n  nextResolve\n) => {\n  if (!client) {\n    throw new Error(\n      'initialize() or globalPreload() must be run prior to ' +\n        'running the resolve() hook. Did you --loader when you meant ' +\n        '--import or vice versa?'\n    )\n  }\n  const response = await client.resolve(url, context.parentURL)\n  return response && response.startsWith('tapmock://')\n    ? {\n        url: response,\n        format: 'module',\n        shortCircuit: true,\n      }\n    : nextResolve(response || url, context)\n}\n"]}