{"version":3,"file":"mock-service.js","sourceRoot":"","sources":["../../src/mock-service.ts"],"names":[],"mappings":"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","sourcesContent":["// This is the machinery that supports the load() and resolve()\n// methods used by the loader, returning the appropriate urls\n// and source.\n// It runs on the main thread, not the loader thread.\n//\n// The globalPreload/initialize inits the port and grabs a reference to it\n// in the loader thread.\n// Then the loader asks the service over that port for the mocked url and\n// source code, which is sent back.\n//\n// The mock-import module creates a MockService instance when t.mockImport\n// is called, giving it a key and setting up its mocks, and calls\n// import(startURL) as the return value.\n//\n// There should be at most 1 MockService instance for a given tap test,\n// with its own unique key that's used for loading.\n//\n// There are some weird lines ignored for coverage in this file, owing to the\n// fact that it is loaded as part of tap's initial startup, prior to\n// instrumenting coverage, and loaded very differently in node 20 vs prior\n// versions that ran loaders on the main thread..\n\nimport type { CallSiteLike, CallSiteLikeJSON } from '@tapjs/stack'\nimport * as stack from '@tapjs/stack'\nimport { randomBytes } from 'crypto'\nimport { dirname, isAbsolute } from 'path'\nimport { resolveImport } from 'resolve-import'\nimport { isRelativeRequire } from 'resolve-import/is-relative-require'\nimport { pathToFileURL } from 'url'\nimport { MessagePort } from 'worker_threads'\nimport { exportLine } from './export-line.js'\nimport { mungeMocks } from './munge-mocks.js'\nimport { resolveMockEntryPoint } from './resolve-mock-entry-point.js'\nimport { serviceKey } from './service-key.js'\n\nconst { hasOwnProperty } = Object.prototype\nconst hasOwn = (o: any, k: PropertyKey) => hasOwnProperty.call(o, k)\nconst getKey = () => randomBytes(8).toString('hex')\n\n/**\n * Build the source code for a mocked module.\n */\nconst buildSrc = (m: MockService, url: string) => {\n  const mock = m?.mocks?.[url]\n  /* c8 ignore start */\n  if (!mock) return\n  /* c8 ignore stop */\n\n  const { key } = m\n\n  const keySrc = `__tapmock${serviceKey}$${key}`\n  const mockSrc = `global[${keySrc}].mocks[${JSON.stringify(url)}]`\n  const src = Object.keys(mock).map(k => exportLine(k, mockSrc))\n  if (!Object.keys(mock).includes('default')) {\n    src.push(`const defExp = ${mockSrc}\nexport default defExp\\n`)\n  }\n  const symFor = JSON.stringify(keySrc)\n  return `const ${keySrc} = Symbol.for(${symFor})\\n${src.join('\\n')}`\n}\n\nexport type MockServiceLoadRequest = {\n  action: 'load'\n  url: string\n  id: string\n}\nexport type MockServiceResolveRequest = {\n  action: 'resolve'\n  url: string\n  parentURL: string\n  id: string\n}\n\nexport type MockServiceRequest =\n  | MockServiceLoadRequest\n  | MockServiceResolveRequest\n\nexport type MockServiceResponse = MockServiceRequest & {\n  // a false response means \"not a mocked module\"\n  response: string | undefined\n}\n\nexport const isMockServiceResponse = (\n  m: any\n): m is MockServiceResponse =>\n  isMockServiceRequest(m) &&\n  Object.keys(m).includes('response') &&\n  (typeof (m as MockServiceResponse).response === 'string' ||\n    typeof (m as MockServiceResponse).response === 'undefined')\n\nexport const isMockServiceRequest = (\n  m: any\n): m is MockServiceRequest =>\n  !!m &&\n  typeof m === 'object' &&\n  ((m.action === 'resolve' && typeof m.parentURL === 'string') ||\n    (m.action === 'load' && m.parentURL === undefined)) &&\n  typeof m.url === 'string' &&\n  typeof m.id === 'string'\n\n// keys and instances across dialects, so we get the right one when\n// it's loaded from the commonjs globalPreload, or just a cjs test\nconst kInstances = Symbol.for(`${serviceKey}.instances`)\nconst g = globalThis as typeof globalThis & {\n  [kInstances]?: Map<string, MockService>\n}\n\n// this gets called at startup before coverage is initiated,\n// so it never covers the second case where it isn't already set.\n/* c8 ignore start */\nconst instances = g[kInstances] || new Map<string, MockService>()\n/* c8 ignore stop */\ng[kInstances] = instances\n\nconst mockServiceCtorSymbol = Symbol('private')\nexport class MockService {\n  static #port?: MessagePort\n  key: string = getKey()\n  module?: string | Promise<string>\n  mocks?: Record<string, Record<string, any>>\n  caller?: {\n    path: string\n    dir: string\n    url: URL\n    at: CallSiteLike | CallSiteLikeJSON\n    stack?: string\n  }\n\n  constructor(priv: typeof mockServiceCtorSymbol) {\n    if (priv !== mockServiceCtorSymbol) {\n      throw new Error('create MockService with MockService.get()')\n    }\n    instances.set(this.key, this)\n  }\n\n  // pass in the main-thread end of the loader port set, and respond\n  // appropriately to messages we can handle\n  /* c8 ignore start */\n  static async listen(port: MessagePort) {\n    this.#port = port\n    port.on('message', async msg => {\n      /* c8 ignore stop */\n      /* c8 ignore start */\n      if (!isMockServiceRequest(msg)) return\n      /* c8 ignore stop */\n      const r = await this.handle(msg).catch(e => console.error(e))\n      // typescript handles 'void' weirdly\n      const response = r === undefined ? undefined : r\n      const msr: MockServiceResponse = { ...msg, response }\n      port.postMessage(msr)\n      /* c8 ignore start */\n    })\n    port.unref()\n  }\n  /* c8 ignore stop */\n\n  static async handle(msg: any) {\n    if (!isMockServiceRequest(msg)) return\n    return msg.action === 'resolve'\n      ? this.resolve(msg)\n      : this.load(msg)\n  }\n\n  static async resolve(req: MockServiceResolveRequest) {\n    const { parentURL } = req\n    const p = new URL(parentURL)\n    const [sk, k] = (p.searchParams.get('tapmock') || '').split('.')\n    if (sk !== serviceKey || !k) return\n    return this.get(k).resolve(req)\n  }\n  async resolve({ url, parentURL }: MockServiceResolveRequest) {\n    const resolvedURL = hasOwn(this.mocks, url)\n      ? url\n      : isRelativeRequire(url)\n      ? String(new URL(url, parentURL))\n      : isAbsolute(url)\n      ? String(pathToFileURL(url))\n      : url\n\n    if (!hasOwn(this.mocks, resolvedURL)) {\n      // parent is mocked, but this module isn't, so the things IT loads\n      // should be loaded from the mock, even though it isn't. Need to\n      // resolveImport() here so that it doesn't get confused when\n      // loading deps out of node_modules.\n      //\n      // If a node builtin is mocked, and another builtin references it, then\n      // the builtin will get the original builtin, not the mock. This is a\n      // shortcoming owing to the fact that there's no way here to tack a\n      // search param on the \"url\" for an internal module. If it causes\n      // problems, then the solution could be to swap out internal modules with\n      // a known url type like tapmockBuiltin://node:fs or something, and use\n      // that as the indicator that its builtin deps might need to be mocked.\n      // For now, it's just a known design limitation, because that's a bit\n      // tricky to get right.\n      let mocker = await resolveImport(url, parentURL).catch(() => {})\n      // we can't resolve it, but maybe someone else can.\n      // if RI gives us a string, then it's a builtin, do nothing\n      if (!mocker || typeof mocker !== 'object') return\n      mocker.searchParams.set('tapmock', `${serviceKey}.${this.key}`)\n      return String(mocker)\n    }\n\n    const mockRes = new URL(`tapmock://${serviceKey}.${this.key}/`)\n    mockRes.searchParams.set('url', resolvedURL)\n    return String(mockRes)\n  }\n\n  static async load(req: MockServiceLoadRequest) {\n    const { url } = req\n    if (!url.startsWith(`tapmock://${serviceKey}.`)) return\n    /* c8 ignore start */\n    const u = new URL(url)\n    /* c8 ignore stop */\n    const [_, key] = u.host.split('.')\n    /* c8 ignore start */\n    if (!key) return\n    /* c8 ignore stop */\n    return this.get(key).load(req)\n  }\n  async load({ url }: MockServiceLoadRequest) {\n    if (!url.startsWith('tapmock://')) return\n    const u = new URL(url)\n    const key = u.host\n    const mockURL = u.searchParams.get('url')\n    if (key !== `${serviceKey}.${this.key}` || !mockURL) return\n    return buildSrc(this, mockURL)\n  }\n\n  static async create(\n    module: string,\n    mocks: Record<string, any> = {},\n    caller: Function | ((...a: any[]) => any) = MockService.create\n  ): Promise<MockService & { module: string | Promise<string> }> {\n    const ms = new MockService(mockServiceCtorSymbol)\n\n    /* c8 ignore start */\n    const needIgnoreTap = !stack\n      .getIgnoredPackages()\n      .includes('@tapjs')\n    if (needIgnoreTap) stack.addIgnoredPackage('@tapjs')\n    const at = stack.at(caller)\n    if (needIgnoreTap) stack.removeIgnoredPackage('@tapjs')\n\n    const path = at?.absoluteFileName\n    if (!path) {\n      throw new Error('could not get current call site')\n    }\n    /* c8 ignore stop */\n\n    // tell the loader hooks thread that it's ok to start using it now.\n    this.#port?.postMessage({ start: true })\n\n    const dir = dirname(path)\n    const url = pathToFileURL(path)\n\n    const resolved = resolveMockEntryPoint(\n      url,\n      module,\n      serviceKey,\n      ms.key,\n      caller\n    )\n    resolved.then(s => (ms.module = s))\n\n    ms.mocks = mungeMocks(mocks, dir)\n    ms.caller = {\n      path,\n      dir,\n      url,\n      at,\n      stack: stack.captureString(caller),\n    }\n    const sym = Symbol.for(`__tapmock${serviceKey}$${ms.key}`)\n    const g = globalThis as typeof globalThis & {\n      [sym]?: MockService\n    }\n    return (g[sym] = Object.assign(ms, { module: resolved }))\n  }\n\n  unmock() {\n    const sym = Symbol.for(`__tapmock${serviceKey}$${this.key}`)\n    const g = globalThis as typeof globalThis & {\n      [sym]?: MockService\n    }\n    delete g[sym]\n    instances.delete(this.key)\n    this.mocks = undefined\n  }\n\n  static get(key: string) {\n    const i = instances.get(key)\n    if (!i) {\n      throw new Error('mock service instance key not found')\n    }\n    return i\n  }\n}\n"]}