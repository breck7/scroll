{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { plugin as AfterPlugin } from '@tapjs/after'\nimport { TapPlugin, TestBase } from '@tapjs/core'\nimport * as stack from '@tapjs/stack'\nimport { isBuiltin } from 'node:module'\nimport { mockRequire } from './mock-require.js'\nimport { MockService } from './mock-service.js'\n\n/**\n * Implementation class providing the\n * {@link @tapjs/mock!index.TapMock#mockRequire},\n * {@link @tapjs/mock!index.TapMock#mockImport}, and\n * {@link @tapjs/mock!index.TapMock#createMock} methods.\n */\nexport class TapMock {\n  #t: TestBase\n  #didTeardown: boolean = false\n  #mocks: MockService[] = []\n\n  #allMock: Record<string, any>\n  static #refs = new Map<TestBase, TapMock>()\n\n  constructor(t: TestBase) {\n    this.#t = t\n    TapMock.#refs.set(t, this)\n    // inherit #allMock\n    const p = t.parent && TapMock.#refs.get(t.parent)\n    this.#allMock = Object.assign(\n      Object.create(null),\n      p ? p.#allMock : {}\n    )\n  }\n\n  /**\n   * Convenience method to create a mock from an existing object by\n   * overriding some (possibly deeply nested) methods or properties.\n   *\n   * Example:\n   *\n   * ```ts\n   * import * as fs from 'node:fs'\n   * const mockedThing = t.mockRequire('./module.js', t.createMock(\n   *   { fs },\n   *   { fs: { statSync: myMockedStatSync }}\n   * )\n   * ```\n   *\n   * This can also appear anywhere in the object hierarchy, which may\n   * be more convenient in some cases:\n   *\n   * ```ts\n   * import * as blah from '@long-name/blah-api'\n   * const mockedThing = t.mockRequire('./module.js', {\n   *   fs: t.createMock(fs, { statSync: myMockedStatSync }),\n   *   child_process: t.createMock(child_process, { spawn: mockSpawn }),\n   *   '@long-name/blah-api': t.createMock(blah, {\n   *     some: {\n   *       nested: {\n   *         prop: true\n   *       }\n   *     }\n   *   })\n   * })\n   * ```\n   *\n   * To *remove* a property, set it as undefined in the override.\n   *\n   * @group Spies, Mocks, and Fixtures\n   */\n  createMock<\n    B extends { [k: PropertyKey]: any } | Array<any>,\n    O extends { [k: string]: any } | Array<any>\n  >(bases: B, overrides: O): MockedObject<B, O> {\n    if (Array.isArray(overrides))\n      return overrides as unknown as MockedObject<B, O>\n    return Object.fromEntries(\n      Object.entries(bases)\n        .map(([k, v]) => {\n          if (k in overrides) {\n            const bobj = !!v && typeof v === 'object'\n            const oobj =\n              !!overrides[k] && typeof overrides[k] === 'object'\n            if (oobj && bobj) {\n              return [k, this.createMock(v, overrides[k])]\n            } else {\n              return [k, overrides[k]]\n            }\n          }\n          return [k, v]\n        })\n        .concat(\n          Object.entries(overrides).filter(([k]) => !(k in bases))\n        )\n    ) as MockedObject<B, O>\n  }\n\n  /**\n   * Deprecated alias for {@link @tapjs/mock!index.TapMock#mockRequire}\n   *\n   * Prints a warning to stderr the first time it used, otherwise\n   * identical.\n   *\n   * @group Spies, Mocks, and Fixtures\n   *\n   * @deprecated\n   */\n  mock<T = any>(module: string, mocks: { [k: string]: any } = {}): T {\n    /* c8 ignore start */\n    const at = stack.at(this.#t.t.mock)?.toJSON() || ''\n    /* c8 ignore stop */\n    console.error(\n      't.mock() is now t.mockRequire(). Please update your tests.',\n      at\n    )\n    return mockRequire(module, mocks, this.#t.t.mock) as T\n  }\n\n  /**\n   * Load the supplied module asynchronously using import(),\n   * replacing any of the referenced modules with the mocks provided.\n   *\n   * Works with either ESM or CommonJS modules, but as with `import()` of\n   * CommonJS modules, the `module.exports` value will be set as the\n   * `default` property on the resolved object, making\n   * {@link @tapjs/mock!index.TapMock#mockRequire} somewhat more intuitive in those cases.\n   *\n   * For type info, cast using `as typeof import(...)` or use the type\n   * parameter, as TypeScript lacks a way to infer imports dynamically.\n   *\n   * For example:\n   *\n   * ```ts\n   * const myThing = await t.mockImport<\n   *   typeof import('../my-thing.js')\n   * >('../my-thing.js', {\n   *   some: { tricky: 'mocks' },\n   * })\n   * ```\n   *\n   * @group Spies, Mocks, and Fixtures\n   */\n  async mockImport<T = any>(\n    module: string,\n    mocks: Record<string, any> = {}\n  ): Promise<T> {\n    if (isBuiltin(module)) {\n      this.#t.t.currentAssert = this.mockImport\n      this.#t.t.fail(\n        'Node built-in modules cannot have their imports mocked'\n      )\n      return {} as T\n    }\n    mocks = Object.assign({}, this.#allMock, mocks)\n    if (!this.#didTeardown && this.#t.t.pluginLoaded(AfterPlugin)) {\n      this.#didTeardown = true\n      this.#t.t.teardown(() => this.unmock())\n    }\n    const service = await MockService.create(\n      module,\n      mocks,\n      this.#t.t.mockImport\n    )\n    this.#mocks.push(service)\n    return Promise.resolve(service.module).then(s => import(s))\n  }\n\n  /**\n   * Load the supplied module synchronously using `require()`,\n   * replacing any of the referenced modules with the mocks provided.\n   *\n   * Only works with CommonJS modules.\n   *\n   * For type info, cast using `as typeof import(...)` or use the type\n   * parameter, as TypeScript lacks a way to infer imports dynamically.\n   *\n   * For example:\n   *\n   * ```ts\n   * const myThing = t.mockRequire<\n   *   typeof import('../my-thing.js')\n   * >('../my-thing.js', {\n   *   some: { tricky: 'mocks' },\n   * })\n   * ```\n   *\n   * @group Spies, Mocks, and Fixtures\n   */\n  mockRequire<T = any>(\n    module: string,\n    mocks: Record<string, any> = {}\n  ): T {\n    if (isBuiltin(module)) {\n      this.#t.t.currentAssert = this.mockRequire\n      this.#t.t.fail(\n        'Node built-in modules cannot have their imports mocked'\n      )\n      return {} as T\n    }\n    mocks = Object.assign({}, this.#allMock, mocks)\n    return mockRequire(module, mocks, this.#t.t.mockRequire) as T\n  }\n\n  /**\n   * Set some mocks that will be used for all subsequent\n   * {@link @tapjs/mock!index.TapMock#mockImport} and\n   * {@link @tapjs/mock!index.TapMock#mockRequire} calls made by this test.\n   *\n   * Mocks added with `mockAll` are overridden by any explicit mocks set in the\n   * `t.mockRequire` or `t.mockImport` call.\n   *\n   * Repeated calls to `t.mockAll()` will *add* mocks to the set. If the same\n   * name is used again, it will replace the previous value, not merge.\n   *\n   * If a key is set to `undefined` or `null`, then it will be removed from\n   * the `mockAll` set.\n   *\n   * Reset by calling `t.mockAll(null)`\n   *\n   * Call with no args to return the current `mockAll` object.\n   */\n  mockAll(mocks?: Record<string, any> | null): Record<string, any> {\n    if (mocks === null) this.#allMock = Object.create(null)\n    else if (mocks !== undefined) {\n      this.#allMock = Object.assign(this.#allMock, mocks)\n      for (const [k, v] of Object.entries(this.#allMock)) {\n        if (v === undefined || v === null) delete this.#allMock[k]\n      }\n    }\n    return this.#allMock\n  }\n\n  /**\n   * Unwind the mocks and free up the memory at the end of the test.\n   *\n   * Called automatically if the `@tapjs/after` plugin is not disabled.\n   *\n   * @group Spies, Mocks, and Fixtures\n   */\n  unmock() {\n    for (const m of this.#mocks) {\n      m.unmock()\n    }\n  }\n}\n\n/**\n * Utility type, overrides the properties in B with the properties\n * in O, deeply nested.\n */\nexport type MockedObject<B, O> = O extends Array<any>\n  ? O\n  : B extends { [k: PropertyKey]: any }\n  ? O extends Function\n    ? O\n    : O extends { [k: string]: any }\n    ? {\n        [k in keyof B]: k extends keyof O\n          ? MockedObject<B[k], O[k]>\n          : B[k]\n      }\n    : O\n  : O\n\n/**\n * Loader that supports {@link @tapjs/mock!index.TapMock#mockImport}\n */\nexport const loader = '@tapjs/mock/loader'\n\n/**\n * Importer for use with node --import\n */\nexport const importLoader = '@tapjs/mock/import'\n\n/**\n * plugin method that instantiates {@link @tapjs/mock!index.TapMock}\n */\nexport const plugin: TapPlugin<TapMock> = (t: TestBase) =>\n  new TapMock(t)\n"]}