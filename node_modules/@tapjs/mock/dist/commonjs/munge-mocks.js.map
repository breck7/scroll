{"version":3,"file":"munge-mocks.js","sourceRoot":"","sources":["../../src/munge-mocks.ts"],"names":[],"mappings":";;;AAAA,mCAAkC;AAClC,+BAA0C;AAC1C,4EAAsE;AACtE,6BAAmC;AAEnC,8DAA8D;AAC9D,wDAAwD;AAEjD,MAAM,UAAU,GAAG,CACxB,UAA+B,EAC/B,GAAW,EAC4B,EAAE;IACzC,MAAM,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;IACjC,KAAK,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;QAC/C,MAAM,CAAC,GACL,CAAC,IAAI,OAAO,CAAC,KAAK,QAAQ,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;YAC7C,CAAC,CAAC,CAAC;YACH,CAAC,CAAC,EAAE,OAAO,EAAE,CAAC,EAAE,CAAA;QACpB,IAAI,IAAA,kBAAS,EAAC,CAAC,CAAC,EAAE;YAChB,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;YACZ,qBAAqB;YACrB,IAAI,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE;gBACzB,oBAAoB;gBACpB,MAAM,IAAI,GAAG,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,MAAM,CAAC,CAAA;gBACxC,IAAI,CAAC,CAAC,IAAI,IAAI,UAAU,CAAC,EAAE;oBACzB,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;iBAChB;aACF;iBAAM;gBACL,MAAM,QAAQ,GAAG,QAAQ,CAAC,EAAE,CAAA;gBAC5B,IAAI,CAAC,CAAC,QAAQ,IAAI,UAAU,CAAC,EAAE;oBAC7B,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAA;iBACpB;aACF;SACF;aAAM,IAAI,4BAA4B,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE;YAC/C,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;SACb;aAAM,IAAI,IAAA,uCAAiB,EAAC,CAAC,CAAC,IAAI,IAAA,iBAAU,EAAC,CAAC,CAAC,EAAE;YAChD,KAAK,CAAC,MAAM,CAAC,IAAA,mBAAa,EAAC,IAAA,cAAO,EAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;SAClD;aAAM;YACL,wBAAwB;YACxB,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;SACb;KACF;IACD,OAAO,KAAK,CAAA;AACd,CAAC,CAAA;AAnCY,QAAA,UAAU,cAmCtB","sourcesContent":["import { isBuiltin } from 'module'\nimport { isAbsolute, resolve } from 'path'\nimport { isRelativeRequire } from 'resolve-import/is-relative-require'\nimport { pathToFileURL } from 'url'\n\n// turn all the mocks we get into either the exports provided,\n// if it's an object, or { default: <value> } otherwise.\n\nexport const mungeMocks = (\n  mocksInput: Record<string, any>,\n  dir: string\n): { [k: string]: { [j: string]: any } } => {\n  const mocks = Object.create(null)\n  for (const [k, v] of Object.entries(mocksInput)) {\n    const m =\n      v && typeof v === 'object' && !Array.isArray(v)\n        ? v\n        : { default: v }\n    if (isBuiltin(k)) {\n      mocks[k] = m\n      /* c8 ignore start */\n      if (k.startsWith('node:')) {\n        /* c8 ignore stop */\n        const bare = k.substring('node:'.length)\n        if (!(bare in mocksInput)) {\n          mocks[bare] = m\n        }\n      } else {\n        const prefixed = `node:${k}`\n        if (!(prefixed in mocksInput)) {\n          mocks[prefixed] = m\n        }\n      }\n    } else if (/^(file:\\/\\/\\/|https?:\\/\\/)/.test(k)) {\n      mocks[k] = m\n    } else if (isRelativeRequire(k) || isAbsolute(k)) {\n      mocks[String(pathToFileURL(resolve(dir, k)))] = m\n    } else {\n      // absolute package name\n      mocks[k] = m\n    }\n  }\n  return mocks\n}\n"]}