{"version":3,"file":"deserialize.js","sourceRoot":"","sources":["../../src/deserialize.ts"],"names":[],"mappings":"AAAA,yEAAyE;AACzE,0EAA0E;AAC1E,OAAO,EAAE,WAAW,EAAE,MAAM,IAAI,CAAA;AAChC,OAAO,EACL,MAAM,EACN,sBAAsB,EACtB,eAAe,EACf,gBAAgB,EAChB,gBAAgB,EAChB,iBAAiB,GAClB,MAAM,gBAAgB,CAAA;AAEvB,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAAC,KAAa,EAAE,EAAE;IAChD,QAAQ,KAAK,CAAC,CAAC,CAAC,EAAE;QAChB,KAAK,gBAAgB,CAAC,CAAC;YACrB,mBAAmB;YACnB,MAAM,EAAE,UAAU,EAAE,WAAW,EAAE,GAAG,WAAW,CAC7C,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAClB,CAAA;YACD,MAAM,IAAI,GAAG,MAAM,CAAC,WAAkC,CAAC,CAAA;YACvD,IAAI,OAAO,IAAI,UAAU,IAAI,OAAO,IAAI,UAAU,CAAC,KAAK,EAAE;gBACxD,UAAU,CAAC,KAAK,CAAC,KAAK,GAAG,gBAAgB,CACvC,UAAU,CAAC,KAAK,CAAC,KAAK,CACvB,CAAA;aACF;YACD,OAAO,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,UAAU,CAAC,CAAA;SACjD;QACD,KAAK,iBAAiB,CAAC,CAAC;YACtB,OAAO,WAAW,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAA;SACtC;QACD,KAAK,eAAe,CAAC,CAAC;YACpB,OAAO,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAA;SAC1C;QACD,KAAK,gBAAgB,CAAC,CAAC;YACrB,OAAO,MAAM,CAAC,GAAG,CACf,KAAK;iBACF,QAAQ,CAAC,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;iBAChD,QAAQ,EAAE,CACd,CAAA;SACF;QACD,KAAK,sBAAsB,CAAC,CAAC;YAC3B,MAAM,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAA;YACtC,OAAO,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE;gBACxC,CAAC,MAAM,CAAC,GAAG,CAAC,4BAA4B,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;aACpD,CAAC,CAAA;SACH;KACF;AACH,CAAC,CAAA","sourcesContent":["// This module is more or less a direct port of the deserialization logic\n// from node's lib/internal/error_serdes module, with primordials removed.\nimport { deserialize } from 'v8'\nimport {\n  errors,\n  kCustomInspectedObject,\n  kInspectedError,\n  kInspectedSymbol,\n  kSerializedError,\n  kSerializedObject,\n} from './constants.js'\n\nexport const deserializeError = (error: Buffer) => {\n  switch (error[0]) {\n    case kSerializedError: {\n      // serialized Error\n      const { properties, constructor } = deserialize(\n        error.subarray(1)\n      )\n      const ctor = errors[constructor as keyof typeof errors]\n      if ('cause' in properties && 'value' in properties.cause) {\n        properties.cause.value = deserializeError(\n          properties.cause.value\n        )\n      }\n      return Object.create(ctor.prototype, properties)\n    }\n    case kSerializedObject: {\n      return deserialize(error.subarray(1))\n    }\n    case kInspectedError: {\n      return error.subarray(1).toString('utf8')\n    }\n    case kInspectedSymbol: {\n      return Symbol.for(\n        error\n          .subarray(1 + 'Symbol('.length, error.length - 1)\n          .toString()\n      )\n    }\n    case kCustomInspectedObject: {\n      const s = error.subarray(1).toString()\n      return Object.assign(Object.create(null), {\n        [Symbol.for('nodejs.util.inspect.custom')]: () => s,\n      })\n    }\n  }\n}\n"]}