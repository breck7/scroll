{"version":3,"file":"test-stream-serialize.js","sourceRoot":"","sources":["../../src/test-stream-serialize.ts"],"names":[],"mappings":"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","sourcesContent":["import { Minipass } from 'minipass'\nimport { DefaultSerializer } from 'v8'\nimport {\n  kSerializedSizeHeader,\n  kV8HeaderLength,\n} from './constants.js'\nimport {\n  FailData,\n  isMessageFail,\n  Message,\n  MessageFail,\n  NamedNestedLocation,\n  PassData,\n  PlanData,\n  StringData,\n} from './messages.js'\nimport { serializeError } from './serialize.js'\nexport * from './messages.js'\n\nexport class TestStreamSerialize extends Minipass<Buffer> {\n  #serializer: DefaultSerializer = new DefaultSerializer()\n\n  constructor() {\n    super()\n    this.writable = false\n  }\n\n  diagnostic(data: DiagnosticData) {\n    this.#write({ type: 'test:diagnostic', data })\n  }\n  dequeue(data: NamedNestedLocation) {\n    this.#write({ type: 'test:dequeue', data })\n  }\n  enqueue(data: NamedNestedLocation) {\n    this.#write({ type: 'test:enqueue', data })\n  }\n  fail(data: FailData) {\n    this.#write({ type: 'test:fail', data })\n  }\n  pass(data: PassData) {\n    this.#write({ type: 'test:pass', data })\n  }\n  plan(data: PlanData) {\n    this.#write({ type: 'test:plan', data })\n  }\n  start(data: NamedNestedLocation) {\n    this.#write({ type: 'test:start', data })\n  }\n  stderr(data: StringData) {\n    this.#write({ type: 'test:stderr', data })\n  }\n  stdout(data: StringData) {\n    this.#write({ type: 'test:stdout', data })\n  }\n\n  #write(item: Message) {\n    let originalError: undefined | (Error & { cause?: any })\n    if (\n      isMessageFail(item) &&\n      item.data.details.error !== undefined\n    ) {\n      originalError = item.data.details.error\n      Object.assign(item.data.details, {\n        error: serializeError(originalError),\n      })\n    }\n\n    this.#serializer.writeHeader()\n    // Add 4 bytes, to later populate with message length\n    this.#serializer.writeRawBytes(Buffer.allocUnsafe(4))\n    this.#serializer.writeHeader()\n    this.#serializer.writeValue(item)\n\n    if (originalError !== undefined) {\n      Object.assign((item as MessageFail).data.details, {\n        error: originalError,\n      })\n    }\n    const serializedMessage = this.#serializer.releaseBuffer()\n    const serializedMessageLength =\n      serializedMessage.length - kSerializedSizeHeader\n\n    serializedMessage.set(\n      [\n        (serializedMessageLength >> 24) & 0xff,\n        (serializedMessageLength >> 16) & 0xff,\n        (serializedMessageLength >> 8) & 0xff,\n        serializedMessageLength & 0xff,\n      ],\n      kV8HeaderLength\n    )\n    super.write(serializedMessage)\n  }\n\n  //@ts-ignore\n  write() {\n    throw new Error('not directly writable, use message methods')\n  }\n}\n"]}