{"version":3,"file":"serialize.js","sourceRoot":"","sources":["../../src/serialize.ts"],"names":[],"mappings":"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","sourcesContent":["// This module is more or less a direct port of the serialization logic\n// from node's lib/internal/error_serdes module, with primordials removed.\nimport {\n  errorCtorNames,\n  kCustomInspect,\n  kCustomInspectedObject,\n  kInspectedError,\n  kInspectedSymbol,\n  kSerializedError,\n  kSerializedObject,\n} from './constants.js'\n\nimport { inspect } from 'node:util'\nimport { serialize } from 'v8'\n\nconst getAllProps = (obj: any, target = obj) => {\n  const all = Object.create(null)\n  if (obj === null) return all\n  Object.assign(all, getAllProps(Object.getPrototypeOf(obj), target))\n  const keys = Object.getOwnPropertyNames(obj)\n  for (const key of keys) {\n    const desc = Object.getOwnPropertyDescriptor(obj, key)\n    /* c8 ignore start */\n    if (!desc) continue\n    /* c8 ignore stop */\n    const getter = desc.get\n    if (getter) {\n      try {\n        delete desc.get\n        delete desc.set\n        desc.value = getter.call(target)\n      } catch {}\n    }\n    if (key === 'cause') {\n      desc.value = serializeError(desc.value)\n      all.cause = desc\n    } else if (\n      'value' in desc &&\n      typeof desc.value !== 'function' &&\n      typeof desc.value !== 'symbol'\n    ) {\n      all[key] = desc\n    }\n  }\n  return all\n}\n\nconst isError = (obj: any): obj is Error =>\n  typeof obj === 'object' &&\n  Object.prototype.toString.call(obj) === '[object Error]'\n\nconst getCtors = (obj: any) => {\n  const ctors: Function[] = []\n  for (\n    let cur = obj;\n    cur !== null;\n    cur = Object.getPrototypeOf(cur)\n  ) {\n    const desc = Object.getOwnPropertyDescriptor(cur, 'constructor')\n    const value = desc?.value\n    if (typeof value === 'function') {\n      ctors.push(value)\n    }\n  }\n  return ctors\n}\n\nconst getName = (f: Function): string | undefined => {\n  const n = Object.getOwnPropertyDescriptor(f, 'name')?.value\n  if (typeof n === 'string') return n\n}\n\nexport const serializeError = (er: unknown) => {\n  if (typeof er === 'symbol') {\n    return Buffer.from(\n      String.fromCharCode(kInspectedSymbol) + String(er),\n      'utf8'\n    )\n  }\n  try {\n    if (isError(er)) {\n      const ctors = getCtors(er)\n      for (const c of ctors) {\n        const name = getName(c)\n        if (name && errorCtorNames.has(name)) {\n          const serialized = serialize({\n            constructor: name,\n            properties: getAllProps(er),\n          })\n          return Buffer.concat([\n            Buffer.from([kSerializedError]),\n            serialized,\n          ])\n        }\n      }\n      /* c8 ignore start */\n    }\n  } catch {}\n  /* c8 ignore stop */\n  try {\n    if (\n      er !== null &&\n      er !== undefined &&\n      kCustomInspect in (er as {})\n    ) {\n      return Buffer.from(\n        String.fromCharCode(kCustomInspectedObject) + inspect(er),\n        'utf8'\n      )\n    }\n  } catch {}\n  try {\n    const serialized = serialize(er)\n    return Buffer.concat([\n      Buffer.from([kSerializedObject]),\n      serialized,\n    ])\n  } catch {}\n  return Buffer.from(\n    String.fromCharCode(kInspectedError) + inspect(er),\n    'utf8'\n  )\n}\n"]}