{"version":3,"file":"messages.js","sourceRoot":"","sources":["../../src/messages.ts"],"names":[],"mappings":";;;AA6GA,MAAM,UAAU,GAAG,CAAC,CAAU,EAAkC,EAAE,CAChE,CAAC,CAAE,CAA+B,CAAC,IAAI,CAAC,OAAO,CAAA;AAC1C,MAAM,aAAa,GAAG,CAAC,CAAU,EAAoB,EAAE;IAC5D,OAAO,CACL,CAAC,CAAC,IAAI,KAAK,WAAW;QACtB,UAAU,CAAC,CAAC,CAAC;QACb,OAAO,IAAI,CAAC,CAAC,IAAI,CAAC,OAAO,CAC1B,CAAA;AACH,CAAC,CAAA;AANY,QAAA,aAAa,iBAMzB","sourcesContent":["// These will all be undefined if the t.options.at is null, or not a file\nexport type Location = {\n  file?: string\n  line?: number\n  column?: number\n}\n\nexport interface StringData extends Location {\n  message: string\n}\n\nexport interface NestedLocation extends Location {\n  nesting: number\n}\n\nexport type DiagnosticData = StringData & NestedLocation\n\nexport interface NamedNestedLocation extends NestedLocation {\n  name: string\n}\n\nexport interface PlanData extends NestedLocation {\n  count: number\n}\n\nexport interface ResultsDataDetails {\n  duration_ms: number\n  type?: 'suite'\n  error?: Buffer | (Error & { cause?: any })\n}\nexport type PassDataDetails = ResultsDataDetails & {\n  error?: undefined\n}\n\nexport interface FailDataDetails extends ResultsDataDetails {\n  error: Error & { cause?: any }\n}\nexport interface FailDataDetailsSerialized\n  extends ResultsDataDetails {\n  error: Buffer\n}\n\nexport interface TestData extends NamedNestedLocation {\n  details: PassDataDetails | FailDataDetails\n  testNumber: number\n  todo?: string | boolean\n  skip?: string | boolean\n}\nexport type PassData = TestData & { details: PassDataDetails }\nexport type FailData = TestData & {\n  details: FailDataDetails\n}\n\nexport type MessageDequeue = {\n  type: 'test:dequeue'\n  data: NamedNestedLocation\n}\n\nexport type MessageDiagnostic = {\n  type: 'test:diagnostic'\n  data: DiagnosticData\n}\n\nexport type MessageEnqueue = {\n  type: 'test:enqueue'\n  data: NamedNestedLocation\n}\n\nexport type MessageFail = {\n  type: 'test:fail'\n  data: FailData\n}\n\nexport type MessagePass = {\n  type: 'test:pass'\n  data: PassData\n}\n\nexport type MessagePlan = {\n  type: 'test:plan'\n  data: PlanData\n}\n\nexport type MessageStart = {\n  type: 'test:start'\n  data: NamedNestedLocation\n}\n\nexport type MessageStderr = {\n  type: 'test:stderr'\n  data: StringData\n}\n\nexport type MessageStdout = {\n  type: 'test:stdout'\n  data: StringData\n}\n\nexport type Message =\n  | MessageDiagnostic\n  | MessageEnqueue\n  | MessageDequeue\n  | MessageStart\n  | MessageFail\n  | MessagePass\n  | MessagePlan\n  | MessageStderr\n  | MessageStdout\n\nconst hasDetails = (m: Message): m is MessagePass | MessageFail =>\n  !!(m as MessagePass | MessageFail).data.details\nexport const isMessageFail = (m: Message): m is MessageFail => {\n  return (\n    m.type === 'test:fail' &&\n    hasDetails(m) &&\n    'error' in m.data.details\n  )\n}\n"]}