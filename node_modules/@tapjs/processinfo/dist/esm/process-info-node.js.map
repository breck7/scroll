{"version":3,"file":"process-info-node.js","sourceRoot":"","sources":["../../src/process-info-node.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ProcessInfo } from './index.js'\n\nexport interface ProcessInfoNodeData {\n  // set initially, but deleted before it is written\n  hrstart?: [number, number]\n\n  // always set\n  date: string\n  argv: string[]\n  execArgv: string[]\n  NODE_OPTIONS?: string\n  cwd: string\n  pid: number\n  ppid: number\n  parent: string | null\n  uuid: string\n  files: string[]\n  sources: Record<string, string[]>\n\n  // fields that are only set when the process completes\n  root?: string | null\n  externalID?: string | null\n  code?: number | null\n  signal?: NodeJS.Signals | null\n  runtime?: number\n  globalsAdded?: string[]\n}\n\nexport class ProcessInfoNode {\n  date!: string\n  argv!: string[]\n  execArgv!: string[]\n  NODE_OPTIONS?: string\n  cwd!: string\n  pid!: number\n  ppid!: number\n  uuid!: string\n  code?: number | null\n  signal?: NodeJS.Signals | null\n  runtime?: number\n  globalsAdded?: string[]\n  files: string[] = []\n  sources: Record<string, string[]> = Object.create(null)\n  parent?: ProcessInfoNode | null = null\n  root?: ProcessInfoNode | null = null\n  children?: Set<ProcessInfoNode> | null = null\n  descendants: Set<ProcessInfoNode> | null = null\n  externalID: string | null = null\n\n  #data: ProcessInfoNodeData\n\n  constructor(data: ProcessInfoNodeData) {\n    this.#data = data\n    Object.assign(this, data)\n  }\n\n  toJSON() {\n    return Object.fromEntries(\n      Object.entries(this)\n        .filter(([_, val]) => val !== null && val !== undefined)\n        .map(([key, val]) =>\n          val instanceof ProcessInfoNode\n            ? [key, val.uuid]\n            : key === 'children' || key === 'descendants'\n            ? [key, [...val].map(c => c.uuid)]\n            : [key, val]\n        )\n    )\n  }\n\n  link(db: ProcessInfo) {\n    db.uuids.set(this.uuid, this)\n    if (this.#data.parent) {\n      this.parent = db.uuids.get(this.#data.parent) || this.parent\n    }\n    if (this.#data.root) {\n      this.root = db.uuids.get(this.#data.root) ?? this.root\n    }\n\n    if (this.parent === null) {\n      this.root = this\n      const pendingRoot = db.pendingRoot.get(this.uuid)\n      if (pendingRoot) {\n        this.descendants = pendingRoot\n        for (const n of pendingRoot) {\n          n.root = this\n        }\n        db.pendingRoot.delete(this.uuid)\n      }\n      db.roots.add(this)\n    } else if (typeof this.root === 'string') {\n      const pendingRoot = db.pendingRoot.get(this.root)\n      if (pendingRoot) {\n        pendingRoot.add(this)\n      } else {\n        db.pendingRoot.set(this.root, new Set([this]))\n      }\n    } else if (this.root) {\n      this.root.descendants ??= new Set()\n      this.root.descendants.add(this)\n    }\n\n    if (typeof this.parent === 'string') {\n      const pendingParent = db.pendingParent.get(this.parent)\n      if (pendingParent) {\n        pendingParent.add(this)\n      } else {\n        db.pendingParent.set(this.parent, new Set([this]))\n      }\n    } else if (this.parent) {\n      if (!this.parent.children) {\n        this.parent.children = new Set([this])\n      } else {\n        this.parent.children.add(this)\n      }\n    }\n\n    const pendingParent = db.pendingParent.get(this.uuid)\n    if (pendingParent) {\n      this.children = pendingParent\n      for (const n of this.children) {\n        n.parent = this\n      }\n      db.pendingParent.delete(this.uuid)\n    }\n\n    for (const f of this.files as string[]) {\n      const files = db.files.get(f)\n      if (!files) {\n        db.files.set(f, new Set<ProcessInfoNode>([this]))\n      } else {\n        files.add(this)\n      }\n    }\n\n    if (this.externalID) {\n      // newer tagged entry wins\n      const e = db.externalIDs.get(this.externalID)\n      if (e && Date.parse(e.date) > Date.parse(this.date)) {\n        return\n      }\n      db.externalIDs.set(this.externalID, this)\n    }\n  }\n}\n"]}