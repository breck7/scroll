{"version":3,"file":"child_process.js","sourceRoot":"","sources":["../../src/child_process.ts"],"names":[],"mappings":"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","sourcesContent":["// This wraps all of the various spawn methods such that externalID can be\n// set in the options, and ensuring that the proper envs get set.\nimport {\n  ChildProcess,\n  ChildProcessByStdio,\n  ChildProcessWithoutNullStreams,\n  exec as cpExec,\n  ExecException,\n  execFile as cpExecFile,\n  ExecFileException,\n  ExecFileOptions,\n  ExecFileOptionsWithBufferEncoding,\n  ExecFileOptionsWithOtherEncoding,\n  ExecFileOptionsWithStringEncoding,\n  execFileSync as cpExecFileSync,\n  ExecFileSyncOptions,\n  ExecFileSyncOptionsWithBufferEncoding,\n  ExecFileSyncOptionsWithStringEncoding,\n  ExecOptions,\n  execSync as cpExecSync,\n  ExecSyncOptions,\n  ExecSyncOptionsWithBufferEncoding,\n  ExecSyncOptionsWithStringEncoding,\n  fork as cpFork,\n  ForkOptions,\n  PromiseWithChild,\n  spawn as cpSpawn,\n  SpawnOptions,\n  SpawnOptionsWithoutStdio,\n  SpawnOptionsWithStdioTuple,\n  spawnSync as cpSpawnSync,\n  SpawnSyncOptions,\n  SpawnSyncOptionsWithBufferEncoding,\n  SpawnSyncOptionsWithStringEncoding,\n  SpawnSyncReturns,\n  StdioNull,\n  StdioPipe,\n} from 'child_process'\nimport type { ObjectEncodingOptions } from 'fs'\nimport type { Readable, Writable } from 'stream'\nimport { getExclude } from './get-exclude.js'\nimport { spawnOpts, WithExternalID } from './spawn-opts.js'\n\nconst promisify = Symbol.for('nodejs.util.promisify.custom')\n\n// pull the old __promisify__ out of node's declared namespaces\ntype CP<T extends { __promisify__: any }> = T & {\n  [promisify]: T['__promisify__']\n}\ntype OldCP = { __promisify__: (...a: any) => any }\nconst customPromisify = <T extends OldCP>(e: T) =>\n  // the node types list it as __promisify__ but it's actually the symbol\n  /* c8 ignore start */\n  (e as CP<T>)[promisify] || e.__promisify__\n/* c8 ignore stop */\n\nconst k = '_TAPJS_PROCESSINFO_EXCLUDE_'\n\n// coercion function when we know it's an array or something else\nconst isNotArray = <T extends { [k: string]: any }>(o: any): o is T =>\n  !!o && typeof o === 'object' && !Array.isArray(o)\n\nexport function spawn(\n  command: string,\n  options?: WithExternalID<SpawnOptionsWithoutStdio>\n): ChildProcessWithoutNullStreams\nexport function spawn(\n  command: string,\n  options: WithExternalID<\n    SpawnOptionsWithStdioTuple<StdioPipe, StdioPipe, StdioPipe>\n  >\n): ChildProcessByStdio<Writable, Readable, Readable>\nexport function spawn(\n  command: string,\n  options: WithExternalID<\n    SpawnOptionsWithStdioTuple<StdioPipe, StdioPipe, StdioNull>\n  >\n): ChildProcessByStdio<Writable, Readable, null>\nexport function spawn(\n  command: string,\n  options: WithExternalID<\n    SpawnOptionsWithStdioTuple<StdioPipe, StdioNull, StdioPipe>\n  >\n): ChildProcessByStdio<Writable, null, Readable>\nexport function spawn(\n  command: string,\n  options: WithExternalID<\n    SpawnOptionsWithStdioTuple<StdioNull, StdioPipe, StdioPipe>\n  >\n): ChildProcessByStdio<null, Readable, Readable>\nexport function spawn(\n  command: string,\n  options: WithExternalID<\n    SpawnOptionsWithStdioTuple<StdioPipe, StdioNull, StdioNull>\n  >\n): ChildProcessByStdio<Writable, null, null>\nexport function spawn(\n  command: string,\n  options: WithExternalID<\n    SpawnOptionsWithStdioTuple<StdioNull, StdioPipe, StdioNull>\n  >\n): ChildProcessByStdio<null, Readable, null>\nexport function spawn(\n  command: string,\n  options: WithExternalID<\n    SpawnOptionsWithStdioTuple<StdioNull, StdioNull, StdioPipe>\n  >\n): ChildProcessByStdio<null, null, Readable>\nexport function spawn(\n  command: string,\n  options: WithExternalID<\n    SpawnOptionsWithStdioTuple<StdioNull, StdioNull, StdioNull>\n  >\n): ChildProcessByStdio<null, null, null>\nexport function spawn(\n  command: string,\n  options: WithExternalID<SpawnOptions>\n): ChildProcess\nexport function spawn(\n  command: string,\n  args?: ReadonlyArray<string>,\n  options?: SpawnOptionsWithoutStdio\n): ChildProcessWithoutNullStreams\nexport function spawn(\n  command: string,\n  args: ReadonlyArray<string>,\n  options: SpawnOptionsWithStdioTuple<StdioPipe, StdioPipe, StdioPipe>\n): ChildProcessByStdio<Writable, Readable, Readable>\nexport function spawn(\n  command: string,\n  args: ReadonlyArray<string>,\n  options: SpawnOptionsWithStdioTuple<StdioPipe, StdioPipe, StdioNull>\n): ChildProcessByStdio<Writable, Readable, null>\nexport function spawn(\n  command: string,\n  args: ReadonlyArray<string>,\n  options: SpawnOptionsWithStdioTuple<StdioPipe, StdioNull, StdioPipe>\n): ChildProcessByStdio<Writable, null, Readable>\nexport function spawn(\n  command: string,\n  args: ReadonlyArray<string>,\n  options: SpawnOptionsWithStdioTuple<StdioNull, StdioPipe, StdioPipe>\n): ChildProcessByStdio<null, Readable, Readable>\nexport function spawn(\n  command: string,\n  args: ReadonlyArray<string>,\n  options: SpawnOptionsWithStdioTuple<StdioPipe, StdioNull, StdioNull>\n): ChildProcessByStdio<Writable, null, null>\nexport function spawn(\n  command: string,\n  args: ReadonlyArray<string>,\n  options: SpawnOptionsWithStdioTuple<StdioNull, StdioPipe, StdioNull>\n): ChildProcessByStdio<null, Readable, null>\nexport function spawn(\n  command: string,\n  args: ReadonlyArray<string>,\n  options: SpawnOptionsWithStdioTuple<StdioNull, StdioNull, StdioPipe>\n): ChildProcessByStdio<null, null, Readable>\nexport function spawn(\n  command: string,\n  args: ReadonlyArray<string>,\n  options: SpawnOptionsWithStdioTuple<StdioNull, StdioNull, StdioNull>\n): ChildProcessByStdio<null, null, null>\nexport function spawn(\n  command: string,\n  args: ReadonlyArray<string>,\n  options: SpawnOptions\n): ChildProcess\n\nexport function spawn(\n  cmd: string,\n  args?:\n    | ReadonlyArray<string>\n    | WithExternalID<SpawnOptions>\n    | WithExternalID<SpawnOptionsWithoutStdio>\n    | WithExternalID<\n        SpawnOptionsWithStdioTuple<\n          StdioNull | StdioPipe,\n          StdioNull | StdioPipe,\n          StdioNull | StdioPipe\n        >\n      >,\n  options?:\n    | WithExternalID<SpawnOptions>\n    | WithExternalID<SpawnOptionsWithoutStdio>\n    | WithExternalID<\n        SpawnOptionsWithStdioTuple<\n          StdioNull | StdioPipe,\n          StdioNull | StdioPipe,\n          StdioNull | StdioPipe\n        >\n      >\n): ChildProcess | ChildProcessWithoutNullStreams {\n  if (isNotArray<SpawnOptions>(args)) {\n    options = args\n    args = []\n  }\n  return cpSpawn(cmd, args || [], spawnOpts(options || {}, getExclude(k), args))\n}\n\nexport function spawnSync(command: string): SpawnSyncReturns<Buffer>\nexport function spawnSync(\n  command: string,\n  options: WithExternalID<SpawnSyncOptionsWithStringEncoding>\n): SpawnSyncReturns<string>\nexport function spawnSync(\n  command: string,\n  options: WithExternalID<SpawnSyncOptionsWithBufferEncoding>\n): SpawnSyncReturns<Buffer>\nexport function spawnSync(\n  command: string,\n  options?: WithExternalID<SpawnSyncOptions>\n): SpawnSyncReturns<string | Buffer>\nexport function spawnSync(\n  command: string,\n  args: ReadonlyArray<string>\n): SpawnSyncReturns<Buffer>\nexport function spawnSync(\n  command: string,\n  args: ReadonlyArray<string>,\n  options: WithExternalID<SpawnSyncOptionsWithStringEncoding>\n): SpawnSyncReturns<string>\nexport function spawnSync(\n  command: string,\n  args: ReadonlyArray<string>,\n  options: WithExternalID<SpawnSyncOptionsWithBufferEncoding>\n): SpawnSyncReturns<Buffer>\nexport function spawnSync(\n  command: string,\n  args?: ReadonlyArray<string>,\n  options?: WithExternalID<SpawnSyncOptions>\n): SpawnSyncReturns<string | Buffer>\n\nexport function spawnSync(\n  cmd: string,\n  args?:\n    | WithExternalID<SpawnSyncOptionsWithStringEncoding>\n    | WithExternalID<SpawnSyncOptionsWithBufferEncoding>\n    | WithExternalID<SpawnSyncOptions>\n    | ReadonlyArray<string>,\n  options?:\n    | WithExternalID<SpawnSyncOptionsWithStringEncoding>\n    | WithExternalID<SpawnSyncOptionsWithBufferEncoding>\n    | WithExternalID<SpawnSyncOptions>\n) {\n  if (isNotArray<SpawnSyncOptions>(args)) {\n    options = args\n    args = []\n  }\n  return cpSpawnSync(\n    cmd,\n    args || [],\n    spawnOpts(options || {}, getExclude(k), args)\n  )\n}\n\nexport type ExecArgs =\n  | [\n      command: string,\n      callback?: (\n        error: ExecException | null,\n        stdout: string,\n        stderr: string\n      ) => void\n    ]\n  | [\n      command: string,\n      options: WithExternalID<\n        {\n          encoding: 'buffer' | null\n        } & ExecOptions\n      >,\n      callback?: (\n        error: ExecException | null,\n        stdout: Buffer,\n        stderr: Buffer\n      ) => void\n    ]\n  | [\n      command: string,\n      options: WithExternalID<\n        {\n          encoding: BufferEncoding\n        } & ExecOptions\n      >,\n      callback?: (\n        error: ExecException | null,\n        stdout: string,\n        stderr: string\n      ) => void\n    ]\n  | [\n      command: string,\n      options: WithExternalID<\n        {\n          encoding: BufferEncoding\n        } & ExecOptions\n      >,\n      callback?: (\n        error: ExecException | null,\n        stdout: string | Buffer,\n        stderr: string | Buffer\n      ) => void\n    ]\n  | [\n      command: string,\n      options: WithExternalID<ExecOptions>,\n      callback?: (\n        error: ExecException | null,\n        stdout: string,\n        stderr: string\n      ) => void\n    ]\n  | [\n      command: string,\n      options:\n        | WithExternalID<ObjectEncodingOptions & ExecOptions>\n        | undefined\n        | null,\n      callback?: (\n        error: ExecException | null,\n        stdout: string | Buffer,\n        stderr: string | Buffer\n      ) => void\n    ]\nexport function exec(...args: ExecArgs): ChildProcess {\n  const [cmd, options, callback] = args\n  if (typeof options === 'function') {\n    return cpExec(cmd, spawnOpts<ExecOptions>({}, getExclude(k), []), options)\n  } else if (!options) {\n    return cpExec(\n      cmd,\n      spawnOpts<ExecOptions>({}, getExclude(k), []),\n      callback as (\n        error: ExecException | null,\n        stdout: string | Buffer,\n        stderr: string | Buffer\n      ) => void\n    )\n  }\n\n  return cpExec(\n    cmd,\n    spawnOpts(options, getExclude(k), []),\n    callback as (\n      error: ExecException | null,\n      stdout: string | Buffer,\n      stderr: string | Buffer\n    ) => void\n  )\n}\n\nexport namespace exec {\n  export function __promisify__(command: string): PromiseWithChild<{\n    stdout: string\n    stderr: string\n  }>\n  export function __promisify__(\n    command: string,\n    options: WithExternalID<\n      {\n        encoding: 'buffer' | null\n      } & ExecOptions\n    >\n  ): PromiseWithChild<{\n    stdout: Buffer\n    stderr: Buffer\n  }>\n  export function __promisify__(\n    command: string,\n    options: WithExternalID<\n      {\n        encoding: BufferEncoding\n      } & ExecOptions\n    >\n  ): PromiseWithChild<{\n    stdout: string\n    stderr: string\n  }>\n  export function __promisify__(\n    command: string,\n    options: WithExternalID<ExecOptions>\n  ): PromiseWithChild<{\n    stdout: string\n    stderr: string\n  }>\n  export function __promisify__(\n    command: string,\n    options?: WithExternalID<ObjectEncodingOptions & ExecOptions> | null\n  ): PromiseWithChild<{\n    stdout: string | Buffer\n    stderr: string | Buffer\n  }>\n  export function __promisify__(\n    command: string,\n    options?:\n      | WithExternalID<\n          {\n            encoding: 'buffer' | null\n          } & ExecOptions\n        >\n      | WithExternalID<\n          {\n            encoding: BufferEncoding\n          } & ExecOptions\n        >\n      | WithExternalID<ExecOptions>\n      | WithExternalID<ObjectEncodingOptions & ExecOptions>\n      | null\n  ): PromiseWithChild<{\n    stdout: string | Buffer\n    stderr: string | Buffer\n  }> {\n    return customPromisify(cpExec)(\n      command,\n      spawnOpts(options || {}, getExclude(k))\n    )\n  }\n\n  Object.assign(exec, { [promisify]: __promisify__ })\n  /* c8 ignore start */\n}\n/* c8 ignore stop */\n\nexport function execSync(command: string): Buffer\nexport function execSync(\n  command: string,\n  options: WithExternalID<ExecSyncOptionsWithStringEncoding>\n): string\nexport function execSync(\n  command: string,\n  options: WithExternalID<ExecSyncOptionsWithBufferEncoding>\n): Buffer\nexport function execSync(\n  command: string,\n  options?: WithExternalID<ExecSyncOptions>\n): string | Buffer\nexport function execSync(\n  cmd: string,\n  options?:\n    | WithExternalID<ExecSyncOptions>\n    | WithExternalID<ExecSyncOptionsWithBufferEncoding>\n    | WithExternalID<ExecSyncOptionsWithStringEncoding>\n    | WithExternalID<ExecSyncOptionsWithBufferEncoding>\n): string | Buffer {\n  return cpExecSync(\n    cmd,\n    spawnOpts<ExecSyncOptions>(options || {}, getExclude(k))\n  )\n}\n\nexport type ExecFileArgs =\n  | []\n  | [\n      options:\n        | WithExternalID<ObjectEncodingOptions & ExecFileOptions>\n        | undefined\n        | null\n    ]\n  | [args?: ReadonlyArray<string> | null]\n  | [\n      args: ReadonlyArray<string> | undefined | null,\n      options:\n        | WithExternalID<ObjectEncodingOptions & ExecFileOptions>\n        | undefined\n        | null\n    ]\n  | [\n      callback: (\n        error: ExecFileException | null,\n        stdout: string,\n        stderr: string\n      ) => void\n    ]\n  | [\n      args: ReadonlyArray<string> | undefined | null,\n      callback: (\n        error: ExecFileException | null,\n        stdout: string,\n        stderr: string\n      ) => void\n    ]\n  | [\n      options: WithExternalID<ExecFileOptionsWithBufferEncoding>,\n      callback: (\n        error: ExecFileException | null,\n        stdout: Buffer,\n        stderr: Buffer\n      ) => void\n    ]\n  | [\n      args: ReadonlyArray<string> | undefined | null,\n      options: WithExternalID<ExecFileOptionsWithBufferEncoding>,\n      callback: (\n        error: ExecFileException | null,\n        stdout: Buffer,\n        stderr: Buffer\n      ) => void\n    ]\n  | [\n      options: WithExternalID<ExecFileOptionsWithStringEncoding>,\n      callback: (\n        error: ExecFileException | null,\n        stdout: string,\n        stderr: string\n      ) => void\n    ]\n  | [\n      args: ReadonlyArray<string> | undefined | null,\n      options: WithExternalID<ExecFileOptionsWithStringEncoding>,\n      callback: (\n        error: ExecFileException | null,\n        stdout: string,\n        stderr: string\n      ) => void\n    ]\n  | [\n      options: WithExternalID<ExecFileOptionsWithOtherEncoding>,\n      callback: (\n        error: ExecFileException | null,\n        stdout: string | Buffer,\n        stderr: string | Buffer\n      ) => void\n    ]\n  | [\n      args: ReadonlyArray<string> | undefined | null,\n      options: WithExternalID<ExecFileOptionsWithOtherEncoding>,\n      callback: (\n        error: ExecFileException | null,\n        stdout: string | Buffer,\n        stderr: string | Buffer\n      ) => void\n    ]\n  | [\n      options: WithExternalID<ExecFileOptions>,\n      callback: (\n        error: ExecFileException | null,\n        stdout: string,\n        stderr: string\n      ) => void\n    ]\n  | [\n      args: ReadonlyArray<string> | undefined | null,\n      options: WithExternalID<ExecFileOptions>,\n      callback: (\n        error: ExecFileException | null,\n        stdout: string,\n        stderr: string\n      ) => void\n    ]\n  | [\n      options:\n        | WithExternalID<ObjectEncodingOptions & ExecFileOptions>\n        | undefined\n        | null,\n      callback:\n        | ((\n            error: ExecFileException | null,\n            stdout: string | Buffer,\n            stderr: string | Buffer\n          ) => void)\n        | undefined\n        | null\n    ]\n  | [\n      args: ReadonlyArray<string> | undefined | null,\n      options:\n        | WithExternalID<ObjectEncodingOptions & ExecFileOptions>\n        | undefined\n        | null,\n      callback:\n        | ((\n            error: ExecFileException | null,\n            stdout: string | Buffer,\n            stderr: string | Buffer\n          ) => void)\n        | undefined\n        | null\n    ]\nexport function execFile(\n  file: string,\n  ...execFileArgs: ExecFileArgs\n): ChildProcess {\n  let args = []\n  let options: WithExternalID<ObjectEncodingOptions & ExecFileOptions> = {}\n  let callback: ((...a: any) => any) | undefined = undefined\n  for (const arg of execFileArgs) {\n    if (Array.isArray(arg)) {\n      args = arg\n    } else if (\n      arg &&\n      typeof arg === 'object' &&\n      isNotArray<WithExternalID<ObjectEncodingOptions & ExecFileOptions>>(\n        arg\n      )\n    ) {\n      options = arg\n    } else if (typeof arg === 'function') {\n      callback = arg\n    }\n  }\n  return cpExecFile(\n    file,\n    args,\n    spawnOpts(options, getExclude(k), args),\n    callback\n  )\n}\n\nexport namespace execFile {\n  export function __promisify__(file: string): PromiseWithChild<{\n    stdout: string\n    stderr: string\n  }>\n  export function __promisify__(\n    file: string,\n    args: ReadonlyArray<string> | undefined | null\n  ): PromiseWithChild<{\n    stdout: string\n    stderr: string\n  }>\n  export function __promisify__(\n    file: string,\n    options: WithExternalID<ExecFileOptionsWithBufferEncoding>\n  ): PromiseWithChild<{\n    stdout: Buffer\n    stderr: Buffer\n  }>\n  export function __promisify__(\n    file: string,\n    args: ReadonlyArray<string> | undefined | null,\n    options: WithExternalID<ExecFileOptionsWithBufferEncoding>\n  ): PromiseWithChild<{\n    stdout: Buffer\n    stderr: Buffer\n  }>\n  export function __promisify__(\n    file: string,\n    options: WithExternalID<ExecFileOptionsWithStringEncoding>\n  ): PromiseWithChild<{\n    stdout: string\n    stderr: string\n  }>\n  export function __promisify__(\n    file: string,\n    args: ReadonlyArray<string> | undefined | null,\n    options: WithExternalID<ExecFileOptionsWithStringEncoding>\n  ): PromiseWithChild<{\n    stdout: string\n    stderr: string\n  }>\n  export function __promisify__(\n    file: string,\n    options: WithExternalID<ExecFileOptionsWithOtherEncoding>\n  ): PromiseWithChild<{\n    stdout: string | Buffer\n    stderr: string | Buffer\n  }>\n  export function __promisify__(\n    file: string,\n    args: ReadonlyArray<string> | undefined | null,\n    options: WithExternalID<ExecFileOptionsWithOtherEncoding>\n  ): PromiseWithChild<{\n    stdout: string | Buffer\n    stderr: string | Buffer\n  }>\n  export function __promisify__(\n    file: string,\n    options: WithExternalID<ExecFileOptions>\n  ): PromiseWithChild<{\n    stdout: string\n    stderr: string\n  }>\n  export function __promisify__(\n    file: string,\n    args: ReadonlyArray<string> | undefined | null,\n    options: WithExternalID<ExecFileOptions>\n  ): PromiseWithChild<{\n    stdout: string\n    stderr: string\n  }>\n  export function __promisify__(\n    file: string,\n    options:\n      | WithExternalID<ObjectEncodingOptions & ExecFileOptions>\n      | undefined\n      | null\n  ): PromiseWithChild<{\n    stdout: string | Buffer\n    stderr: string | Buffer\n  }>\n  export function __promisify__(\n    file: string,\n    args: ReadonlyArray<string> | undefined | null,\n    options:\n      | WithExternalID<ObjectEncodingOptions & ExecFileOptions>\n      | undefined\n      | null\n  ): PromiseWithChild<{\n    stdout: string | Buffer\n    stderr: string | Buffer\n  }>\n  export function __promisify__(\n    file: string,\n    args?:\n      | ReadonlyArray<string>\n      | undefined\n      | null\n      | WithExternalID<ExecFileOptionsWithBufferEncoding>\n      | WithExternalID<ExecFileOptionsWithStringEncoding>\n      | WithExternalID<ExecFileOptionsWithOtherEncoding>\n      | WithExternalID<ExecFileOptions>\n      | WithExternalID<ObjectEncodingOptions & ExecFileOptions>\n      | WithExternalID<ObjectEncodingOptions & ExecFileOptions>,\n    options?:\n      | undefined\n      | null\n      | WithExternalID<ExecFileOptionsWithBufferEncoding>\n      | WithExternalID<ExecFileOptionsWithStringEncoding>\n      | WithExternalID<ExecFileOptionsWithOtherEncoding>\n      | WithExternalID<ExecFileOptions>\n      | WithExternalID<ObjectEncodingOptions & ExecFileOptions>\n      | WithExternalID<ObjectEncodingOptions & ExecFileOptions>\n  ): PromiseWithChild<{\n    stdout: string | Buffer\n    stderr: string | Buffer\n  }> {\n    if (\n      !!args &&\n      typeof args === 'object' &&\n      isNotArray<\n        | WithExternalID<ExecFileOptionsWithBufferEncoding>\n        | WithExternalID<ExecFileOptionsWithStringEncoding>\n        | WithExternalID<ExecFileOptionsWithOtherEncoding>\n        | WithExternalID<ExecFileOptions>\n        | WithExternalID<ObjectEncodingOptions & ExecFileOptions>\n        | WithExternalID<ObjectEncodingOptions & ExecFileOptions>\n      >(args)\n    ) {\n      options = args\n      args = []\n    }\n    return customPromisify(cpExecFile)(\n      file,\n      spawnOpts(options || {}, getExclude(k), args as readonly string[])\n    )\n  }\n  Object.assign(execFile, { [promisify]: __promisify__ })\n  /* c8 ignore start */\n}\n/* c8 ignore stop */\n\nexport function execFileSync(file: string): Buffer\nexport function execFileSync(\n  file: string,\n  options: WithExternalID<ExecFileSyncOptionsWithStringEncoding>\n): string\nexport function execFileSync(\n  file: string,\n  options: WithExternalID<ExecFileSyncOptionsWithBufferEncoding>\n): Buffer\nexport function execFileSync(\n  file: string,\n  options?: WithExternalID<ExecFileSyncOptions>\n): string | Buffer\nexport function execFileSync(\n  file: string,\n  args: ReadonlyArray<string>\n): Buffer\nexport function execFileSync(\n  file: string,\n  args: ReadonlyArray<string>,\n  options: WithExternalID<ExecFileSyncOptionsWithStringEncoding>\n): string\nexport function execFileSync(\n  file: string,\n  args: ReadonlyArray<string>,\n  options: WithExternalID<ExecFileSyncOptionsWithBufferEncoding>\n): Buffer\nexport function execFileSync(\n  file: string,\n  args?: ReadonlyArray<string>,\n  options?: WithExternalID<ExecFileSyncOptions>\n): string | Buffer\nexport function execFileSync(\n  file: string,\n  args?:\n    | ReadonlyArray<string>\n    | WithExternalID<ExecFileSyncOptions>\n    | WithExternalID<ExecFileSyncOptionsWithStringEncoding>\n    | WithExternalID<ExecFileSyncOptionsWithBufferEncoding>,\n  options?:\n    | WithExternalID<ExecFileSyncOptions>\n    | WithExternalID<ExecFileSyncOptionsWithStringEncoding>\n    | WithExternalID<ExecFileSyncOptionsWithBufferEncoding>\n): string | Buffer {\n  if (\n    args &&\n    typeof args === 'object' &&\n    isNotArray<\n      | WithExternalID<ExecFileSyncOptions>\n      | WithExternalID<ExecFileSyncOptionsWithStringEncoding>\n      | WithExternalID<ExecFileSyncOptionsWithBufferEncoding>\n    >(args)\n  ) {\n    options = args\n    args = []\n  }\n  return cpExecFileSync(\n    file,\n    args || [],\n    spawnOpts(options || {}, getExclude(k), args)\n  )\n}\n\nexport function fork(\n  modulePath: string,\n  options?: ForkOptions\n): ChildProcess\nexport function fork(\n  modulePath: string,\n  args?: ReadonlyArray<string>,\n  options?: WithExternalID<ForkOptions>\n): ChildProcess\nexport function fork(\n  modulePath: string,\n  args?: ForkOptions | ReadonlyArray<string>,\n  options?: WithExternalID<ForkOptions>\n): ChildProcess {\n  if (isNotArray<ForkOptions>(args)) {\n    options = args\n    args = []\n  }\n  return cpFork(modulePath, args, spawnOpts(options || {}, getExclude(k), args))\n}\n"]}