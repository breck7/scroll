import { exec, execFile, execFileSync, execSync, fork, spawn, spawnSync } from './child_process.js';
export * from './child_process.js';
export * from './process-info-node.js';
export { WithExternalID } from './spawn-opts.js';
import { ProcessInfoNode } from './process-info-node.js';
export declare class ProcessInfo {
    #private;
    dir: string;
    exclude: RegExp;
    roots: Set<ProcessInfoNode>;
    uuids: Map<string, ProcessInfoNode>;
    files: Map<string, Set<ProcessInfoNode>>;
    pendingRoot: Map<string, Set<ProcessInfoNode>>;
    pendingParent: Map<string, Set<ProcessInfoNode>>;
    externalIDs: Map<string, ProcessInfoNode>;
    static load({ dir, exclude, }: {
        dir?: string | undefined;
        exclude?: RegExp | undefined;
    }): Promise<ProcessInfo>;
    static loadSync({ dir, exclude, }: {
        dir?: string | undefined;
        exclude?: RegExp | undefined;
    }): ProcessInfo;
    constructor({ dir, exclude, }?: {
        dir?: string | undefined;
        exclude?: RegExp | undefined;
    });
    clear(): void;
    save(): Promise<void>;
    saveSync(): Promise<void>;
    erase(): Promise<void>;
    eraseSync(): void;
    load(): Promise<this>;
    loadSync(): this;
    /**
     * Get a subset of this.externalIDs where one or more of the
     * files have changed since the date on the node.
     */
    externalIDsChanged(filter?: (p: string, node: ProcessInfoNode) => boolean): Promise<Map<string, ProcessInfoNode>>;
    static get Node(): typeof ProcessInfoNode;
    static get ProcessInfo(): typeof ProcessInfo;
    static get spawn(): typeof spawn;
    static get spawnSync(): typeof spawnSync;
    static get exec(): typeof exec;
    static get execSync(): typeof execSync;
    static get execFile(): typeof execFile;
    static get execFileSync(): typeof execFileSync;
    static get fork(): typeof fork;
}
//# sourceMappingURL=index.d.ts.map