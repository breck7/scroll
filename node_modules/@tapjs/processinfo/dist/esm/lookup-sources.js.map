{"version":3,"file":"lookup-sources.js","sourceRoot":"","sources":["../../src/lookup-sources.ts"],"names":[],"mappings":"AAAA,0EAA0E;AAC1E,2EAA2E;AAC3E,yEAAyE;AACzE,sBAAsB;AACtB,EAAE;AACF,uEAAuE;AACvE,uEAAuE;AACvE,gEAAgE;AAChE,EAAE;AACF,oEAAoE;AACpE,sEAAsE;AACtE,wEAAwE;AACxE,qEAAqE;AACrE,uEAAuE;AACvE,0EAA0E;AAC1E,oDAAoD;AAEpD,OAAO,EAAE,iBAAiB,EAAE,MAAM,2BAA2B,CAAA;AAE7D,mDAAmD;AACnD,MAAM,OAAO,GAAG,IAAI,GAAG,EAAU,CAAA;AACjC,MAAM,CAAC,MAAM,YAAY,GAAG,IAAI,GAAG,EAAoB,CAAA;AAEvD,MAAM,CAAC,MAAM,qBAAqB,GAAG,GAAG,EAAE;IACxC,KAAK,MAAM,GAAG,IAAI,OAAO,EAAE;QACzB,MAAM,EAAE,GAAG,iBAAiB,CAAC,GAAG,CAAC,CAAA;QACjC,4BAA4B;QAC5B,qBAAqB;QACrB,IAAI,EAAE,KAAK,KAAK,EAAE;YAChB,sEAAsE;YACtE,mEAAmE;YACnE,mDAAmD;YACnD,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAA;SACpB;aAAM;YACL,oBAAoB;YACpB,MAAM,OAAO,GAAG,EAAE,EAAE,OAAO,EAAE,OAAO,CAAA;YACpC,IAAI,OAAO,EAAE;gBACX,YAAY,CAAC,GAAG,CAAC,GAAG,EAAE,OAAO,CAAC,CAAA;gBAC9B,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAA;aACpB;SACF;KACF;AACH,CAAC,CAAA;AAED,MAAM,CAAC,MAAM,aAAa,GAAG,CAAC,GAAW,EAAE,UAAoB,EAAE,EAAE,CACjE,UAAU,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;AAEjC,IAAI,qBAAqB,GAAG,KAAK,CAAA;AACjC,MAAM,CAAC,MAAM,UAAU,GAAG,CAAC,aAAsB,KAAK,EAAE,EAAE;IACxD,IAAI,OAAO,CAAC,IAAI,IAAI,CAAC,CAAC,UAAU,IAAI,CAAC,qBAAqB,CAAC,EAAE;QAC3D,IAAI,UAAU;YAAE,qBAAqB,GAAG,IAAI,CAAA;QAC5C,qBAAqB,EAAE,CAAA;KACxB;IACD,OAAO,YAAY,CAAA;AACrB,CAAC,CAAA;AAED,MAAM,CAAC,MAAM,kBAAkB,GAAG,CAAC,GAAW,EAAE,EAAE;IAChD,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,GAAG,CAAC;QAAE,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;IAC5C,qBAAqB,EAAE,CAAA;AACzB,CAAC,CAAA","sourcesContent":["// For some reason that is very mysterious as of the time of writing this,\n// node sporadically will in rare cases hang and fail to gracefully exit if\n// a sufficiently large number of findSourceMap calls are made during the\n// process exit event.\n//\n// However, we cannot look up source maps until *after* the module load\n// event is completely finished and the module is about to be executed,\n// because that is when the source map is added to node's cache.\n//\n// To work around this, every time a module is loaded, we attempt to\n// determine whether it likely has the magic sourceMappingURL comment.\n// If so, then we put it in a list, and at each message, attempt to load\n// the sources for all modules in the list. Then, on process exit, if\n// there's anything still pending that likely has a source map, we only\n// have to look up at most one module (ie, if the last module loaded had a\n// source map), which seems to not trigger the hang.\n\nimport { findSourceMapSafe } from './find-source-map-safe.js'\n\n// the list of modules that likely have source maps\nconst maybeSM = new Set<string>()\nexport const sourcesCache = new Map<string, string[]>()\n\nexport const loadPendingSourceMaps = () => {\n  for (const url of maybeSM) {\n    const sm = findSourceMapSafe(url)\n    // only possible on node 19+\n    /* c8 ignore start */\n    if (sm === false) {\n      // can only happen if node found the SM comment, and tried to load it,\n      // but got an error creating the sourcemap, because it's invalid or\n      // the file is not present. No need to keep trying.\n      maybeSM.delete(url)\n    } else {\n      /* c8 ignore stop */\n      const sources = sm?.payload?.sources\n      if (sources) {\n        sourcesCache.set(url, sources)\n        maybeSM.delete(url)\n      }\n    }\n  }\n}\n\nexport const lookupSources = (url: string, processEnd?: boolean) =>\n  getSources(processEnd).get(url)\n\nlet didFinalLookupAttempt = false\nexport const getSources = (processEnd: boolean = false) => {\n  if (maybeSM.size && (!processEnd || !didFinalLookupAttempt)) {\n    if (processEnd) didFinalLookupAttempt = true\n    loadPendingSourceMaps()\n  }\n  return sourcesCache\n}\n\nexport const likelyHasSourceMap = (url: string) => {\n  if (!sourcesCache.has(url)) maybeSM.add(url)\n  loadPendingSourceMaps()\n}\n"]}