"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fork = exports.execFileSync = exports.execFile = exports.execSync = exports.exec = exports.spawnSync = exports.spawn = void 0;
// This wraps all of the various spawn methods such that externalID can be
// set in the options, and ensuring that the proper envs get set.
const child_process_1 = require("child_process");
const get_exclude_js_1 = require("./get-exclude.js");
const spawn_opts_js_1 = require("./spawn-opts.js");
const promisify = Symbol.for('nodejs.util.promisify.custom');
const customPromisify = (e) => 
// the node types list it as __promisify__ but it's actually the symbol
/* c8 ignore start */
e[promisify] || e.__promisify__;
/* c8 ignore stop */
const k = '_TAPJS_PROCESSINFO_EXCLUDE_';
// coercion function when we know it's an array or something else
const isNotArray = (o) => !!o && typeof o === 'object' && !Array.isArray(o);
function spawn(cmd, args, options) {
    if (isNotArray(args)) {
        options = args;
        args = [];
    }
    return (0, child_process_1.spawn)(cmd, args || [], (0, spawn_opts_js_1.spawnOpts)(options || {}, (0, get_exclude_js_1.getExclude)(k), args));
}
exports.spawn = spawn;
function spawnSync(cmd, args, options) {
    if (isNotArray(args)) {
        options = args;
        args = [];
    }
    return (0, child_process_1.spawnSync)(cmd, args || [], (0, spawn_opts_js_1.spawnOpts)(options || {}, (0, get_exclude_js_1.getExclude)(k), args));
}
exports.spawnSync = spawnSync;
function exec(...args) {
    const [cmd, options, callback] = args;
    if (typeof options === 'function') {
        return (0, child_process_1.exec)(cmd, (0, spawn_opts_js_1.spawnOpts)({}, (0, get_exclude_js_1.getExclude)(k), []), options);
    }
    else if (!options) {
        return (0, child_process_1.exec)(cmd, (0, spawn_opts_js_1.spawnOpts)({}, (0, get_exclude_js_1.getExclude)(k), []), callback);
    }
    return (0, child_process_1.exec)(cmd, (0, spawn_opts_js_1.spawnOpts)(options, (0, get_exclude_js_1.getExclude)(k), []), callback);
}
exports.exec = exec;
(function (exec) {
    function __promisify__(command, options) {
        return customPromisify(child_process_1.exec)(command, (0, spawn_opts_js_1.spawnOpts)(options || {}, (0, get_exclude_js_1.getExclude)(k)));
    }
    exec.__promisify__ = __promisify__;
    Object.assign(exec, { [promisify]: __promisify__ });
    /* c8 ignore start */
})(exec || (exports.exec = exec = {}));
function execSync(cmd, options) {
    return (0, child_process_1.execSync)(cmd, (0, spawn_opts_js_1.spawnOpts)(options || {}, (0, get_exclude_js_1.getExclude)(k)));
}
exports.execSync = execSync;
function execFile(file, ...execFileArgs) {
    let args = [];
    let options = {};
    let callback = undefined;
    for (const arg of execFileArgs) {
        if (Array.isArray(arg)) {
            args = arg;
        }
        else if (arg &&
            typeof arg === 'object' &&
            isNotArray(arg)) {
            options = arg;
        }
        else if (typeof arg === 'function') {
            callback = arg;
        }
    }
    return (0, child_process_1.execFile)(file, args, (0, spawn_opts_js_1.spawnOpts)(options, (0, get_exclude_js_1.getExclude)(k), args), callback);
}
exports.execFile = execFile;
(function (execFile) {
    function __promisify__(file, args, options) {
        if (!!args &&
            typeof args === 'object' &&
            isNotArray(args)) {
            options = args;
            args = [];
        }
        return customPromisify(child_process_1.execFile)(file, (0, spawn_opts_js_1.spawnOpts)(options || {}, (0, get_exclude_js_1.getExclude)(k), args));
    }
    execFile.__promisify__ = __promisify__;
    Object.assign(execFile, { [promisify]: __promisify__ });
    /* c8 ignore start */
})(execFile || (exports.execFile = execFile = {}));
function execFileSync(file, args, options) {
    if (args &&
        typeof args === 'object' &&
        isNotArray(args)) {
        options = args;
        args = [];
    }
    return (0, child_process_1.execFileSync)(file, args || [], (0, spawn_opts_js_1.spawnOpts)(options || {}, (0, get_exclude_js_1.getExclude)(k), args));
}
exports.execFileSync = execFileSync;
function fork(modulePath, args, options) {
    if (isNotArray(args)) {
        options = args;
        args = [];
    }
    return (0, child_process_1.fork)(modulePath, args, (0, spawn_opts_js_1.spawnOpts)(options || {}, (0, get_exclude_js_1.getExclude)(k), args));
}
exports.fork = fork;
//# sourceMappingURL=child_process.js.map