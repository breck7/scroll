"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.nodeOptionsEnv = void 0;
const argv_to_node_options_js_1 = require("./argv-to-node-options.js");
const loader_paths_js_1 = require("./loader-paths.js");
const node_options_to_argv_js_1 = require("./node-options-to-argv.js");
const node_module_1 = __importDefault(require("node:module"));
const getKeyValue = (args, i) => {
    const arg = args[i];
    /* c8 ignore start */
    if (typeof arg !== 'string')
        throw new Error('invalid arg');
    /* c8 ignore stop */
    if (arg.includes('=')) {
        const [k, ...rest] = arg.split('=');
        return [true, k, rest.join('=')];
    }
    else if (i < args.length - 1) {
        return [false, arg, args[i + 1]];
    }
    else {
        return [false, arg, undefined];
    }
};
const useImport = !!node_module_1.default
    .register;
// JUST test if we need to do anything at all with the env.
// if the loader is set already in the args, even incorrectly, return true
const hasLoader = (args) => {
    for (let i = 0; i < args.length; i++) {
        const arg = args[i];
        /* c8 ignore start */
        if (typeof arg !== 'string')
            throw new Error('invalid arg');
        /* c8 ignore stop */
        if (!arg.startsWith('--') || arg === '--')
            break;
        const [eq, k, v] = getKeyValue(args, i);
        if (!v) {
            // wasn't a key-value pair
            continue;
        }
        if (!eq)
            i++;
        if ((k === '--experimental-loader' || k === '--loader') &&
            (0, loader_paths_js_1.legacyMatch)(v)) {
            return true;
        }
        if (k === '--import' && (0, loader_paths_js_1.importMatch)(v))
            return true;
    }
    return false;
};
const rmLoader = (args) => {
    const doNotWantKeys = ['--experimental-loader', '--loader', '--import'];
    const result = [];
    let doubledash = false;
    for (let i = 0; i < args.length; i++) {
        const arg = args[i];
        /* c8 ignore start */
        if (typeof arg !== 'string')
            throw new Error('invalid arg');
        /* c8 ignore stop */
        if (!arg.startsWith('--') || doubledash) {
            result.push(arg);
            continue;
        }
        if (arg === '--') {
            result.push(arg);
            doubledash = true;
            continue;
        }
        const [eq, k, v] = getKeyValue(args, i);
        if (!v) {
            // wasn't a key-value pair
            result.push(arg);
            continue;
        }
        if (!eq)
            i++;
        if (doNotWantKeys.includes(k) && ((0, loader_paths_js_1.importMatch)(v) || (0, loader_paths_js_1.legacyMatch)(v))) {
            // it's ours, remove it
            continue;
        }
        // not ours, leave it
        result.push(arg);
        const next = args[i];
        if (!eq && typeof next === 'string')
            result.push(next);
        continue;
    }
    return result;
};
const addLoader = (args) => {
    const addKey = useImport ? '--import' : '--loader';
    const addValue = useImport ? loader_paths_js_1.importLoader : loader_paths_js_1.legacyLoader;
    const doNotWantKeys = [
        '--experimental-loader',
        useImport ? '--loader' : '--import',
    ];
    const test = useImport ? loader_paths_js_1.importMatch : loader_paths_js_1.legacyMatch;
    const result = [];
    let doubledash = false;
    let found = false;
    for (let i = 0; i < args.length; i++) {
        const arg = args[i];
        /* c8 ignore start */
        if (typeof arg !== 'string')
            throw new Error('invalid arg');
        /* c8 ignore stop */
        if (!arg.startsWith('--') || doubledash) {
            result.push(arg);
            continue;
        }
        if (arg === '--') {
            result.push(arg);
            doubledash = true;
            continue;
        }
        const [eq, k, v] = getKeyValue(args, i);
        if (!v) {
            // wasn't a key-value pair
            result.push(arg);
            continue;
        }
        if (!eq)
            i++;
        if (doNotWantKeys.includes(k) && ((0, loader_paths_js_1.importMatch)(v) || (0, loader_paths_js_1.legacyMatch)(v))) {
            // it's ours, but not how we want it, omit
            continue;
        }
        if (k === addKey && test(v)) {
            // already present, don't let it be set multiple times.
            if (found)
                continue;
            found = true;
            result.push(arg);
            const next = args[i];
            if (!eq && typeof next === 'string')
                result.push(next);
        }
        else {
            // not ours
            result.push(arg);
            const next = args[i];
            if (!eq && typeof next === 'string')
                result.push(next);
            continue;
        }
    }
    if (!found)
        result.push(`${addKey}=${addValue}`);
    return !useImport ? addIgnoreLoadersWarning(result) : result;
};
const addIgnoreLoadersWarning = (args) => args.includes('--no-warnings') ||
    args.includes('--no-warnings=ExperimentalLoader')
    ? args
    : args.concat('--no-warnings');
const nodeOptionsEnv = (env, args) => {
    // if we already have the loader in args, don't add to NODE_OPTIONS
    const no = (0, node_options_to_argv_js_1.nodeOptionsToArgv)(env.NODE_OPTIONS);
    return (0, argv_to_node_options_js_1.argvToNodeOptions)(hasLoader(args) ? rmLoader(no) : addLoader(no));
};
exports.nodeOptionsEnv = nodeOptionsEnv;
//# sourceMappingURL=node-options-env.js.map