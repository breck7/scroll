"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.register = void 0;
const process_on_spawn_1 = __importDefault(require("process-on-spawn"));
const node_options_env_js_1 = require("./node-options-env.js");
const p = process;
const envRE = /^_TAPJS_PROCESSINFO_/;
const { hasOwnProperty } = Object.prototype;
const getEnvs = (env, args = []) => {
    // load it here so that it isn't cached before the loader attaches
    // in self-test scenario.
    // copy all of OUR envs, if not specifically set on the env object
    return Object.fromEntries(Object.entries(p.env)
        .filter(([k]) => !(env && hasOwnProperty.call(env, k)) && envRE.test(k))
        .concat([
        ['NODE_OPTIONS', (0, node_options_env_js_1.nodeOptionsEnv)(env?.NODE_OPTIONS ? env : p.env, args)],
    ]));
};
const register = () => {
    process_on_spawn_1.default.addListener(obj => {
        obj.env = {
            ...(obj.env || p.env),
            ...getEnvs(obj.env, obj.args),
        };
        return obj;
    });
};
exports.register = register;
//# sourceMappingURL=register-env.js.map