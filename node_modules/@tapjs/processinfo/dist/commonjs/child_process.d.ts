/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
import { ChildProcess, ChildProcessByStdio, ChildProcessWithoutNullStreams, ExecException, ExecFileException, ExecFileOptions, ExecFileOptionsWithBufferEncoding, ExecFileOptionsWithOtherEncoding, ExecFileOptionsWithStringEncoding, ExecFileSyncOptions, ExecFileSyncOptionsWithBufferEncoding, ExecFileSyncOptionsWithStringEncoding, ExecOptions, ExecSyncOptions, ExecSyncOptionsWithBufferEncoding, ExecSyncOptionsWithStringEncoding, ForkOptions, PromiseWithChild, SpawnOptions, SpawnOptionsWithoutStdio, SpawnOptionsWithStdioTuple, SpawnSyncOptions, SpawnSyncOptionsWithBufferEncoding, SpawnSyncOptionsWithStringEncoding, SpawnSyncReturns, StdioNull, StdioPipe } from 'child_process';
import type { ObjectEncodingOptions } from 'fs';
import type { Readable, Writable } from 'stream';
import { WithExternalID } from './spawn-opts.js';
export declare function spawn(command: string, options?: WithExternalID<SpawnOptionsWithoutStdio>): ChildProcessWithoutNullStreams;
export declare function spawn(command: string, options: WithExternalID<SpawnOptionsWithStdioTuple<StdioPipe, StdioPipe, StdioPipe>>): ChildProcessByStdio<Writable, Readable, Readable>;
export declare function spawn(command: string, options: WithExternalID<SpawnOptionsWithStdioTuple<StdioPipe, StdioPipe, StdioNull>>): ChildProcessByStdio<Writable, Readable, null>;
export declare function spawn(command: string, options: WithExternalID<SpawnOptionsWithStdioTuple<StdioPipe, StdioNull, StdioPipe>>): ChildProcessByStdio<Writable, null, Readable>;
export declare function spawn(command: string, options: WithExternalID<SpawnOptionsWithStdioTuple<StdioNull, StdioPipe, StdioPipe>>): ChildProcessByStdio<null, Readable, Readable>;
export declare function spawn(command: string, options: WithExternalID<SpawnOptionsWithStdioTuple<StdioPipe, StdioNull, StdioNull>>): ChildProcessByStdio<Writable, null, null>;
export declare function spawn(command: string, options: WithExternalID<SpawnOptionsWithStdioTuple<StdioNull, StdioPipe, StdioNull>>): ChildProcessByStdio<null, Readable, null>;
export declare function spawn(command: string, options: WithExternalID<SpawnOptionsWithStdioTuple<StdioNull, StdioNull, StdioPipe>>): ChildProcessByStdio<null, null, Readable>;
export declare function spawn(command: string, options: WithExternalID<SpawnOptionsWithStdioTuple<StdioNull, StdioNull, StdioNull>>): ChildProcessByStdio<null, null, null>;
export declare function spawn(command: string, options: WithExternalID<SpawnOptions>): ChildProcess;
export declare function spawn(command: string, args?: ReadonlyArray<string>, options?: SpawnOptionsWithoutStdio): ChildProcessWithoutNullStreams;
export declare function spawn(command: string, args: ReadonlyArray<string>, options: SpawnOptionsWithStdioTuple<StdioPipe, StdioPipe, StdioPipe>): ChildProcessByStdio<Writable, Readable, Readable>;
export declare function spawn(command: string, args: ReadonlyArray<string>, options: SpawnOptionsWithStdioTuple<StdioPipe, StdioPipe, StdioNull>): ChildProcessByStdio<Writable, Readable, null>;
export declare function spawn(command: string, args: ReadonlyArray<string>, options: SpawnOptionsWithStdioTuple<StdioPipe, StdioNull, StdioPipe>): ChildProcessByStdio<Writable, null, Readable>;
export declare function spawn(command: string, args: ReadonlyArray<string>, options: SpawnOptionsWithStdioTuple<StdioNull, StdioPipe, StdioPipe>): ChildProcessByStdio<null, Readable, Readable>;
export declare function spawn(command: string, args: ReadonlyArray<string>, options: SpawnOptionsWithStdioTuple<StdioPipe, StdioNull, StdioNull>): ChildProcessByStdio<Writable, null, null>;
export declare function spawn(command: string, args: ReadonlyArray<string>, options: SpawnOptionsWithStdioTuple<StdioNull, StdioPipe, StdioNull>): ChildProcessByStdio<null, Readable, null>;
export declare function spawn(command: string, args: ReadonlyArray<string>, options: SpawnOptionsWithStdioTuple<StdioNull, StdioNull, StdioPipe>): ChildProcessByStdio<null, null, Readable>;
export declare function spawn(command: string, args: ReadonlyArray<string>, options: SpawnOptionsWithStdioTuple<StdioNull, StdioNull, StdioNull>): ChildProcessByStdio<null, null, null>;
export declare function spawn(command: string, args: ReadonlyArray<string>, options: SpawnOptions): ChildProcess;
export declare function spawnSync(command: string): SpawnSyncReturns<Buffer>;
export declare function spawnSync(command: string, options: WithExternalID<SpawnSyncOptionsWithStringEncoding>): SpawnSyncReturns<string>;
export declare function spawnSync(command: string, options: WithExternalID<SpawnSyncOptionsWithBufferEncoding>): SpawnSyncReturns<Buffer>;
export declare function spawnSync(command: string, options?: WithExternalID<SpawnSyncOptions>): SpawnSyncReturns<string | Buffer>;
export declare function spawnSync(command: string, args: ReadonlyArray<string>): SpawnSyncReturns<Buffer>;
export declare function spawnSync(command: string, args: ReadonlyArray<string>, options: WithExternalID<SpawnSyncOptionsWithStringEncoding>): SpawnSyncReturns<string>;
export declare function spawnSync(command: string, args: ReadonlyArray<string>, options: WithExternalID<SpawnSyncOptionsWithBufferEncoding>): SpawnSyncReturns<Buffer>;
export declare function spawnSync(command: string, args?: ReadonlyArray<string>, options?: WithExternalID<SpawnSyncOptions>): SpawnSyncReturns<string | Buffer>;
export type ExecArgs = [
    command: string,
    callback?: (error: ExecException | null, stdout: string, stderr: string) => void
] | [
    command: string,
    options: WithExternalID<{
        encoding: 'buffer' | null;
    } & ExecOptions>,
    callback?: (error: ExecException | null, stdout: Buffer, stderr: Buffer) => void
] | [
    command: string,
    options: WithExternalID<{
        encoding: BufferEncoding;
    } & ExecOptions>,
    callback?: (error: ExecException | null, stdout: string, stderr: string) => void
] | [
    command: string,
    options: WithExternalID<{
        encoding: BufferEncoding;
    } & ExecOptions>,
    callback?: (error: ExecException | null, stdout: string | Buffer, stderr: string | Buffer) => void
] | [
    command: string,
    options: WithExternalID<ExecOptions>,
    callback?: (error: ExecException | null, stdout: string, stderr: string) => void
] | [
    command: string,
    options: WithExternalID<ObjectEncodingOptions & ExecOptions> | undefined | null,
    callback?: (error: ExecException | null, stdout: string | Buffer, stderr: string | Buffer) => void
];
export declare function exec(...args: ExecArgs): ChildProcess;
export declare namespace exec {
    function __promisify__(command: string): PromiseWithChild<{
        stdout: string;
        stderr: string;
    }>;
    function __promisify__(command: string, options: WithExternalID<{
        encoding: 'buffer' | null;
    } & ExecOptions>): PromiseWithChild<{
        stdout: Buffer;
        stderr: Buffer;
    }>;
    function __promisify__(command: string, options: WithExternalID<{
        encoding: BufferEncoding;
    } & ExecOptions>): PromiseWithChild<{
        stdout: string;
        stderr: string;
    }>;
    function __promisify__(command: string, options: WithExternalID<ExecOptions>): PromiseWithChild<{
        stdout: string;
        stderr: string;
    }>;
    function __promisify__(command: string, options?: WithExternalID<ObjectEncodingOptions & ExecOptions> | null): PromiseWithChild<{
        stdout: string | Buffer;
        stderr: string | Buffer;
    }>;
}
export declare function execSync(command: string): Buffer;
export declare function execSync(command: string, options: WithExternalID<ExecSyncOptionsWithStringEncoding>): string;
export declare function execSync(command: string, options: WithExternalID<ExecSyncOptionsWithBufferEncoding>): Buffer;
export declare function execSync(command: string, options?: WithExternalID<ExecSyncOptions>): string | Buffer;
export type ExecFileArgs = [] | [
    options: WithExternalID<ObjectEncodingOptions & ExecFileOptions> | undefined | null
] | [args?: ReadonlyArray<string> | null] | [
    args: ReadonlyArray<string> | undefined | null,
    options: WithExternalID<ObjectEncodingOptions & ExecFileOptions> | undefined | null
] | [
    callback: (error: ExecFileException | null, stdout: string, stderr: string) => void
] | [
    args: ReadonlyArray<string> | undefined | null,
    callback: (error: ExecFileException | null, stdout: string, stderr: string) => void
] | [
    options: WithExternalID<ExecFileOptionsWithBufferEncoding>,
    callback: (error: ExecFileException | null, stdout: Buffer, stderr: Buffer) => void
] | [
    args: ReadonlyArray<string> | undefined | null,
    options: WithExternalID<ExecFileOptionsWithBufferEncoding>,
    callback: (error: ExecFileException | null, stdout: Buffer, stderr: Buffer) => void
] | [
    options: WithExternalID<ExecFileOptionsWithStringEncoding>,
    callback: (error: ExecFileException | null, stdout: string, stderr: string) => void
] | [
    args: ReadonlyArray<string> | undefined | null,
    options: WithExternalID<ExecFileOptionsWithStringEncoding>,
    callback: (error: ExecFileException | null, stdout: string, stderr: string) => void
] | [
    options: WithExternalID<ExecFileOptionsWithOtherEncoding>,
    callback: (error: ExecFileException | null, stdout: string | Buffer, stderr: string | Buffer) => void
] | [
    args: ReadonlyArray<string> | undefined | null,
    options: WithExternalID<ExecFileOptionsWithOtherEncoding>,
    callback: (error: ExecFileException | null, stdout: string | Buffer, stderr: string | Buffer) => void
] | [
    options: WithExternalID<ExecFileOptions>,
    callback: (error: ExecFileException | null, stdout: string, stderr: string) => void
] | [
    args: ReadonlyArray<string> | undefined | null,
    options: WithExternalID<ExecFileOptions>,
    callback: (error: ExecFileException | null, stdout: string, stderr: string) => void
] | [
    options: WithExternalID<ObjectEncodingOptions & ExecFileOptions> | undefined | null,
    callback: ((error: ExecFileException | null, stdout: string | Buffer, stderr: string | Buffer) => void) | undefined | null
] | [
    args: ReadonlyArray<string> | undefined | null,
    options: WithExternalID<ObjectEncodingOptions & ExecFileOptions> | undefined | null,
    callback: ((error: ExecFileException | null, stdout: string | Buffer, stderr: string | Buffer) => void) | undefined | null
];
export declare function execFile(file: string, ...execFileArgs: ExecFileArgs): ChildProcess;
export declare namespace execFile {
    function __promisify__(file: string): PromiseWithChild<{
        stdout: string;
        stderr: string;
    }>;
    function __promisify__(file: string, args: ReadonlyArray<string> | undefined | null): PromiseWithChild<{
        stdout: string;
        stderr: string;
    }>;
    function __promisify__(file: string, options: WithExternalID<ExecFileOptionsWithBufferEncoding>): PromiseWithChild<{
        stdout: Buffer;
        stderr: Buffer;
    }>;
    function __promisify__(file: string, args: ReadonlyArray<string> | undefined | null, options: WithExternalID<ExecFileOptionsWithBufferEncoding>): PromiseWithChild<{
        stdout: Buffer;
        stderr: Buffer;
    }>;
    function __promisify__(file: string, options: WithExternalID<ExecFileOptionsWithStringEncoding>): PromiseWithChild<{
        stdout: string;
        stderr: string;
    }>;
    function __promisify__(file: string, args: ReadonlyArray<string> | undefined | null, options: WithExternalID<ExecFileOptionsWithStringEncoding>): PromiseWithChild<{
        stdout: string;
        stderr: string;
    }>;
    function __promisify__(file: string, options: WithExternalID<ExecFileOptionsWithOtherEncoding>): PromiseWithChild<{
        stdout: string | Buffer;
        stderr: string | Buffer;
    }>;
    function __promisify__(file: string, args: ReadonlyArray<string> | undefined | null, options: WithExternalID<ExecFileOptionsWithOtherEncoding>): PromiseWithChild<{
        stdout: string | Buffer;
        stderr: string | Buffer;
    }>;
    function __promisify__(file: string, options: WithExternalID<ExecFileOptions>): PromiseWithChild<{
        stdout: string;
        stderr: string;
    }>;
    function __promisify__(file: string, args: ReadonlyArray<string> | undefined | null, options: WithExternalID<ExecFileOptions>): PromiseWithChild<{
        stdout: string;
        stderr: string;
    }>;
    function __promisify__(file: string, options: WithExternalID<ObjectEncodingOptions & ExecFileOptions> | undefined | null): PromiseWithChild<{
        stdout: string | Buffer;
        stderr: string | Buffer;
    }>;
    function __promisify__(file: string, args: ReadonlyArray<string> | undefined | null, options: WithExternalID<ObjectEncodingOptions & ExecFileOptions> | undefined | null): PromiseWithChild<{
        stdout: string | Buffer;
        stderr: string | Buffer;
    }>;
}
export declare function execFileSync(file: string): Buffer;
export declare function execFileSync(file: string, options: WithExternalID<ExecFileSyncOptionsWithStringEncoding>): string;
export declare function execFileSync(file: string, options: WithExternalID<ExecFileSyncOptionsWithBufferEncoding>): Buffer;
export declare function execFileSync(file: string, options?: WithExternalID<ExecFileSyncOptions>): string | Buffer;
export declare function execFileSync(file: string, args: ReadonlyArray<string>): Buffer;
export declare function execFileSync(file: string, args: ReadonlyArray<string>, options: WithExternalID<ExecFileSyncOptionsWithStringEncoding>): string;
export declare function execFileSync(file: string, args: ReadonlyArray<string>, options: WithExternalID<ExecFileSyncOptionsWithBufferEncoding>): Buffer;
export declare function execFileSync(file: string, args?: ReadonlyArray<string>, options?: WithExternalID<ExecFileSyncOptions>): string | Buffer;
export declare function fork(modulePath: string, options?: ForkOptions): ChildProcess;
export declare function fork(modulePath: string, args?: ReadonlyArray<string>, options?: WithExternalID<ForkOptions>): ChildProcess;
//# sourceMappingURL=child_process.d.ts.map