{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA,yDAQ2B;AAE3B,qDAAkC;AAClC,yDAAsC;AAGtC,2BAAyE;AACzE,0CAAiE;AACjE,+BAAwC;AACxC,qDAA6C;AAC7C,iDAAuD;AACvD,iEAAwD;AAExD,MAAM,CAAC,GAAG,OAAO,CAAA;AACjB,MAAM,OAAO,GAAG,KAAK,EAAE,CAAS,EAAE,KAAgC,EAAE,EAAE;IACpE,KAAK,CAAC,GAAG,CAAC,CAAC,EAAE,MAAM,IAAA,eAAI,EAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,CAAA;AAC/C,CAAC,CAAA;AAED,MAAa,WAAW;IACtB,GAAG,CAAQ;IACX,OAAO,CAAQ;IACf,KAAK,GAAyB,IAAI,GAAG,EAAE,CAAA;IACvC,KAAK,GAAiC,IAAI,GAAG,EAAE,CAAA;IAC/C,KAAK,GAAsC,IAAI,GAAG,EAAE,CAAA;IACpD,WAAW,GAAsC,IAAI,GAAG,EAAE,CAAA;IAC1D,aAAa,GAAsC,IAAI,GAAG,EAAE,CAAA;IAC5D,WAAW,GAAiC,IAAI,GAAG,EAAE,CAAA;IAErD,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,EAChB,GAAG,GAAG,IAAA,cAAO,EAAC,CAAC,CAAC,GAAG,EAAE,EAAE,kBAAkB,CAAC,EAC1C,OAAO,GAAG,gCAAgC,GAC3C;QACC,MAAM,EAAE,GAAG,IAAI,WAAW,CAAC,EAAE,GAAG,EAAE,OAAO,EAAE,CAAC,CAAA;QAC5C,MAAM,EAAE,CAAC,IAAI,EAAE,CAAA;QACf,OAAO,EAAE,CAAA;IACX,CAAC;IAED,MAAM,CAAC,QAAQ,CAAC,EACd,GAAG,GAAG,IAAA,cAAO,EAAC,CAAC,CAAC,GAAG,EAAE,EAAE,kBAAkB,CAAC,EAC1C,OAAO,GAAG,gCAAgC,GAC3C;QACC,MAAM,EAAE,GAAG,IAAI,WAAW,CAAC,EAAE,GAAG,EAAE,OAAO,EAAE,CAAC,CAAA;QAC5C,EAAE,CAAC,QAAQ,EAAE,CAAA;QACb,OAAO,EAAE,CAAA;IACX,CAAC;IAED,YAAY,EACV,GAAG,GAAG,IAAA,cAAO,EAAC,CAAC,CAAC,GAAG,EAAE,EAAE,kBAAkB,CAAC,EAC1C,OAAO,GAAG,gCAAgC,GAC3C,GAAG,EAAE;QACJ,IAAI,CAAC,GAAG,GAAG,GAAG,CAAA;QACd,IAAI,CAAC,OAAO,GAAG,OAAO,CAAA;IACxB,CAAC;IAED,KAAK;QACH,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAA;QAClB,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAA;QAClB,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAA;QAClB,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAA;IAC1B,CAAC;IAED,KAAK,CAAC,IAAI;QACR,MAAM,IAAA,gBAAK,EAAC,IAAI,CAAC,GAAG,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAA;QAC1C,MAAM,MAAM,GAAG,EAAE,CAAA;QACjB,KAAK,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE;YAC/C,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,IAAI,IAAI,OAAO,CAAA;YACpC,MAAM,CAAC,IAAI,CAAC,IAAA,oBAAS,EAAC,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,IAAI,EAAE,MAAM,CAAC,CAAC,CAAA;SAC/D;QACD,MAAM,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAA;IAC3B,CAAC;IAED,KAAK,CAAC,QAAQ;QACZ,IAAA,cAAS,EAAC,IAAI,CAAC,GAAG,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAA;QACxC,KAAK,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE;YAC/C,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,IAAI,IAAI,OAAO,CAAA;YACpC,IAAA,kBAAa,EAAC,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,IAAI,EAAE,MAAM,CAAC,CAAA;SACtD;IACH,CAAC;IAED,KAAK,CAAC,KAAK;QACT,IAAI,CAAC,KAAK,EAAE,CAAA;QACZ,MAAM,IAAA,aAAE,EAAC,IAAI,CAAC,GAAG,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAA;IACzC,CAAC;IAED,SAAS;QACP,IAAI,CAAC,KAAK,EAAE,CAAA;QACZ,IAAA,WAAM,EAAC,IAAI,CAAC,GAAG,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAA;IACvC,CAAC;IAED,KAAK,CAAC,IAAI;QACR,MAAM,QAAQ,GAAG,EAAE,CAAA;QACnB,KAAK,MAAM,KAAK,IAAI,MAAM,IAAA,kBAAO,EAAC,IAAI,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE;YAC3D,MAAM,IAAI,GAAG,IAAA,eAAQ,EAAC,KAAK,EAAE,OAAO,CAAC,CAAA;YACrC,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;gBACxB,SAAQ;aACT;YACD,MAAM,CAAC,GAAG,IAAA,cAAO,EAAC,IAAI,CAAC,GAAG,EAAE,KAAK,CAAC,CAAA;YAClC,QAAQ,CAAC,IAAI,CACX,IAAA,uBAAQ,EAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;gBACtB,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,KAAK,IAAI,EAAE;oBACpC,OAAM;iBACP;gBACD,IAAI,sCAAe,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;YACtC,CAAC,CAAC,CACH,CAAA;SACF;QACD,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAA;QAE3B,OAAO,IAAI,CAAA;IACb,CAAC;IAED,QAAQ;QACN,IAAI,OAAiB,CAAA;QACrB,IAAI;YACF,OAAO,GAAG,IAAA,gBAAW,EAAC,IAAI,CAAC,GAAG,CAAC,CAAA;SAChC;QAAC,OAAO,CAAC,EAAE;YACV,OAAO,GAAG,EAAE,CAAA;SACb;QACD,KAAK,MAAM,KAAK,IAAI,OAAO,EAAE;YAC3B,MAAM,IAAI,GAAG,IAAA,eAAQ,EAAC,KAAK,EAAE,OAAO,CAAC,CAAA;YACrC,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;gBACxB,SAAQ;aACT;YACD,MAAM,CAAC,GAAG,IAAA,cAAO,EAAC,IAAI,CAAC,GAAG,EAAE,KAAK,CAAC,CAAA;YAClC,MAAM,IAAI,GAAG,IAAA,2BAAY,EAAC,CAAC,CAAC,CAAA;YAC5B,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,KAAK,IAAI,EAAE;gBACpC,SAAQ;aACT;YACD,IAAI,sCAAe,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;SACrC;QAED,OAAO,IAAI,CAAA;IACb,CAAC;IAED,UAAU,CACR,IAAqB,EACrB,KAAgC,EAChC,OAAe;QAEf,MAAM,QAAQ,GAAoB,EAAE,CAAA;QAEpC,KAAK,MAAM,CAAC,IAAI,IAAI,CAAC,KAAK,EAAE;YAC1B,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;gBAAE,SAAQ;YAC7B,OAAO;YACP,qBAAqB;YACrB,IAAI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;gBAAE,SAAQ;YAC1B,oBAAoB;YACpB,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAA;YAChC,MAAM,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAA;YAC3B,IAAI,GAAG,EAAE;gBACP,KAAK,MAAM,CAAC,IAAI,GAAG,EAAE;oBACnB,qBAAqB;oBACrB,IAAI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;wBAAE,SAAQ;oBAC1B,oBAAoB;oBACpB,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAA;iBACjC;aACF;SACF;QACD,KAAK,MAAM,CAAC,IAAI,IAAI,CAAC,WAAW,IAAI,EAAE,EAAE;YACtC,QAAQ,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC,CAAA;SACrD;QACD,OAAO,QAAQ,CAAA;IACjB,CAAC;IAED,6DAA6D;IAC7D,8DAA8D;IAC9D,iDAAiD;IACjD,cAAc,CACZ,IAAqB,EACrB,KAAgC,EAChC,OAAe;QAEf,MAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QAC/B,KAAK,MAAM,CAAC,IAAI,IAAI,CAAC,KAAK,EAAE;YAC1B,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;gBAAE,SAAQ;YAC7B,MAAM,EAAE,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAA;YACvB,IAAI,CAAC,EAAE,EAAE;gBACP,OAAO,IAAI,CAAA;aACZ;YACD,IAAI,CAAC,GAAG,MAAM,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;YAC5B,IAAI,CAAC,CAAC;gBAAE,SAAQ;YAChB,MAAM,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAA;YAC3B,IAAI,CAAC,GAAG,EAAE,MAAM;gBAAE,OAAO,IAAI,CAAA;iBACxB;gBACH,KAAK,MAAM,CAAC,IAAI,GAAG,EAAE;oBACnB,MAAM,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAA;oBACxB,IAAI,CAAC,GAAG,IAAI,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE;wBACjC,OAAO,IAAI,CAAA;qBACZ;iBACF;aACF;SACF;QACD,+CAA+C;QAC/C,wDAAwD;QACxD,KAAK,MAAM,CAAC,IAAI,IAAI,CAAC,WAAW,IAAI,EAAE,EAAE;YACtC,IAAI,IAAI,CAAC,cAAc,CAAC,CAAC,EAAE,KAAK,EAAE,OAAO,CAAC,EAAE;gBAC1C,OAAO,IAAI,CAAA;aACZ;SACF;QACD,OAAO,KAAK,CAAA;IACd,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,kBAAkB,CACtB,SAAwD,GAAG,EAAE,CAAC,IAAI;QAElE,MAAM,OAAO,GAAG,IAAA,2BAAU,EAAC,6BAA6B,EAAE,KAAK,CAAC,CAAA;QAChE,MAAM,OAAO,GAAG,IAAI,GAAG,EAA2B,CAAA;QAClD,MAAM,QAAQ,GAAoB,EAAE,CAAA;QACpC,MAAM,KAAK,GAAG,IAAI,GAAG,EAAwB,CAAA;QAC7C,KAAK,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,IAAI,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,EAAE;YACnD,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC;gBAAE,SAAQ;YAC/B,QAAQ,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC,CAAA;SACxD;QACD,6CAA6C;QAC7C,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAA;QAE3B,KAAK,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,IAAI,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,EAAE;YACnD,IAAI,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,IAAI,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,KAAK,EAAE,OAAO,CAAC,EAAE;gBACjE,OAAO,CAAC,GAAG,CAAC,EAAE,EAAE,IAAI,CAAC,CAAA;aACtB;SACF;QACD,OAAO,OAAO,CAAA;IAChB,CAAC;IAED,MAAM,KAAK,IAAI;QACb,OAAO,sCAAe,CAAA;IACxB,CAAC;IAED,MAAM,KAAK,WAAW;QACpB,OAAO,WAAW,CAAA;IACpB,CAAC;IAED,MAAM,KAAK,KAAK;QACd,OAAO,wBAAK,CAAA;IACd,CAAC;IAED,MAAM,KAAK,SAAS;QAClB,OAAO,4BAAS,CAAA;IAClB,CAAC;IAED,MAAM,KAAK,IAAI;QACb,OAAO,uBAAI,CAAA;IACb,CAAC;IAED,MAAM,KAAK,QAAQ;QACjB,OAAO,2BAAQ,CAAA;IACjB,CAAC;IAED,MAAM,KAAK,QAAQ;QACjB,OAAO,2BAAQ,CAAA;IACjB,CAAC;IAED,MAAM,KAAK,YAAY;QACrB,OAAO,+BAAY,CAAA;IACrB,CAAC;IAED,MAAM,KAAK,IAAI;QACb,OAAO,uBAAI,CAAA;IACb,CAAC;CACF;AArPD,kCAqPC","sourcesContent":["import {\n  exec,\n  execFile,\n  execFileSync,\n  execSync,\n  fork,\n  spawn,\n  spawnSync,\n} from './child_process.js'\n\nexport * from './child_process.js'\nexport * from './process-info-node.js'\nexport { WithExternalID } from './spawn-opts.js'\n\nimport { mkdirSync, readdirSync, rmSync, Stats, writeFileSync } from 'fs'\nimport { mkdir, readdir, rm, stat, writeFile } from 'fs/promises'\nimport { basename, resolve } from 'path'\nimport { getExclude } from './get-exclude.js'\nimport { safeJSON, safeJSONSync } from './json-file.js'\nimport { ProcessInfoNode } from './process-info-node.js'\n\nconst p = process\nconst tryStat = async (f: string, stats: Map<string, Stats | null>) => {\n  stats.set(f, await stat(f).catch(() => null))\n}\n\nexport class ProcessInfo {\n  dir: string\n  exclude: RegExp\n  roots: Set<ProcessInfoNode> = new Set()\n  uuids: Map<string, ProcessInfoNode> = new Map()\n  files: Map<string, Set<ProcessInfoNode>> = new Map()\n  pendingRoot: Map<string, Set<ProcessInfoNode>> = new Map()\n  pendingParent: Map<string, Set<ProcessInfoNode>> = new Map()\n  externalIDs: Map<string, ProcessInfoNode> = new Map()\n\n  static async load({\n    dir = resolve(p.cwd(), '.tap/processinfo'),\n    exclude = /(^|\\\\|\\/)node_modules(\\\\|\\/|$)/,\n  }): Promise<ProcessInfo> {\n    const pi = new ProcessInfo({ dir, exclude })\n    await pi.load()\n    return pi\n  }\n\n  static loadSync({\n    dir = resolve(p.cwd(), '.tap/processinfo'),\n    exclude = /(^|\\\\|\\/)node_modules(\\\\|\\/|$)/,\n  }): ProcessInfo {\n    const pi = new ProcessInfo({ dir, exclude })\n    pi.loadSync()\n    return pi\n  }\n\n  constructor({\n    dir = resolve(p.cwd(), '.tap/processinfo'),\n    exclude = /(^|\\\\|\\/)node_modules(\\\\|\\/|$)/,\n  } = {}) {\n    this.dir = dir\n    this.exclude = exclude\n  }\n\n  clear() {\n    this.roots.clear()\n    this.files.clear()\n    this.uuids.clear()\n    this.externalIDs.clear()\n  }\n\n  async save() {\n    await mkdir(this.dir, { recursive: true })\n    const writes = []\n    for (const [uuid, info] of this.uuids.entries()) {\n      const f = `${this.dir}/${uuid}.json`\n      writes.push(writeFile(f, JSON.stringify(info) + '\\n', 'utf8'))\n    }\n    await Promise.all(writes)\n  }\n\n  async saveSync() {\n    mkdirSync(this.dir, { recursive: true })\n    for (const [uuid, info] of this.uuids.entries()) {\n      const f = `${this.dir}/${uuid}.json`\n      writeFileSync(f, JSON.stringify(info) + '\\n', 'utf8')\n    }\n  }\n\n  async erase() {\n    this.clear()\n    await rm(this.dir, { recursive: true })\n  }\n\n  eraseSync() {\n    this.clear()\n    rmSync(this.dir, { recursive: true })\n  }\n\n  async load() {\n    const promises = []\n    for (const entry of await readdir(this.dir).catch(() => [])) {\n      const uuid = basename(entry, '.json')\n      if (this.uuids.has(uuid)) {\n        continue\n      }\n      const f = resolve(this.dir, entry)\n      promises.push(\n        safeJSON(f).then(data => {\n          if (!data.uuid || data.uuid !== uuid) {\n            return\n          }\n          new ProcessInfoNode(data).link(this)\n        })\n      )\n    }\n    await Promise.all(promises)\n\n    return this\n  }\n\n  loadSync() {\n    let entries: string[]\n    try {\n      entries = readdirSync(this.dir)\n    } catch (_) {\n      entries = []\n    }\n    for (const entry of entries) {\n      const uuid = basename(entry, '.json')\n      if (this.uuids.has(uuid)) {\n        continue\n      }\n      const f = resolve(this.dir, entry)\n      const data = safeJSONSync(f)\n      if (!data.uuid || data.uuid !== uuid) {\n        continue\n      }\n      new ProcessInfoNode(data).link(this)\n    }\n\n    return this\n  }\n\n  #statFiles(\n    node: ProcessInfoNode,\n    stats: Map<string, Stats | null>,\n    exclude: RegExp\n  ) {\n    const promises: Promise<void>[] = []\n\n    for (const f of node.files) {\n      if (exclude.test(f)) continue\n      // race\n      /* c8 ignore start */\n      if (stats.has(f)) continue\n      /* c8 ignore stop */\n      promises.push(tryStat(f, stats))\n      const src = node.sources[f]\n      if (src) {\n        for (const s of src) {\n          /* c8 ignore start */\n          if (stats.has(s)) continue\n          /* c8 ignore stop */\n          promises.push(tryStat(s, stats))\n        }\n      }\n    }\n    for (const c of node.descendants ?? []) {\n      promises.push(...this.#statFiles(c, stats, exclude))\n    }\n    return promises\n  }\n\n  // if any files are newer than the date, or null, then add it\n  // if a file has changed, but its sources haven't, then assume\n  // it's still the same content, and not \"changed\"\n  #hasNewerFiles(\n    node: ProcessInfoNode,\n    stats: Map<string, Stats | null>,\n    exclude: RegExp\n  ) {\n    const p = Date.parse(node.date)\n    for (const f of node.files) {\n      if (exclude.test(f)) continue\n      const st = stats.get(f)\n      if (!st) {\n        return true\n      }\n      let c = Number(st.mtime) > p\n      if (!c) continue\n      const src = node.sources[f]\n      if (!src?.length) return true\n      else {\n        for (const s of src) {\n          const sst = stats.get(s)\n          if (!sst || Number(sst.mtime) > p) {\n            return true\n          }\n        }\n      }\n    }\n    // no direct files are newer, check descendants\n    // if one of them have a changed file, then that's a yes\n    for (const c of node.descendants ?? []) {\n      if (this.#hasNewerFiles(c, stats, exclude)) {\n        return true\n      }\n    }\n    return false\n  }\n\n  /**\n   * Get a subset of this.externalIDs where one or more of the\n   * files have changed since the date on the node.\n   */\n  async externalIDsChanged(\n    filter: (p: string, node: ProcessInfoNode) => boolean = () => true\n  ) {\n    const exclude = getExclude('_TAPJS_PROCESSINFO_EXCLUDE_', false)\n    const changed = new Map<string, ProcessInfoNode>()\n    const promises: Promise<void>[] = []\n    const stats = new Map<string, Stats | null>()\n    for (const [id, node] of this.externalIDs.entries()) {\n      if (!filter(id, node)) continue\n      promises.push(...this.#statFiles(node, stats, exclude))\n    }\n    // consider limiting with promise-call-limit?\n    await Promise.all(promises)\n\n    for (const [id, node] of this.externalIDs.entries()) {\n      if (filter(id, node) && this.#hasNewerFiles(node, stats, exclude)) {\n        changed.set(id, node)\n      }\n    }\n    return changed\n  }\n\n  static get Node() {\n    return ProcessInfoNode\n  }\n\n  static get ProcessInfo() {\n    return ProcessInfo\n  }\n\n  static get spawn() {\n    return spawn\n  }\n\n  static get spawnSync() {\n    return spawnSync\n  }\n\n  static get exec() {\n    return exec\n  }\n\n  static get execSync() {\n    return execSync\n  }\n\n  static get execFile() {\n    return execFile\n  }\n\n  static get execFileSync() {\n    return execFileSync\n  }\n\n  static get fork() {\n    return fork\n  }\n}\n"]}