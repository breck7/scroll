{"version":3,"file":"json-file.js","sourceRoot":"","sources":["../../src/json-file.ts"],"names":[],"mappings":";AAAA,iEAAiE;;;AAEjE,2BAAiC;AACjC,0CAAsC;AAE/B,MAAM,YAAY,GAAG,CAAC,CAAS,EAAE,EAAE;IACxC,IAAI;QACF,OAAO,IAAI,CAAC,KAAK,CAAC,IAAA,iBAAY,EAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAA;KAC3C;IAAC,OAAO,CAAC,EAAE;QACV,OAAO,EAAE,CAAA;KACV;AACH,CAAC,CAAA;AANY,QAAA,YAAY,gBAMxB;AAEM,MAAM,QAAQ,GAAG,CAAC,CAAS,EAAE,EAAE,CACpC,IAAA,mBAAQ,EAAC,CAAC,EAAE,MAAM,CAAC;KAChB,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;KACxB,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;AAHT,QAAA,QAAQ,YAGC","sourcesContent":["// read the file and json decode it, if anything fails, return {}\n\nimport { readFileSync } from 'fs'\nimport { readFile } from 'fs/promises'\n\nexport const safeJSONSync = (f: string) => {\n  try {\n    return JSON.parse(readFileSync(f, 'utf8'))\n  } catch (e) {\n    return {}\n  }\n}\n\nexport const safeJSON = (f: string) =>\n  readFile(f, 'utf8')\n    .then(d => JSON.parse(d))\n    .catch(() => ({}))\n"]}