{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  AsyncHook,\n  createHook,\n  executionAsyncId,\n  HookCallbacks,\n} from 'async_hooks'\n\n// grab a reference to this right away, in case the user changes it\n// weird thing to do, but this is used in tests a lot, where weird\n// things are quite common. Set a dummy process if we don't have it.\nconst proc =\n  typeof process === 'object' && process\n    ? process\n    : ({\n        _handler: null,\n        env: {},\n        execArgv: [],\n        /* c8 ignore start */\n        hasUncaughtExceptionCaptureCallback: () => {\n          const p = proc as NodeJS.Process & { _handler: any }\n          return !!p._handler\n        },\n        setUncaughtExceptionCaptureCallback: (fn: Function) => {\n          const p = proc as NodeJS.Process & { _handler: any }\n          p._handler = fn\n        },\n        /* c8 ignore end */\n        listeners: () => ({}),\n        emit: () => false,\n        once: () => proc,\n        on: () => proc,\n        removeListener: () => proc,\n      } as unknown as NodeJS.Process)\n\nimport { writeSync } from 'fs'\nimport { format } from 'util'\nconst debugAlways = (() => {\n  return (...args: any[]) => writeSync(2, format(...args) + '\\n')\n})()\nconst debug = proc.env.ASYNC_HOOK_DOMAIN_DEBUG !== '1' ? () => {} : debugAlways\n\nconst domains = new Map()\n\n// possible values here:\n// throw (default)\n//    we let our rejection handler call the domain handler\n// none, warn-with-error-code\n//    same as default\n// warn\n//    same as default (no way to make it any less noisy, sadly)\n// strict\n//    set the uncaughtExceptionMonitor, because it will throw,\n//    but do NOT set our rejection handler, or it'll double-handle\nconst unhandledRejectionMode = (() => {\n  let mode = 'throw'\n  for (let i = 0; i < proc.execArgv.length; i++) {\n    const m = process.execArgv[i]\n    if (m.startsWith('--unhandled-rejections=')) {\n      mode = m.substring('--unhandled-rejections='.length)\n    } else if (m === '--unhandled-rejections') {\n      mode = proc.execArgv[i + 1]\n    }\n  }\n  return mode\n})()\n\n// the async hook activation and deactivation\nlet domainHook: AsyncHook | null = null\nconst activateDomains = () => {\n  if (!domainHook) {\n    debug('ACTIVATE')\n    domainHook = createHook(hookMethods)\n    domainHook.enable()\n    proc.on('uncaughtExceptionMonitor', domainErrorHandler)\n    if (unhandledRejectionMode !== 'strict') {\n      proc.emit = domainProcessEmit as NodeJS.Process['emit']\n    }\n  }\n}\nconst deactivateDomains = () => {\n  if (domainHook) {\n    debug('DEACTIVATE')\n    domainHook.disable()\n    domainHook = null\n    proc.removeListener('uncaughtExceptionMonitor', domainErrorHandler)\n    proc.emit = originalProcessEmit\n  }\n}\n\n// monkey patch to silently listen on unhandledRejection, without\n// marking the event as 'handled' unless we handled it.\n// Do nothing if there's a user handler for the event, though.\nconst originalProcessEmit = proc.emit\nconst domainProcessEmit = (ev: string | symbol, ...args: any[]) => {\n  if (\n    ev !== 'unhandledRejection' ||\n    proc.listeners('unhandledRejection').length\n  ) {\n    //@ts-ignore\n    return originalProcessEmit.call(proc, ev, ...args)\n  }\n  const er = args[0]\n  return domainErrorHandler(er, 'unhandledRejection', true)\n}\n\nconst domainErrorHandler = (\n  er: unknown,\n  ev?: string,\n  rejectionHandler: boolean = false\n) => {\n  debug('AHD MAYBE HANDLE?', ev, er)\n  // if anything else attached a handler, then it's their problem,\n  // not ours.  get out of the way.\n  if (\n    proc.hasUncaughtExceptionCaptureCallback() ||\n    proc.listeners('uncaughtException').length > 0\n  ) {\n    debug('OTHER HANDLER ALREADY SET')\n    return false\n  }\n  const domain = currentDomain()\n  if (domain) {\n    debug('HAVE DOMAIN')\n    try {\n      domain.onerror(er, ev)\n    } catch (e) {\n      debug('ONERROR THREW', e)\n      domain.destroy()\n      // this is pretty bad.  treat it as a fatal exception, which\n      // may or may not be caught in the next domain up.\n      // We drop 'from promise', because now it's a throw.\n      if (domainErrorHandler(e)) {\n        return true\n      }\n      throw e\n    }\n    // at this point, we presumably handled the error, and attach a\n    // no-op one-time handler to just prevent the crash from happening.\n    if (!rejectionHandler) {\n      proc.setUncaughtExceptionCaptureCallback(() => {\n        debug('UECC ONCE')\n        proc.setUncaughtExceptionCaptureCallback(null)\n      })\n      // in strict mode, node raises the error *before* the uR event,\n      // and it warns if the uR event is not handled.\n      if (unhandledRejectionMode === 'strict') {\n        process.once('unhandledRejection', () => {})\n      }\n    }\n    return true\n  }\n  return false\n}\n\n// the hook callbacks\nconst hookMethods: HookCallbacks = {\n  init(id, type, triggerId) {\n    debug('INIT', id, type, triggerId)\n    const current = domains.get(triggerId)\n    if (current) {\n      debug('INIT have current', current)\n      current.ids.add(id)\n      domains.set(id, current)\n      debug('POST INIT', id, type, current)\n    }\n  },\n\n  destroy(id) {\n    const domain = domains.get(id)\n    debug('DESTROY', id)\n    if (!domain) {\n      return\n    }\n    domains.delete(id)\n    domain.ids.delete(id)\n    if (!domain.ids.size) {\n      domain.destroy()\n    }\n  },\n}\n\nconst currentDomain = () => domains.get(executionAsyncId())\n\nlet id = 1\nexport class Domain {\n  eid: number\n  id: number\n  ids: Set<number>\n  onerror: (\n    er: unknown,\n    event: 'uncaughtException' | 'unhandledRejection'\n  ) => any\n  parent?: Domain\n  destroyed: boolean\n\n  constructor(\n    onerror: (\n      er: unknown,\n      event: 'uncaughtException' | 'unhandledRejection'\n    ) => any\n  ) {\n    if (typeof onerror !== 'function') {\n      // point at where the wrong thing was actually done\n      const er = new TypeError('onerror must be a function')\n      Error.captureStackTrace(er, this.constructor)\n      throw er\n    }\n    const eid = executionAsyncId()\n    this.eid = eid\n    this.id = id++\n    this.ids = new Set([eid])\n    this.onerror = onerror\n    this.parent = domains.get(eid)\n    this.destroyed = false\n    domains.set(eid, this)\n    debug('NEW DOMAIN', this.id, this.eid, this.ids)\n    activateDomains()\n  }\n\n  destroy() {\n    if (this.destroyed) {\n      return\n    }\n    debug('DESTROY DOMAIN', this.id, this.eid, this.ids)\n    this.destroyed = true\n    // find the nearest non-destroyed parent, assign all ids to it\n    let parent = this.parent\n    while (parent && parent.destroyed) {\n      parent = parent.parent\n    }\n    this.parent = parent\n    if (parent) {\n      for (const id of this.ids) {\n        domains.set(id, parent)\n        parent.ids.add(id)\n      }\n    } else {\n      for (const id of this.ids) {\n        domains.delete(id)\n      }\n    }\n    this.ids = new Set()\n    if (!domains.size) {\n      deactivateDomains()\n    }\n  }\n}\n"]}