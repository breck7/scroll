markupLineParser
 catchAllAtomType anyAtom
 catchAllParser markupLineParser
abstractMarkupLangParser abstractScrollParser
 catchAllParser markupLineParser
 javascript
  buildHtml() {
   return this.compiler(this.subparticlesToString())
  }
  get compiler() {
    try {
      let compiler
      const path = require("path")
      try {
        // Scan the local folder for the module
        compiler = require(path.join(this.root.folderPath, "node_modules", this.packageName))
      } catch (err) {
        // Fallback to global
        compiler = require(path.join(this.globalPath, this.packageName))
      }
      return (this.importName ? compiler[this.importName] : compiler) || (str => str)
    } catch (err) {
      console.error(`❌ ${this.cue} skipped. Try "npm install -g ${this.packageName}"`)
      return str => str
    }
  }
  get globalPath() {
    const { execSync } = require("child_process")
    return execSync("npm root -g").toString().trim()
  }
  isPackageInstalled(packageName) {
    try {
      require.resolve(packageName);
      return true;
    } catch (error) {
      return false;
    }
  }
markdownParser abstractMarkupLangParser
 description If npm package `marked` is installed globally will compile markdown.
 cueFromId
 javascript
  packageName = "marked"
  importName = "marked"
textileParser abstractMarkupLangParser
 description If npm package `textile-js` is installed globally will compile textile.
 cueFromId
 javascript
  packageName = "textile-js"
bbCodeParser abstractMarkupLangParser
 description If npm package `ya-bbcode` is installed globally will compile BBcode.
 cueFromId
 javascript
  packageName = "ya-bbcode"
  buildHtml() {
   if (!this.isPackageInstalled(this.packageName)) return this.subparticlesToString()
   return new this.compiler().parse(this.subparticlesToString())
  }
